/**
 * @(#)OShL 1.0 03/14/2004
 *
 * Copyright (c) 2004
 */
package org.optimizationservices.oscommon.communicationinterface;

/**
 *
 * <P>The <code>OShL</code> interface declares all the methods as specified in the 
 * Optimization Services (OS) Framework, specifically the Optimization Services hook-up 
 * Language (OShL). These methods are called by an OS agent to invoke any OS-based solvers, anlyzers, scheduler etc.. 
 * Any solver, anlyzer or other related OS component that wants to become an OS-type 
 * callable on the distributed system must implement this interface.  
 *
 * </p>
 * @author Robert Fourer, Jun Ma, Kipp Martin
 * @version 1.0, 03/14/2004
 * @since OS 1.0
 */
public interface OShL{	
	/**
	 * Get a unique job id from a service, before calling the service to solve a problem. This method call is always
	 * required before an asynchronous send call. It may be or may not be used before a synchronous solve call. 
	 * 
	 * </p>
	 * @param osol holds the optimization option in a string which format follows the 
	 * Optimization Services option Language (OSoL) schema. 
	 * @return jobID, a unique job ID generated by the service. 
	 */
	public String getJobID(String osol);

	/**
	 * Solve an optimization problem with options. The problem instance is given by a string following 
	 * the Optimization Services instance Language (OSiL) schema. The options are given in a string following 
	 * the Optimization Services option Language (OSoL) schema. The function returns the solution
	 * in a string that follows the Optimization Services result Language (OSrL) schema.
	 * 
	 * </P>
	 * 
	 * @param osil holds the optimization instance in a string which format follows the 
	 * Optimization Services instance Language (OSiL) schema.  
	 * @param osol holds the optimization option in a string which format follows the 
	 * Optimization Services option Language (OSoL) schema. 
	 * @return osrl, the optimization result in a string which format follows the Optimization
	 * Services result Language (OSrL) schema.  
	 */
	public String solve(String osil, String osol);
		
	/**
	 * Send (or asynchronously solve) an optimization problem with options. The problem instance is given by a string following 
	 * the Optimization Services instance Language (OSiL) schema. The options are given in a string following 
	 * the Optimization Services option Language (OSoL) schema. The OSoL option has to contain a job id. 
	 * 
	 * </P>
	 * 
	 * @param osil holds the optimization instance in a string which format follows the 
	 * Optimization Services instance Language (OSiL) schema.  	 
	 * @param osol holds the optimization option in a string which format follows the 
	 * Optimization Services option Language (OSoL) schema. It should contain the jobID information that 
	 * is previous obtained from the optimization service.  
	 * @return success, whether the asynchronous communication is successful or not. 
	 */
	public boolean send(String osil, String osol);
	
	/**
	 * Retrieve results from a previously sent/solved optimization job.  
	 * 
	 * @param osol holds the optimization option in a string which format follows the 
	 * Optimization Services option Language (OSoL) schema. It should contain the jobID information that 
	 * is previous obtained from the optimization service.  
	 * @return osrl, the optimization result in a string which format follows the Optimization
	 * Services result Language (OSrL) schema.  If the result cannot be retrieved, it should 
	 * be indicated in the message/status section of OSrL. 
	 */
	public String retrieve(String osol);

	/**
	 * Kill a previously sent/solved optimization job.  
	 * 
	 * @param osol holds the optimization option in a string which format follows the 
	 * Optimization Services option Language (OSoL) schema. It should contain the jobID information that 
	 * is previous obtained from the optimization service.   
	 * @return ospl, the ouput kill process information in a string which format follows the OSpL schema.  
	 */
	public String kill(String osol);
	
	/**
	 * This method is called by one optimization service on another optimization service
	 * to provide runtime dynamic process information (push mechanism).
	 *
	 * </P>
	 * @param osplInput holds the input process information a string which format follows the Optimization
	 * Services process Language (OSpL) schema.
	 * @param osol holds the optimization option in a string which format follows the 
	 * Optimization Services option Language (OSoL) schema.    
	 * @return osplOutput, the ouput process information in a string which format follows the OSpL schema.
	 */
	public String knock(String osplInput, String osol);

}//interface OShL
