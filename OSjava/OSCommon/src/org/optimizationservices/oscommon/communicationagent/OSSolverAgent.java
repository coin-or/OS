/**
 * @(#)OSSolverAgent 1.0 03/14/2004
 *
 * Copyright (c) 2004
 */
package org.optimizationservices.oscommon.communicationagent;

import org.optimizationservices.oscommon.communicationinterface.OShL;
import org.optimizationservices.oscommon.util.IOUtil;
import org.optimizationservices.oscommon.util.WSUtil;

;

/**
 *
 * <P>The <code>OSSolverAgent.java</code> class implements all the <code>OShL</code> interface.
 * Thus it is OS-type solver. It implements all the methods as specified in the
 * Optimization Services (OS) Framework, specifically the Optimization Services hook-up
 * Language (OShL).</p>
 *
 * <P>The <code>OSSolverAgent</code> class is a library class that contains methods
 * to help solver agents communicate with Optimization Services (OS) Solvers as specified
 * by the Optimization Services framework. It hides all the SOAP protocol related technical details
 * from an optimization user.</p>
 *
 * </p>
 *
 * @author Robert Fourer, Jun Ma, Kipp Martin
 * @version 1.0, 03/14/2004
 * @see org.optimizationservices.oscommon.communicationinterface.OShL
 * @since OS 1.0
 */
public class OSSolverAgent implements OShL{
	/**
	 * solverAddress holds the address (uri/url) of the Optimization Services (OS) solver.
	 */
	public String solverAddress = "";
	
	/**
	 * Constructor.
	 *
	 */
	public OSSolverAgent(){
		
	}//constructor
	
	/**
	 * Constructor.
	 *
	 * @param solverAddress holds the address (uri/url) of the Optimization Services (OS) solver.
	 */
	public OSSolverAgent(String solverAddress){
		this.solverAddress = solverAddress;
	}//constructor
	
	/**
	 * Solve an optimization problem with options. The problem instance is given by a string following 
	 * the Optimization Services instance Language (OSiL) schema. The options are given in a string following 
	 * the Optimization Services option Language (OSoL) schema. The function returns the solution
	 * in a string that follows the Optimization Services result Language (OSrL) schema.
	 * 
	 * </P>
	 * 
	 * @param osil holds the optimization instance in a string which format follows the 
	 * Optimization Services instance Language (OSiL) schema.  
	 * @param osol holds the optimization option in a string which format follows the 
	 * Optimization Services option Language (OSoL) schema. 
	 * @return osrl, the optimization result in a string which format follows the Optimization
	 * Services result Language (OSrL) schema.  
	 */
	public String solve(String osil, String osol){
		String sMethod = "solve";		
		String[] msInputs = new String[]{osil, (osol==null)?"":osol};
		String[] msInputNames = new String[]{"osil", "osol"};
		String sReturnName = "osrl"; 
		String sSoapAction = "OSSolverService#solve";
		String sOSrL = WSUtil.invokeOptimizationServices(solverAddress, sMethod, msInputs, msInputNames, sReturnName, sSoapAction);
		return sOSrL;
	}//solve

	/**
	 * Get a unique job id from a service, before calling the service to solve a problem. This method call is always
	 * required before an asynchronous send call. It may be or may not be used before a synchronous solve call. 
	 * 
	 * </p>
	 * @param osol holds the optimization option in a string which format follows the 
	 * Optimization Services option Language (OSoL) schema. 
	 * @return jobID, a unique job ID generated by the service. 
	 */
	public String getJobID(String osol){
		String sMethod = "getJobID";
		String[] msInputs = new String[]{(osol==null)?"":osol};
		String[] msInputNames = new String[]{"osol"};
		String sReturnName = "jobID"; 
		String sSoapAction = "OSSolverService#getJobID";
		String sOSrL = WSUtil.invokeOptimizationServices(solverAddress, sMethod, msInputs, msInputNames, sReturnName, sSoapAction);
		return sOSrL;
	}//solve
	
	/**
	 * Send (or asynchronously solve) an optimization problem with options. The problem instance is given by a string following 
	 * the Optimization Services instance Language (OSiL) schema. The options are given in a string following 
	 * the Optimization Services option Language (OSoL) schema. The OSoL option has to contain a job id. 
	 * 
	 * </P>
	 * 
	 * @param osil holds the optimization instance in a string which format follows the 
	 * Optimization Services instance Language (OSiL) schema.  	 
	 * @param osol holds the optimization option in a string which format follows the 
	 * Optimization Services option Language (OSoL) schema. It should contain the jobID information that 
	 * is previous obtained from the optimization service.  
	 * @return success whether the asynchronous communication is successful or not. 
	 */
	public boolean send(String osil, String osol){
		String sMethod = "send";		
		String[] msInputs = new String[]{osil, (osol==null)?"":osol};
		String[] msInputNames = new String[]{"osil", "osol"};
		String sReturnName = "success"; 
		String sSoapAction = "OSSolverService#send";
		String sSuccess = WSUtil.invokeOptimizationServices(solverAddress, sMethod, msInputs, msInputNames, sReturnName, sSoapAction);
		boolean bSuccess = sSuccess.equals("true")?true:false;
		return bSuccess;
	}//send

	/**
	 * Retrieve results from a previously sent/solved optimization job.  
	 * 
	 * @param osol holds the optimization option in a string which format follows the 
	 * Optimization Services option Language (OSoL) schema. It should contain the jobID information that 
	 * is previous obtained from the optimization service.  
	 * @return osrl, the optimization result in a string which format follows the Optimization
	 * Services result Language (OSrL) schema.  If the result cannot be retrieved, it should 
	 * be indicated in the message/status section of OSrL. 
	 */
	public String retrieve(String osol){
		String sMethod = "retrieve";		
		String[] msInputs = new String[]{(osol==null)?"":osol};
		String[] msInputNames = new String[]{"osol"};
		String sReturnName = "osrl"; 
		String sSoapAction = "OSSolverService#retrieve";
		String sOSrL = WSUtil.invokeOptimizationServices(solverAddress, sMethod, msInputs, msInputNames, sReturnName, sSoapAction);
		return sOSrL;
	}//retrieve
	
	/**
	 * Kill a previously sent/solved optimization job.  
	 * 
	 * @param osol holds the optimization option in a string which format follows the 
	 * Optimization Services option Language (OSoL) schema. It should contain the jobID information that 
	 * is previous obtained from the optimization service.   
	 * @return ospl, the ouput kill process information in a string which format follows the OSpL schema.  
	 */
	public String kill(String osol){
		String sMethod = "kill";		
		String[] msInputs = new String[]{(osol==null)?"":osol};
		String[] msInputNames = new String[]{"osol"};
		String sReturnName = "ospl"; 
		String sSoapAction = "OSSolverService#kill";
		String sOSpL = WSUtil.invokeOptimizationServices(solverAddress, sMethod, msInputs, msInputNames, sReturnName, sSoapAction);
		return sOSpL;
	}//kill
	
	/**
	 * This method is called by one optimization service on another optimization service
	 * to provide runtime dynamic process information (push mechanism).
	 *
	 * </P>
	 * @param osplInput holds the input process information a string which format follows the Optimization
	 * Services process Language (OSpL) schema.
	 * @param osol holds the optimization option in a string which format follows the 
	 * Optimization Services option Language (OSoL) schema.    
	 * @return osplOutput, the ouput process information in a string which format follows the OSpL schema.
	 */
	public String knock(String osplInput, String osol){
		String sMethod = "knock";		
		String[] msInputs = new String[]{osplInput, (osol==null)?"":osol};
		String[] msInputNames = new String[]{"osplInput", "osol"};
		String sReturnName = "osplOutput"; 
		String sSoapAction = "OSSolverService#knock";
		String sOSpLOutput = WSUtil.invokeOptimizationServices(solverAddress, sMethod, msInputs, msInputNames, sReturnName, sSoapAction);
		return sOSpLOutput;
	}//knock

	/**
	 * main for test purposes.
	 *
	 * </p>
	 *
	 * @param argv command line arguments.
	 */
	public static void main(String [] args){		
//		//registry
//		OSRegistryAgent osRegistryAgent = new OSRegistryAgent();
//		osRegistryAgent.registryAddress = OSConstant.OS_REGISTRY_SITE;
//		System.out.println("\nregistry address:\n" + osRegistryAgent.registryAddress);
//		
//		//find analyzer
//		String sOSqL = "<OSqL>... analyzer ...</OSqL>";
//		String sOSuL = osRegistryAgent.find(sOSqL, null);
//		System.out.println("\nanalyzer address:\n" + sOSuL);
//		
//		//analyzer
//		String sAnalyzerAddress = sOSuL.substring(6, sOSuL.indexOf("</OSuL>"));
		String sOSiL = IOUtil.fileToString("../../../OSRepository/test/osil/parincLinear.osil"); 
		//String sOSiL = IOUtil.fileToString("../../../OSRepository/test/kmartin/parinc.osil");
		//System.out.println(sOSiL);
		//String sOSiL = IOUtil.fileToString("../../../OSRepository/test/osil/markowitzMod.osil"); //a sophisticated model. 
		//String sOSiL = IOUtil.fileToString("../../../OSRepository/test/osil/osilrosenbrock.osil"); //nonlinear
		//String sOSiL = IOUtil.fileToString("../../../OSRepository/test/osil/lpparinc.osil"); //linear
//		OSAnalyzerAgent osAnalyzerAgent = new OSAnalyzerAgent();
//		osAnalyzerAgent.analyzerAddress = sAnalyzerAddress;
//		String sOSaL = osAnalyzerAgent.solve(sOSiL, null);
//		System.out.println("\nanalyzer result:\n" + sOSaL);
//		
//		//find solver
//		sOSqL = "<OSqL>... " + sOSaL + " ...</OSqL>";
//		sOSuL = osRegistryAgent.find(sOSqL, null);
//		System.out.println("\nsolver address:\n" + sOSuL);
		
		//solver
//		String sSolverAddress = sOSuL.substring(6, sOSuL.indexOf("</OSuL>"));
		String sSolverAddress = "http://localhost:8080/os/OSSolverService.jws";
//		String sSolverAddress = "http://gsbkip.chicagogsb.edu/os/ossolver/LindoSolverService.jws";
		//use TCPMon
		//sSolverAddress = "http://localhost:3838/os/ossolver/LindoSolverService.jws";
		//cd C:\eclipse\workspace\OSCommon\lib
		//java -classpath axis.jar org.apache.axis.utils.tcpmon
		//set listen port to 3838
		//set target hostname to 128.135.211.219
		//set target port to 80
		
		OSSolverAgent osSolverAgent = new OSSolverAgent();
		//sSolverAddress = "http://gsbkip.chicagogsb.edu/os/ossolver/LindoSolverService.jws";
		//sSolverAddress = "http://128.135.211.219:80/os/ossolver/LindoSolverService.jws";
		//sSolverAddress = "http://localhost:8080/os/OSSolverService.jws";
		osSolverAgent.solverAddress = sSolverAddress;
//		System.out.println(osSolverAgent.getJobID(""));
		String sOSrL = osSolverAgent.solve(sOSiL, null);
		System.out.println("\nsolver result:\n" + sOSrL);
		
		//test .net service
//		OSSolverAgent osSolverAgent = new OSSolverAgent();
//		String sSolverAddress = "http://localhost:80/OSSolver/CGSolverService.asmx";
//		osSolverAgent.solverAddress = sSolverAddress;
//		String sOSrL = osSolverAgent.solve("c:\\CGWeb\\CGTest.exe", "");
//		System.out.println("\nsolver result:\n" + sOSrL);
		
	}//main
	
}//class OSSolverAgent
