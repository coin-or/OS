using System;
using System.Xml.Serialization;
using System.Diagnostics;
using System.Web.Services.Protocols;
using System.Web.Services.Description;
using System.ComponentModel;
using System.Web.Services;
using System.Collections;
using System.Data;
using System.Threading;
using System.IO;

using org.optimizationservices.oscommon.util;
using org.optimizationservices.oscommon.communicationinterface;
using org.optimizationservices.oscommon.localinterface;


/// <summary>
/// The <c>CGSchedulerService</c> class is the CG Scheduler Web Service 
/// @author Jun Ma	
/// @version 1.0, 09/01/2005
/// @since OS 1.0
/// @copyright (c) 2005
/// </summary>
[WebService(Namespace="http://www.optimizationservices.org")]	
[System.Web.Services.WebServiceBindingAttribute(Name="OSSolverServiceSoapBinding", Namespace="http://www.optimizationservices.org")]
[SoapDocumentService(SoapBindingUse.Default, SoapParameterStyle.Default, RoutingStyle=SoapServiceRoutingStyle.RequestElement)]
public class CGSchedulerService : System.Web.Services.WebService, OShL {
	/// <summary>
	/// m_osServiceUtil holds a default implementation of the solver/scheduler service.  
	/// </summary>
	private OSServiceUtil m_osServiceUtil =  new OSServiceUtil();

	/// <summary>
	/// m_sServiceName holds the service name. 
	/// </summary>
	private string m_sServiceName = "OSSchedulerService";

	/// <summary>
	/// m_sServiceURI holds the service uri. 
	/// </summary>
	private string m_sServiceURI = OSParameter.OS_SCHEDULER_SITE; 

	/// <summary>
	/// m_Solver holds the default solver. 
	/// </summary>
	private DefaultSolver m_solver = null;

	/// <summary>
	/// default constructor.
	/// </summary>
	public CGSchedulerService(){
		//CODEGEN: This call is required by the ASP.NET Web Services Designer
		InitializeComponent();
		m_osServiceUtil.serviceName = m_sServiceName;
		m_osServiceUtil.serviceURI = m_sServiceURI;
		m_osServiceUtil.serviceType = "scheduler";
		m_osServiceUtil.solver = m_solver;
	}//constructor

	#region Component Designer generated code
	
	//Required by the Web Services Designer 
	private IContainer components = null;
			
	/// <summary>
	/// Required method for Designer support - do not modify
	/// the contents of this method with the code editor.
	/// </summary>
	private void InitializeComponent() {
	}

	/// <summary>
	/// Clean up any resources being used.
	/// </summary>
	protected override void Dispose( bool disposing ) {
		if(disposing && components != null) {
			components.Dispose();
		}
		base.Dispose(disposing);		
	}
	
	#endregion

	/// <summary>
	/// Get a unique job id from a service, before calling the service to solve a problem. This method call is always
	/// required before an asynchronous send call. It may be or may not be used before a synchronous solve call. 
	/// </summary>
	/// <param name="osol">holds the option in a string which format follows OSoL schema.</param>
	/// <returns>jobID, a unique job ID generated by the service.</returns>
	[System.Web.Services.WebMethodAttribute()]
	[System.Web.Services.Protocols.SoapRpcMethodAttribute("OSSolverService#getJobID", 
		 RequestNamespace="http://www.optimizationservices.org", 
		 ResponseNamespace="http://www.optimizationservices.org")]
	[return: System.Xml.Serialization.SoapElementAttribute("jobID")]
	public string getJobID(string osol){
		return m_osServiceUtil.getJobID(osol);
	}//getJobID

	/// <summary>
	/// Call a solver or analyzer service whose input is given by a string following 
	/// the OSiL schema and returns the result in a string that follows 
	/// OSrL schema. 
	/// </summary>
	/// <param name="osil">holds the instance in a string which format follows OSiL schema.</param>
	/// <param name="osol">holds the option in a string which format follows OSoL schema.</param>
	/// <returns>osrl, the result in a string which format follows the OSrL schema.</returns>
	[System.Web.Services.WebMethodAttribute()]
	[System.Web.Services.Protocols.SoapRpcMethodAttribute("OSSolverService#solve", 
		 RequestNamespace="http://www.optimizationservices.org", 
		 ResponseNamespace="http://www.optimizationservices.org")]
	[return: System.Xml.Serialization.SoapElementAttribute("osrl")]		
	public string solve(string osil, string osol){
		return m_osServiceUtil.solve(osil, osol);
	}//solve

	/// <summary>
	/// Send (or asynchronously solve) an instance to a solver, analyzer or scheduler service
	/// whose input is given by a string following the OSiL schema and returns the result 
	/// in a string that follows OSrL schema. 
	/// </summary>
	/// <param name="osil">holds the instance in a string which format follows OSiL schema.</param>
	/// <param name="osol">holds the option in a string which format follows OSoL schema. 
	/// It should contain the jobID information that is previous obtained from the service.</param>
	/// <returns>success, whether the asynchronous communication is successful or not.</returns>
	[System.Web.Services.WebMethodAttribute()]
	[System.Web.Services.Protocols.SoapRpcMethodAttribute("OSSolverService#send", 
		 RequestNamespace="http://www.optimizationservices.org", 
		 ResponseNamespace="http://www.optimizationservices.org")]
	[return: System.Xml.Serialization.SoapElementAttribute("success")]
	public bool send(string osil, string osol){
		return m_osServiceUtil.send(osil, osol);
	}//send

	/// <summary>
	/// Retrieve results from a previously sent/solved optimization job.  		
	/// </summary>
	/// <param name="OSoL">holds the option in a string which format follows OSoL schema
	/// It should contain the jobID information that is previous obtained from the service.</param>
	/// <returns>osrl, the result in a string which format follows the OSrL schema.  
	/// If the result cannot be retrieved, it should be indicated in 
	/// the message/status section of OSrL.</returns>
	[System.Web.Services.WebMethodAttribute()]
	[System.Web.Services.Protocols.SoapRpcMethodAttribute("OSSolverService#retrieve", 
		 RequestNamespace="http://www.optimizationservices.org", 
		 ResponseNamespace="http://www.optimizationservices.org")]
	[return: System.Xml.Serialization.SoapElementAttribute("osrl")]	
	public string retrieve(string osol){
		return m_osServiceUtil.retrieve(osol);
	}//retrieve

	/// <summary>
	/// Kill a previously sent/solved optimization job.  		
	/// </summary>
	/// <param name="osol">holds the option in a string which format follows OSoL schema
	/// It should contain the jobID information that is previous obtained from the service.</param>
	/// <returns>ospl, the kill process status of the kill operation.</returns>
	[System.Web.Services.WebMethodAttribute()]
	[System.Web.Services.Protocols.SoapRpcMethodAttribute("OSSolverService#kill", 
		 RequestNamespace="http://www.optimizationservices.org", 
		 ResponseNamespace="http://www.optimizationservices.org")]
	[return: System.Xml.Serialization.SoapElementAttribute("ospl")]
	public string kill(string osol){
		return m_osServiceUtil.kill(osol);
	}//kill

	/// <summary>
	/// Set (push) and/or get (pull) runtime dynamic process information to and/or from the service.  		
	/// </summary>
	/// <param name="osplInput"> the input process information in a string which format follows OSpL schema.</param>
	/// <param name="osol">holds the option in a string which format follows OSoL schema</param>
	/// <returns>osplOutput, the output process information in a string which format follows the OSpL schema.</returns>
	[System.Web.Services.WebMethodAttribute()]
	[System.Web.Services.Protocols.SoapRpcMethodAttribute("OSSolverService#knock", 
		 RequestNamespace="http://www.optimizationservices.org", 
		 ResponseNamespace="http://www.optimizationservices.org")]
	[return: System.Xml.Serialization.SoapElementAttribute("osplOutput")]
	public string knock(string osplInput, string osol){
		return m_osServiceUtil.knock(osplInput, osol);
	}//knock 

}//class CGSchedulerService





