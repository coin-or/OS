using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Web.Services;

using org.optimizationservices.oscommon.communicationinterface;

namespace org.optimizationservices.oscommon.communicationagent{
	/// <summary>
	/// The <c>OSSolverAgent</c> class implements all the methods in 
	/// <c>OShL</c> interface. Thus it is OS-type solver agent. 
	/// It implements all the methods as specified in the
	/// OS Framework, specifically the OShL Language (OShL).
	/// The <c>OSSolverAgent</c> class is a library class that 
	/// contains methods to help solver agents communicate with 
	/// OS Solvers as specified by the OS framework. It hides all 
	/// the SOAP protocol related technical details from an optimization user.
	/// @author Jun Ma	
	/// @version 1.0, 09/01/2005
	/// @since OS 1.0
	/// @copyright (c) 2005
	/// </summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Web.Services.WebServiceBindingAttribute(
		 Name="OSSolverServiceSoapBinding", 
		 Namespace="http://www.optimizationservices.org")]
	public class OSSolverAgent : System.Web.Services.Protocols.SoapHttpClientProtocol, OShL {
		public string solverAddress{
			get{
				return this.Url;
			}
			set{
				this.Url = value;
			}
		}//solverAddress

		/// <summary>
		/// default constructor
		/// </summary>
		public OSSolverAgent(){
		}//constructor

		/// <summary>
		/// constructor
		/// </summary>
		/// <param name="solverAddress">solverAddress holds the address (uri/url) of the OS solver.</param>
		public OSSolverAgent(string solverAddress){
			this.Url = solverAddress;
		}//constructor

		/*[System.Web.Services.Protocols.SoapDocumentMethodAttribute(
			 "org.optimizationservices.ossolver/getJobID", 
			 RequestNamespace="org.optimizationservices.ossolver", 
			 ResponseNamespace="org.optimizationservices.ossolver", 
			 Use=System.Web.Services.Description.SoapBindingUse.Literal, 
			 ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public string getJobID(string option) {
			object[] results = this.Invoke("getJobID", new object[] {option});
			return ((string)(results[0]));
		}//getJobID*/
		
		/// <summary>
		/// Get a unique job id from a service, before calling the service to solve a problem. This method call is always
		/// required before an asynchronous send call. It may be or may not be used before a synchronous solve call. 
		/// </summary>
		/// <param name="osol">holds the option in a string which format follows OSoL schema</param>
		/// <returns>a unique job ID generated by the service</returns>	
		[System.Web.Services.Protocols.SoapRpcMethodAttribute("OSSolverService#getJobID", 
			 RequestNamespace="http://www.optimizationservices.org", 
			 ResponseNamespace="http://www.optimizationservices.org")]
		[return: System.Xml.Serialization.SoapElementAttribute("jobID")]
		public string getJobID(string osol) {
			object[] results = this.Invoke("getJobID", new object[] {osol});
			return ((string)(results[0]));
		}//getJobID

		/// <summary>
		/// Call a solver or analyzer service whose input is given by a string following 
		/// the OSiL schema and returns the result in a string that follows 
		/// OSrL schema. 
		/// </summary>
		/// <param name="osil">holds the instance in a string which format follows OSiL schema</param>
		/// <param name="osol">holds the option in a string which format follows OSoL schema</param>
		/// <returns>the result in a string which format follows the OSrL schema</returns>
		[System.Web.Services.Protocols.SoapRpcMethodAttribute("OSSolverService#solve", 
			 RequestNamespace="http://www.optimizationservices.org", 
			 ResponseNamespace="http://www.optimizationservices.org")]
		[return: System.Xml.Serialization.SoapElementAttribute("osrl")]
		public string solve(string osil, string osol) {
			this.Timeout = 36000000;
			object[] results = this.Invoke("solve", new object[] {osil, osol});
			return ((string)(results[0]));
		}//solve
        
		/// <remarks/>
		public System.IAsyncResult beginSolve(string osil, string osol, System.AsyncCallback callback, object asyncState) {
			return this.BeginInvoke("solve", new object[] {osil, osol}, callback, asyncState);
		}//beginSolve
        
		/// <remarks/>
		public string endSolve(System.IAsyncResult asyncResult) {
			object[] results = this.EndInvoke(asyncResult);
			return ((string)(results[0]));
		}//endSolve
		
		/// <summary>
		/// Send (or asynchronously solve) an instance to a solver, analyzer or scheduler service
		/// whose input is given by a string following the OSiL schema and returns the result 
		/// in a string that follows OSrL schema. 
		/// </summary>
		/// <param name="osil">holds the instance in a string which format follows OSiL schema</param>
		/// <param name="osol">holds the option in a string which format follows OSoL schema
		/// It should contain the jobID information that is previous obtained from the service.</param>
		/// <returns>whether the asynchronous communication is successful or not</returns>
		[System.Web.Services.Protocols.SoapRpcMethodAttribute("OSSolverService#send", 
			 RequestNamespace="http://www.optimizationservices.org", 
			 ResponseNamespace="http://www.optimizationservices.org")]
		[return: System.Xml.Serialization.SoapElementAttribute("success")]
		public bool send(string osil, string osol) {
			this.Timeout = 36000000;
			object[] results = this.Invoke("send", new object[] {osil, osol});
			return ((bool)(results[0]));
		}//send

		/// <summary>
		/// Retrieve results from a previously sent/solved optimization job.  		
		/// </summary>
		/// <param name="osol">holds the option in a string which format follows OSoL schema
		/// It should contain the jobID information that is previous obtained from the service.</param>
		/// <returns>the result in a string which format follows the OSrL schema.  
		/// If the result cannot be retrieved, it should be indicated in 
		/// the message/status section of OSrL.</returns>
		[System.Web.Services.Protocols.SoapRpcMethodAttribute("OSSolverService#retrieve", 
			 RequestNamespace="http://www.optimizationservices.org", 
			 ResponseNamespace="http://www.optimizationservices.org")]
		[return: System.Xml.Serialization.SoapElementAttribute("osrl")]
		public string retrieve(string osol) {
			this.Timeout = 36000000;
			object[] results = this.Invoke("retrieve", new object[] {osol});
			return ((string)(results[0]));
		}//retrieve

		/// <summary>
		/// Kill a previously sent/solved optimization job.  		
		/// </summary>
		/// <param name="osol">holds the option in a string which format follows OSoL schema
		/// It should contain the jobID information that is previous obtained from the service.</param>
		/// <returns>the kill process status of the kill operation</returns>
		[System.Web.Services.Protocols.SoapRpcMethodAttribute("OSSolverService#kill", 
			 RequestNamespace="http://www.optimizationservices.org", 
			 ResponseNamespace="http://www.optimizationservices.org")]
		[return: System.Xml.Serialization.SoapElementAttribute("ospl")]
		public string kill(string osol) {
			this.Timeout = 36000000;
			object[] results = this.Invoke("kill", new object[] {osol});
			return ((string)(results[0]));
		}//kill

		/// <summary>
		/// Set (push) and/or get (pull) runtime dynamic process information to and/or from the service.  		
		/// </summary>
		/// <param name="osplInput"> the input process information in a string which format follows OSpL schema.</param>
		/// <param name="osol">holds the option in a string which format follows OSoL schema</param>
		/// <returns>the output process information in a string which format follows the OSpL schema.</returns>
		[System.Web.Services.Protocols.SoapRpcMethodAttribute("OSSolverService#knock", 
			 RequestNamespace="http://www.optimizationservices.org", 
			 ResponseNamespace="http://www.optimizationservices.org")]
		[return: System.Xml.Serialization.SoapElementAttribute("osplOutput")]
		public string knock(string osplInput, string osol) {
			this.Timeout = 36000000;
			object[] results = this.Invoke("knock", new object[] {osplInput, osol});
			return ((string)(results[0]));
		}//knock

	}//class OSSolverAgent
}//namespace
