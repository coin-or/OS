using System;

namespace org.optimizationservices.oscommon.communicationinterface{
	/// <summary>
	/// The <c>OShL</c> interface declares all the methods as specified in the 
	/// OShL WSDL. The specified methods are called by an OS agent to invoke 
	/// any OS-based solver, analyzer or scheduler service. 
	/// Any solver or analyzer service that wants to become an OS-type callable on the 
	/// distributed system must implement this interface.  																* </p>
	/// @author Jun Ma	
	/// @version 1.0, 09/01/2005
	/// @since OS 1.0
	/// @copyright (c) 2005
	/// </summary>
	public interface OShL{
		/// <summary>
		/// Get a unique job id from a service, before calling the service to solve a problem. This method call is always
		/// required before an asynchronous send call. It may be or may not be used before a synchronous solve call. 
		/// </summary>
		/// <param name="osol">holds the option in a string which format follows OSoL schema</param>
		/// <returns>a unique job ID generated by the service</returns>
		string getJobID(string osol);
		
		/// <summary>
		/// Call a solver or analyzer service whose input is given by a string following 
		/// the OSiL schema and returns the result in a string that follows 
		/// OSrL schema. 
		/// </summary>
		/// <param name="osil">holds the instance in a string which format follows OSiL schema</param>
		/// <param name="osol">holds the option in a string which format follows OSoL schema</param>
		/// <returns>the result in a string which format follows the OSrL schema</returns>
		string solve(string osil, string osol);


		/// <summary>
		/// Send (or asynchronously solve) an instance to a solver, analyzer or scheduler service
		/// whose input is given by a string following the OSiL schema and returns the result 
		/// in a string that follows OSrL schema. 
		/// </summary>
		/// <param name="osil">holds the instance in a string which format follows OSiL schema</param>
		/// <param name="osol">holds the option in a string which format follows OSoL schema
		/// It should contain the jobID information that is previous obtained from the service.</param>
		/// <returns>whether the asynchronous communication is successful or not</returns>
		bool send(string osil, string osol);

		/// <summary>
		/// Retrieve results from a previously sent/solved optimization job.  		
		/// </summary>
		/// <param name="osol">holds the option in a string which format follows OSoL schema
		/// It should contain the jobID information that is previous obtained from the service.</param>
		/// <returns>the result in a string which format follows the OSrL schema.  
		/// If the result cannot be retrieved, it should be indicated in 
		/// the message/status section of OSrL.</returns>
		string retrieve(string osol);

		/// <summary>
		/// Kill a previously sent/solved optimization job.  		
		/// </summary>
		/// <param name="osol">holds the option in a string which format follows OSoL schema
		/// It should contain the jobID information that is previous obtained from the service.</param>
		/// <returns>the kill process status of the kill operation</returns>
		string kill(string osol);

		/// <summary>
		/// Set (push) and/or get (pull) runtime dynamic process information to and/or from the service.  		
		/// </summary>
		/// <param name="osplInput"> the input process information in a string which format follows OSpL schema.</param>
		/// <param name="osol">holds the option in a string which format follows OSoL schema</param>
		/// <returns>osplOutput, the ouput process information in a string which format follows the OSpL schema.</returns>
		string knock(string osplInput, string osol);

	}//interface OShL
}//namespace
