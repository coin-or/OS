#line 2 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.cpp"

#line 4 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osillex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osilrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osillex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osilrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osilrestart (FILE *input_file ,yyscan_t yyscanner );
void osil_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osil_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osil_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osilpop_buffer_state (yyscan_t yyscanner );

static void osilensure_buffer_stack (yyscan_t yyscanner );
static void osil_load_buffer_state (yyscan_t yyscanner );
static void osil_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osil_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osil_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osilalloc (yy_size_t ,yyscan_t yyscanner );
void *osilrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osilfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osil_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osilwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 116
#define YY_END_OF_BUFFER 117
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[778] =
    {   0,
        0,    0,  113,  113,  114,  114,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  117,  115,    1,    1,
        1,    2,  115,    5,  115,    4,  115,    3,  115,  113,
      116,  114,  106,  107,  106,  110,  111,  110,    0,    0,
        0,    3,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    5,    4,    0,    5,    0,    6,    0,    0,  109,
       79,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  113,  114,    0,
      112,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    5,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       81,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   37,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    5,  108,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  105,    0,   80,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   99,    0,    0,    0,    0,   65,
        0,    0,   51,    0,    0,    0,    0,    0,  101,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       97,    0,    0,    0,    0,   23,   24,    0,   13,    0,
        0,    0,    0,    0,    0,    0,    0,   80,    0,   82,
        0,    0,    0,    0,    0,    0,    0,   66,    0,    0,
        0,   52,    0,    0,    0,    0,   38,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   63,    0,    0,    0,   59,    0,
        0,   61,   65,    0,   51,    0,   67,    0,   69,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       57,    0,    0,    0,    0,   71,    0,    0,    0,   16,

        0,    0,   13,    0,    0,    0,   18,    0,    0,    0,
        0,    0,    0,    0,   82,    0,   64,    0,    0,  100,
        0,    0,   60,    0,    0,   62,   66,    0,    0,   52,
        0,   68,    0,   70,    0,    0,   38,    0,    0,    0,
      102,    0,    0,    0,    0,    0,    0,    0,    0,   58,
        0,    0,    0,    0,   72,    0,    0,   98,    0,   63,
        0,    0,   59,    0,   61,    0,   67,   69,    0,    0,
        0,    0,    0,    0,   43,    0,    0,   33,    0,   57,
        0,   53,    0,   89,   71,    0,    0,    0,   16,    0,
        0,    0,    0,   18,    0,   27,   28,    0,    0,   22,

        0,    0,   25,   26,    0,   17,   64,    0,  100,    0,
       60,    0,   62,    0,    0,   68,   70,    0,    0,    0,
        0,  102,    0,    0,   29,    0,   44,    0,    0,    0,
        0,   58,    0,   54,    0,    0,   72,    0,    0,   98,
        0,    0,    0,    0,    0,    0,   45,    0,    0,   77,
        0,   43,    0,   49,    0,    0,   53,    0,   87,    0,
        0,   39,    0,    0,   20,    0,    0,   14,    0,   15,
        0,   22,    0,   17,    0,    0,    0,    0,    0,    0,
       46,    0,    0,    0,    0,   29,   44,    0,   50,    0,
        0,   34,    0,   54,    0,    0,   90,    0,    0,    0,

       40,    0,    0,    0,    0,   41,    0,   45,    0,   47,
        0,    0,   49,    0,    0,    0,   55,    0,   39,    0,
       20,    0,   21,   14,   15,    0,    0,    0,    0,    0,
       42,    0,    0,   46,    0,   48,    0,    0,   78,    0,
       50,    0,   34,    0,    0,   56,   90,    0,   88,    0,
       40,    0,    0,   73,    0,   41,  103,   47,    0,    0,
        0,   75,    0,   55,    0,   83,   21,    0,    0,    0,
        0,    0,    0,    0,   19,    0,   74,    0,   42,    0,
        0,   48,    0,   78,    0,    0,   76,    0,   56,   88,
        0,    0,   73,    0,    0,    0,   75,    0,    0,   91,

        0,    0,    0,    0,    0,    0,   19,   74,    0,    0,
        0,  104,    0,    0,   76,    0,    0,    0,   84,    0,
        0,    0,   95,    0,   85,    0,    0,    0,    0,    0,
        0,    0,    0,  104,    0,    0,    0,    0,   84,    0,
       92,   93,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   96,    0,    0,   86,   92,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   94,    0,
        0,   96,    0,   86,    0,    0,    0,    0,    0,    0,
        0,    0,   94,    0,   30,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    9,    0,   30,    0,    0,    0,

        0,    0,    0,    0,    0,    9,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   10,    0,    0,    0,    0,
        0,    0,    0,   12,    0,   10,    0,    0,    0,    0,
        0,   11,    0,   12,    0,    0,    0,   35,    0,   11,
        0,    0,    0,    0,   31,    0,    0,    0,   36,    0,
        0,    0,    8,   36,    0,   32,    0,    8,   32,    0,
        0,    0,    0,    0,    7,    7,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    1,    1,    1,    7,    1,
        1,    1,    8,    1,    9,   10,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    1,    1,   13,
       14,   15,   16,    1,    1,    1,   17,   18,   19,   20,
        1,    1,   21,    1,    1,    1,    1,   22,   23,   24,
       25,    1,   26,   27,    1,   28,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   29,   30,   31,   32,

       33,   34,   35,   36,   37,   38,    1,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,    1,   54,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[55] =
    {   0,
        1,    1,    1,    1,    1,    2,    3,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[786] =
    {   0,
        0,   53, 1670, 1669, 1667, 1666,    0,    0,    0,    0,
        0,    0,    5,   13,    2,   14, 1672, 1677,  106,    0,
        0, 1677,   13,    7, 1656,   17,  151, 1677, 1648,    0,
     1677,    0, 1677, 1677, 1660, 1677, 1677, 1653,    0, 1652,
       15, 1677, 1624, 1624, 1622, 1631, 1614,    3, 1614, 1608,
     1630,   16,   34, 1636,   57,   29, 1677, 1648,  182, 1677,
     1677, 1635,    3, 1613, 1617, 1602,   11, 1611,   10,   38,
     1621,   33,   31,   44, 1613, 1620, 1628,    0,    0, 1632,
     1677, 1613, 1613, 1599,   80, 1604, 1602, 1601, 1611, 1596,
     1599, 1625, 1624, 1626,   96, 1613,   31, 1591, 1595, 1580,

       55, 1589,   56,   64,   72,   81,   68,   85, 1592, 1599,
     1677, 1581, 1587,    2, 1576, 1581,  146, 1576,  156, 1571,
     1580, 1585, 1677, 1578, 1578, 1579, 1568, 1565, 1572, 1580,
     1583, 1570,   56, 1581, 1569, 1568, 1562, 1677, 1677, 1572,
     1584, 1567,  111,  162,  230, 1556, 1569, 1571, 1555, 1566,
     1550, 1677,  170,  132,  174, 1551, 1557,   99, 1546, 1551,
      201,   81,  205, 1542, 1551, 1556,  233, 1549, 1549, 1550,
     1550, 1538, 1535, 1542, 1550, 1553, 1540,   93, 1551, 1539,
     1538, 1532,  236, 1558, 1529,  239, 1537,  243,  257,  260,
     1540,  263,  266,  271,  277, 1543, 1532, 1540, 1536, 1522,

     1534, 1534, 1520, 1532,  280, 1516, 1533, 1526,  285, 1527,
     1522,  294, 1526, 1504,  299, 1677, 1677,  307,  310, 1515,
     1505,  313,  316, 1521, 1506,  320, 1519,  329,  333,  336,
      339, 1533,  342,  347, 1513,  356,  361,  364, 1502, 1515,
      370,  375,  378,  387, 1518,  392,  395, 1507, 1515,  401,
     1505, 1497, 1509, 1509, 1495, 1507,  406, 1491, 1508, 1501,
      409, 1502,  415,  423,  429, 1497, 1486,  438,  441, 1500,
      444,  447,  452, 1486,  458,  461,  464,  467,  470, 1484,
     1482, 1491, 1494, 1495,  475, 1480, 1476, 1483, 1477,  481,
      484,  489, 1476, 1487,  495,  498,  133, 1490,  503,  509,

     1467, 1475,  512, 1483, 1473,  516,  519,  522,  525, 1469,
      531,  535,  540,  551,  554,  557,  560, 1476,  564,  567,
     1465,  571,  574, 1479,  578,  581,  585, 1481, 1464,  588,
      592,  595,  598,  601, 1462, 1460,  606, 1469, 1469,  612,
      615, 1450,  618,  621, 1435, 1417, 1411, 1405,  626,  635,
      640, 1389, 1399,  643,  646,  181,  649,  657, 1376,  663,
     1370, 1344,  666, 1355,  669, 1337,  672,  675,  678, 1352,
     1326, 1321, 1294,  681,  684,  687, 1309, 1677, 1306,  695,
      701,  704, 1285, 1271,  707, 1270,  710, 1281,  715,  718,
     1268,  724,  727,  731,  740, 1677, 1677, 1272,  746,  749,

     1262,  752, 1677, 1677,  759,  762,  765, 1255,  768, 1243,
      772, 1253,  775, 1231, 1222,  778,  781,  784, 1236, 1223,
     1218,  787, 1208,  790,  793,  798,  804,  807, 1207,  812,
     1155,  815,  821,  826, 1134,  829,  835, 1124,  838,  843,
     1128, 1110, 1114,  846, 1109,  852,  855,  861, 1091, 1677,
     1086,  866,  869,  875, 1071, 1057,  878,  883, 1677, 1063,
      886,  889, 1062,  892,  900,  905,  908,  911,  914,  921,
     1053,  927, 1034,  930, 1048, 1050,  933, 1026, 1023,  936,
      939,  942, 1018,  950, 1006,  956,  959,  964,  967,  982,
      970,  973,  977,  978,  984,  987,  990,  993,  983, 1001,

     1007,  976, 1010,  970, 1015, 1018,  967, 1024, 1029, 1032,
      972,  951, 1035, 1038,  961, 1043, 1046,  955, 1052,  950,
     1057, 1060, 1063, 1066, 1069, 1058, 1074, 1087,  941, 1090,
     1093,  931,  917, 1096, 1104, 1107,  926, 1110, 1113,  901,
     1118, 1124, 1127,  912, 1130, 1133, 1138, 1144, 1147,  918,
     1150,  894, 1153, 1158,  885, 1161, 1677, 1167,  876,  887,
     1170, 1173,  874, 1176,  863,  853, 1179,  855,  841,  844,
      818,  815,  831, 1184, 1187, 1190, 1193,  811, 1197,  833,
     1200, 1204,  798, 1207,  802, 1210, 1214,  803, 1217, 1220,
      789, 1224, 1227,  774,  801,  766, 1230,  787,  762, 1677,

      757,  716,  707,  711,  710,  692, 1233, 1238,  689,  695,
     1241, 1244,  704,  669, 1247,  684,  659, 1250, 1255, 1258,
      649,  643, 1677,  650, 1677,  617,  623,  624,  624,  619,
      603,  589,  587, 1264,  581, 1272,  589, 1275, 1278, 1281,
     1289, 1677,  583,  579,  564,  569,  520,  505,  515,  512,
     1295,  511,  466, 1298, 1301,  475, 1304, 1312, 1318,  458,
      461,  449,  448,  434,  451,  429,  428, 1321, 1324, 1327,
      412, 1330,  405, 1335,  404,  402,  400,  395,  386,  375,
     1341,  381, 1344, 1347, 1350,  382,  380,  360,  364,  363,
      363,  338,  349, 1354, 1357,  351, 1361,  337,  338,  324,

      338,  320,  311,  322,  322, 1367,  306,  301,  298,  291,
      289,  260,  285,  253,  267, 1370,  256,  254,  248,  252,
      231,  225, 1373,  238, 1376, 1379,  214,  222,  211,  209,
     1389,  206, 1392, 1395,  185, 1398,  177,  176,  166,  163,
     1405, 1408,  157, 1411,  156,  141,  139, 1677,  135, 1414,
      130,  111, 1418,  108, 1677,   98, 1421, 1424, 1427, 1434,
       84, 1438, 1441, 1444, 1451, 1454,   87, 1457, 1460,   63,
       46,   27, 1465, 1468, 1471, 1474, 1677, 1482, 1485, 1488,
     1491, 1494, 1497, 1500, 1503
    } ;

static yyconst flex_int16_t yy_def[786] =
    {   0,
      778,  778,  779,  779,  780,  780,  781,  781,  781,  781,
      781,  781,  782,  782,  783,  783,  777,  777,  777,   19,
       19,  777,  777,  777,  777,  777,  777,  777,  777,  784,
      777,  785,  777,  777,  777,  777,  777,  777,   19,  777,
       27,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  784,  785,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,    0,  777,  777,  777,
      777,  777,  777,  777,  777
    } ;

static yyconst flex_int16_t yy_nxt[1732] =
    {   0,
      777,   19,   20,   21,   37,   22,   22,   34,   23,   24,
       25,   26,   27,   35,   28,   34,   37,   38,   55,  777,
       29,   35,   52,  777,   53,   56,   52,   55,   53,   38,
      777,   87,  112,   54,   56,   56,   92,   92,  120,   56,
       93,  113,  185,   52,  117,   53,  121,  186,   56,   56,
       88,  118,   56,   22,   19,   20,   21,  130,   22,   22,
      156,   23,   24,   25,   26,   27,   56,   28,   55,  157,
      122,  127,  773,   29,  128,   56,  123,  129,  131,  124,
      132,  143,  143,  143,  164,  125,  772,  133,  161,   56,
      134,  135,  165,  144,  175,  162,  166,  153,  153,  153,

      206,  170,  167,  207,  771,  168,   22,   39,   39,   39,
      154,  169,  143,  143,  143,  176,   40,  171,   41,  172,
       42,  177,  173,  770,  144,  174,  239,  240,  178,  767,
      145,  179,  180,  228,  228,  228,   43,  258,   44,  233,
      259,   45,   46,  761,  234,   47,   48,  189,  189,  189,
      386,   49,   50,  760,   51,   58,  757,  192,  192,  192,
      190,   59,  756,  215,  215,  215,   60,  216,  217,   61,
      193,  153,  153,  153,   62,  229,  229,  229,  387,   63,
      755,   64,   65,   66,  154,  754,  753,   67,  230,   68,
       69,   70,   71,   72,   73,  752,   74,   75,  438,   76,

       95,  751,  237,  237,  237,   96,  241,  241,  241,  749,
       97,  748,   98,   99,  100,  238,  747,  746,  101,  242,
      102,  103,  104,  105,  106,  107,  439,  108,  109,  745,
      110,  218,  218,  218,  246,  246,  246,  264,  264,  264,
      268,  268,  268,  219,  271,  271,  271,  247,  743,  740,
      265,  739,  220,  269,  738,  737,  221,  272,  189,  189,
      189,  273,  273,  273,  192,  192,  192,  275,  275,  275,
      735,  190,  276,  276,  276,  732,  731,  193,  278,  278,
      278,  290,  290,  290,  730,  277,  295,  295,  295,  729,
      728,  279,  727,  724,  291,  299,  299,  299,  723,  296,

      215,  215,  215,  722,  216,  217,  721,  300,  218,  218,
      218,  303,  303,  303,  306,  306,  306,  308,  308,  308,
      219,  312,  312,  312,  280,  720,  307,  719,  718,  309,
      228,  228,  228,  313,  229,  229,  229,  315,  315,  315,
      316,  316,  316,  319,  319,  319,  717,  230,  322,  322,
      322,  716,  715,  317,  714,  713,  320,  325,  325,  325,
      712,  323,  237,  237,  237,  327,  327,  327,  711,  710,
      326,  241,  241,  241,  709,  238,  330,  330,  330,  331,
      331,  331,  708,  707,  242,  705,  704,  321,  333,  333,
      333,  703,  332,  246,  246,  246,  337,  337,  337,  702,

      701,  334,  340,  340,  340,  700,  247,  349,  349,  349,
      354,  354,  354,  699,  698,  341,  357,  357,  357,  696,
      350,  693,  692,  355,  264,  264,  264,  691,  690,  358,
      360,  360,  360,  342,  335,  689,  688,  265,  687,  268,
      268,  268,  363,  363,  363,  271,  271,  271,  365,  365,
      365,  359,  269,  273,  273,  273,  686,  682,  272,  275,
      275,  275,  276,  276,  276,  367,  367,  367,  278,  278,
      278,  368,  368,  368,  681,  277,  374,  374,  374,  680,
      679,  279,  290,  290,  290,  380,  380,  380,  678,  375,
      381,  381,  381,  677,  676,  291,  295,  295,  295,  385,

      385,  385,  675,  382,  299,  299,  299,  673,  671,  296,
      389,  389,  389,  303,  303,  303,  300,  306,  306,  306,
      394,  394,  394,  308,  308,  308,  395,  395,  395,  307,
      396,  397,  399,  399,  399,  309,  312,  312,  312,  670,
      667,  402,  402,  402,  400,  403,  404,  666,  313,  665,
      664,  401,  405,  405,  405,  315,  315,  315,  316,  316,
      316,  407,  407,  407,  406,  319,  319,  319,  409,  409,
      409,  317,  322,  322,  322,  411,  411,  411,  320,  325,
      325,  325,  413,  413,  413,  323,  327,  327,  327,  330,
      330,  330,  326,  331,  331,  331,  416,  416,  416,  333,

      333,  333,  417,  417,  417,  663,  332,  337,  337,  337,
      662,  661,  334,  340,  340,  340,  422,  422,  422,  424,
      424,  424,  426,  426,  426,  660,  341,  349,  349,  349,
      656,  653,  425,  652,  651,  427,  432,  432,  432,  650,
      350,  433,  433,  433,  354,  354,  354,  437,  437,  437,
      357,  357,  357,  649,  434,  648,  647,  355,  440,  440,
      440,  646,  645,  358,  360,  360,  360,  363,  363,  363,
      365,  365,  365,  367,  367,  367,  368,  368,  368,  446,
      446,  446,  374,  374,  374,  452,  452,  452,  453,  453,
      453,  644,  447,  643,  642,  375,  380,  380,  380,  638,

      637,  454,  381,  381,  381,  457,  457,  457,  385,  385,
      385,  461,  461,  461,  636,  382,  389,  389,  389,  464,
      464,  464,  635,  633,  462,  467,  467,  467,  469,  469,
      469,  465,  394,  394,  394,  632,  631,  468,  630,  629,
      470,  395,  395,  395,  628,  396,  397,  399,  399,  399,
      472,  472,  472,  402,  402,  402,  627,  403,  404,  400,
      405,  405,  405,  474,  474,  474,  407,  407,  407,  409,
      409,  409,  406,  411,  411,  411,  413,  413,  413,  416,
      416,  416,  417,  417,  417,  480,  480,  480,  422,  422,
      422,  424,  424,  424,  486,  486,  486,  626,  481,  426,

      426,  426,  625,  624,  425,  487,  487,  487,  488,  488,
      488,  623,  427,  491,  491,  491,  432,  432,  432,  622,
      621,  489,  433,  433,  433,  617,  492,  494,  494,  494,
      496,  496,  496,  616,  614,  434,  437,  437,  437,  500,
      500,  500,  613,  497,  440,  440,  440,  505,  505,  505,
      610,  609,  501,  446,  446,  446,  508,  508,  508,  606,
      506,  605,  509,  509,  509,  604,  447,  452,  452,  452,
      453,  453,  453,  603,  498,  510,  513,  513,  513,  457,
      457,  457,  602,  454,  516,  516,  516,  461,  461,  461,
      519,  519,  519,  464,  464,  464,  601,  517,  600,  599,

      462,  521,  521,  521,  598,  465,  522,  522,  522,  467,
      467,  467,  524,  524,  524,  469,  469,  469,  523,  596,
      595,  468,  525,  525,  525,  594,  592,  470,  472,  472,
      472,  474,  474,  474,  530,  530,  530,  480,  480,  480,
      534,  534,  534,  535,  535,  535,  591,  531,  588,  585,
      481,  538,  538,  538,  583,  581,  536,  486,  486,  486,
      487,  487,  487,  580,  539,  488,  488,  488,  541,  541,
      541,  491,  491,  491,  543,  543,  543,  578,  489,  494,
      494,  494,  566,  565,  492,  545,  545,  545,  496,  496,
      496,  547,  547,  547,  548,  548,  548,  563,  546,  560,

      559,  497,  500,  500,  500,  557,  555,  549,  551,  551,
      551,  553,  553,  553,  552,  501,  505,  505,  505,  556,
      556,  556,  550,  544,  554,  508,  508,  508,  542,  506,
      509,  509,  509,  558,  558,  558,  513,  513,  513,  561,
      561,  561,  540,  510,  516,  516,  516,  564,  564,  564,
      537,  533,  562,  519,  519,  519,  532,  517,  521,  521,
      521,  522,  522,  522,  567,  567,  567,  524,  524,  524,
      525,  525,  525,  523,  568,  574,  574,  574,  529,  569,
      570,  528,  571,  572,  527,  573,  526,  575,  576,  576,
      576,  530,  530,  530,  579,  579,  579,  534,  534,  534,

      520,  577,  518,  515,  531,  535,  535,  535,  582,  582,
      582,  538,  538,  538,  584,  584,  584,  514,  536,  541,
      541,  541,  512,  511,  539,  586,  586,  586,  543,  543,
      543,  545,  545,  545,  589,  589,  589,  507,  587,  547,
      547,  547,  504,  503,  546,  548,  548,  548,  590,  590,
      590,  551,  551,  551,  553,  553,  553,  502,  549,  593,
      593,  593,  556,  556,  556,  499,  495,  554,  558,  558,
      558,  561,  561,  561,  597,  597,  597,  564,  564,  564,
      567,  567,  567,  493,  562,  574,  574,  574,  607,  607,
      607,  576,  576,  576,  608,  608,  608,  575,  579,  579,

      579,  611,  611,  611,  577,  582,  582,  582,  584,  584,
      584,  586,  586,  586,  612,  615,  615,  615,  589,  589,
      589,  590,  590,  590,  587,  618,  618,  618,  593,  593,
      593,  597,  597,  597,  607,  607,  607,  490,  619,  608,
      608,  608,  611,  611,  611,  634,  634,  634,  615,  615,
      615,  618,  618,  618,  485,  612,  639,  639,  639,  640,
      640,  640,  484,  483,  619,  634,  634,  634,  482,  620,
      479,  478,  641,  654,  654,  654,  657,  657,  657,  639,
      639,  639,  640,  640,  640,  477,  655,  476,  475,  658,
      659,  659,  659,  473,  471,  641,  668,  668,  668,  654,

      654,  654,  672,  672,  672,  657,  657,  657,  466,  669,
      463,  460,  655,  674,  674,  674,  459,  458,  658,  659,
      659,  659,  668,  668,  668,  683,  683,  683,  684,  684,
      684,  672,  672,  672,  456,  669,  674,  674,  674,  455,
      451,  685,  694,  694,  694,  683,  683,  683,  684,  684,
      684,  697,  697,  697,  695,  694,  694,  694,  706,  706,
      706,  685,  697,  697,  697,  450,  449,  695,  706,  706,
      706,  725,  725,  725,  733,  733,  733,  725,  725,  725,
      736,  736,  736,  726,  448,  445,  734,  444,  443,  726,
      741,  741,  741,  733,  733,  733,  744,  744,  744,  736,

      736,  736,  742,  442,  441,  734,  741,  741,  741,  750,
      750,  750,  744,  744,  744,  750,  750,  750,  742,  758,
      758,  758,  762,  762,  762,  758,  758,  758,  764,  764,
      764,  436,  759,  435,  763,  765,  765,  765,  759,  762,
      762,  762,  768,  768,  768,  764,  764,  764,  766,  431,
      430,  763,  765,  765,  765,  769,  769,  769,  768,  768,
      768,  769,  769,  769,  429,  766,  774,  774,  774,  774,
      774,  774,  776,  776,  776,  776,  776,  776,  775,  428,
      423,  775,   18,   18,   18,   30,   30,   30,   32,   32,
       32,   31,   31,   31,   33,   33,   33,   36,   36,   36,

       78,  421,   78,   79,   79,  420,  419,  418,  415,  414,
      412,  410,  408,  398,  393,  392,  391,  390,  388,  384,
      383,  379,  378,  377,  376,  373,  372,  371,  370,  369,
      366,  364,  362,  361,  356,  353,  352,  351,  348,  347,
      346,  345,  344,  343,  339,  338,  336,  329,  328,  324,
      318,  314,  311,  310,  305,  304,  302,  301,  298,  297,
      294,  293,  292,  289,  288,  287,  286,  285,  284,  283,
      282,  281,  274,  270,  267,  266,  263,  262,  261,  260,
      257,  256,  255,  254,  253,  252,  251,  250,  249,  248,
      245,  244,  243,  236,  235,  232,  231,  227,  226,  225,

      224,  223,  222,  214,  213,  212,  211,  210,  209,  208,
      205,  204,  203,  202,  201,  200,  199,  198,  197,  196,
      195,  194,  191,  188,  187,  184,  183,  182,  181,  163,
      160,  159,  158,  155,  152,   93,   93,  151,  150,  149,
      148,  147,  146,  142,  141,  140,  139,  138,  137,  136,
      126,  119,  116,  115,  114,  111,   94,   77,   91,   90,
       89,   86,   85,   84,   83,   82,   57,   81,   80,   77,
       57,  777,   31,   31,   31,   31,   17,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777
    } ;

static yyconst flex_int16_t yy_chk[1732] =
    {   0,
        0,    1,    1,    1,   15,    1,    1,   13,    1,    1,
        1,    1,    1,   13,    1,   14,   16,   15,   24,   41,
        1,   14,   23,    0,   23,   24,   26,   52,   26,   16,
       41,   48,   63,   23,   52,   26,   56,   56,   69,   24,
       56,   63,  114,   53,   67,   53,   69,  114,   52,   26,
       48,   67,   53,    1,    2,    2,    2,   73,    2,    2,
       97,    2,    2,    2,    2,    2,   53,    2,   55,   97,
       70,   72,  772,    2,   72,   55,   70,   72,   73,   70,
       74,   85,   85,   85,  103,   70,  771,   74,  101,   55,
       74,   74,  103,   85,  107,  101,  104,   95,   95,   95,

      133,  105,  104,  133,  770,  104,    2,   19,   19,   19,
       95,  104,  143,  143,  143,  107,   19,  105,   19,  106,
       19,  108,  106,  767,  143,  106,  162,  162,  108,  761,
       85,  108,  108,  154,  154,  154,   19,  178,   19,  158,
      178,   19,   19,  756,  158,   19,   19,  117,  117,  117,
      297,   19,   19,  754,   19,   27,  752,  119,  119,  119,
      117,   27,  751,  144,  144,  144,   27,  144,  144,   27,
      119,  153,  153,  153,   27,  155,  155,  155,  297,   27,
      749,   27,   27,   27,  153,  747,  746,   27,  155,   27,
       27,   27,   27,   27,   27,  745,   27,   27,  356,   27,

       59,  743,  161,  161,  161,   59,  163,  163,  163,  740,
       59,  739,   59,   59,   59,  161,  738,  737,   59,  163,
       59,   59,   59,   59,   59,   59,  356,   59,   59,  735,
       59,  145,  145,  145,  167,  167,  167,  183,  183,  183,
      186,  186,  186,  145,  188,  188,  188,  167,  732,  730,
      183,  729,  145,  186,  728,  727,  145,  188,  189,  189,
      189,  190,  190,  190,  192,  192,  192,  193,  193,  193,
      724,  189,  194,  194,  194,  722,  721,  192,  195,  195,
      195,  205,  205,  205,  720,  194,  209,  209,  209,  719,
      718,  195,  717,  715,  205,  212,  212,  212,  714,  209,

      215,  215,  215,  713,  215,  215,  712,  212,  218,  218,
      218,  219,  219,  219,  222,  222,  222,  223,  223,  223,
      218,  226,  226,  226,  195,  711,  222,  710,  709,  223,
      228,  228,  228,  226,  229,  229,  229,  230,  230,  230,
      231,  231,  231,  233,  233,  233,  708,  229,  234,  234,
      234,  707,  705,  231,  704,  703,  233,  236,  236,  236,
      702,  234,  237,  237,  237,  238,  238,  238,  701,  700,
      236,  241,  241,  241,  699,  237,  242,  242,  242,  243,
      243,  243,  698,  696,  241,  693,  692,  233,  244,  244,
      244,  691,  243,  246,  246,  246,  247,  247,  247,  690,

      689,  244,  250,  250,  250,  688,  246,  257,  257,  257,
      261,  261,  261,  687,  686,  250,  263,  263,  263,  682,
      257,  680,  679,  261,  264,  264,  264,  678,  677,  263,
      265,  265,  265,  250,  244,  676,  675,  264,  673,  268,
      268,  268,  269,  269,  269,  271,  271,  271,  272,  272,
      272,  263,  268,  273,  273,  273,  671,  667,  271,  275,
      275,  275,  276,  276,  276,  277,  277,  277,  278,  278,
      278,  279,  279,  279,  666,  276,  285,  285,  285,  665,
      664,  278,  290,  290,  290,  291,  291,  291,  663,  285,
      292,  292,  292,  662,  661,  290,  295,  295,  295,  296,

      296,  296,  660,  292,  299,  299,  299,  656,  653,  295,
      300,  300,  300,  303,  303,  303,  299,  306,  306,  306,
      307,  307,  307,  308,  308,  308,  309,  309,  309,  306,
      309,  309,  311,  311,  311,  308,  312,  312,  312,  652,
      650,  313,  313,  313,  311,  313,  313,  649,  312,  648,
      647,  311,  314,  314,  314,  315,  315,  315,  316,  316,
      316,  317,  317,  317,  314,  319,  319,  319,  320,  320,
      320,  316,  322,  322,  322,  323,  323,  323,  319,  325,
      325,  325,  326,  326,  326,  322,  327,  327,  327,  330,
      330,  330,  325,  331,  331,  331,  332,  332,  332,  333,

      333,  333,  334,  334,  334,  646,  331,  337,  337,  337,
      645,  644,  333,  340,  340,  340,  341,  341,  341,  343,
      343,  343,  344,  344,  344,  643,  340,  349,  349,  349,
      637,  635,  343,  633,  632,  344,  350,  350,  350,  631,
      349,  351,  351,  351,  354,  354,  354,  355,  355,  355,
      357,  357,  357,  630,  351,  629,  628,  354,  358,  358,
      358,  627,  626,  357,  360,  360,  360,  363,  363,  363,
      365,  365,  365,  367,  367,  367,  368,  368,  368,  369,
      369,  369,  374,  374,  374,  375,  375,  375,  376,  376,
      376,  624,  369,  622,  621,  374,  380,  380,  380,  617,

      616,  376,  381,  381,  381,  382,  382,  382,  385,  385,
      385,  387,  387,  387,  614,  381,  389,  389,  389,  390,
      390,  390,  613,  610,  387,  392,  392,  392,  393,  393,
      393,  390,  394,  394,  394,  609,  606,  392,  605,  604,
      393,  395,  395,  395,  603,  395,  395,  399,  399,  399,
      400,  400,  400,  402,  402,  402,  602,  402,  402,  399,
      405,  405,  405,  406,  406,  406,  407,  407,  407,  409,
      409,  409,  405,  411,  411,  411,  413,  413,  413,  416,
      416,  416,  417,  417,  417,  418,  418,  418,  422,  422,
      422,  424,  424,  424,  425,  425,  425,  601,  418,  426,

      426,  426,  599,  598,  424,  427,  427,  427,  428,  428,
      428,  596,  426,  430,  430,  430,  432,  432,  432,  595,
      594,  428,  433,  433,  433,  591,  430,  434,  434,  434,
      436,  436,  436,  588,  585,  433,  437,  437,  437,  439,
      439,  439,  583,  436,  440,  440,  440,  444,  444,  444,
      580,  578,  439,  446,  446,  446,  447,  447,  447,  573,
      444,  572,  448,  448,  448,  571,  446,  452,  452,  452,
      453,  453,  453,  570,  436,  448,  454,  454,  454,  457,
      457,  457,  569,  453,  458,  458,  458,  461,  461,  461,
      462,  462,  462,  464,  464,  464,  568,  458,  566,  565,

      461,  465,  465,  465,  563,  464,  466,  466,  466,  467,
      467,  467,  468,  468,  468,  469,  469,  469,  466,  560,
      559,  467,  470,  470,  470,  555,  552,  469,  472,  472,
      472,  474,  474,  474,  477,  477,  477,  480,  480,  480,
      481,  481,  481,  482,  482,  482,  550,  477,  544,  540,
      480,  484,  484,  484,  537,  533,  482,  486,  486,  486,
      487,  487,  487,  532,  484,  488,  488,  488,  489,  489,
      489,  491,  491,  491,  492,  492,  492,  529,  488,  494,
      494,  494,  520,  518,  491,  495,  495,  495,  496,  496,
      496,  497,  497,  497,  498,  498,  498,  515,  495,  512,

      511,  496,  500,  500,  500,  507,  504,  498,  501,  501,
      501,  503,  503,  503,  502,  500,  505,  505,  505,  506,
      506,  506,  499,  493,  503,  508,  508,  508,  490,  505,
      509,  509,  509,  510,  510,  510,  513,  513,  513,  514,
      514,  514,  485,  509,  516,  516,  516,  517,  517,  517,
      483,  479,  514,  519,  519,  519,  478,  516,  521,  521,
      521,  522,  522,  522,  523,  523,  523,  524,  524,  524,
      525,  525,  525,  522,  526,  527,  527,  527,  476,  526,
      526,  475,  526,  526,  473,  526,  471,  527,  528,  528,
      528,  530,  530,  530,  531,  531,  531,  534,  534,  534,

      463,  528,  460,  456,  530,  535,  535,  535,  536,  536,
      536,  538,  538,  538,  539,  539,  539,  455,  535,  541,
      541,  541,  451,  449,  538,  542,  542,  542,  543,  543,
      543,  545,  545,  545,  546,  546,  546,  445,  542,  547,
      547,  547,  443,  442,  545,  548,  548,  548,  549,  549,
      549,  551,  551,  551,  553,  553,  553,  441,  548,  554,
      554,  554,  556,  556,  556,  438,  435,  553,  558,  558,
      558,  561,  561,  561,  562,  562,  562,  564,  564,  564,
      567,  567,  567,  431,  561,  574,  574,  574,  575,  575,
      575,  576,  576,  576,  577,  577,  577,  574,  579,  579,

      579,  581,  581,  581,  576,  582,  582,  582,  584,  584,
      584,  586,  586,  586,  581,  587,  587,  587,  589,  589,
      589,  590,  590,  590,  586,  592,  592,  592,  593,  593,
      593,  597,  597,  597,  607,  607,  607,  429,  592,  608,
      608,  608,  611,  611,  611,  612,  612,  612,  615,  615,
      615,  618,  618,  618,  423,  611,  619,  619,  619,  620,
      620,  620,  421,  420,  618,  634,  634,  634,  419,  592,
      415,  414,  620,  636,  636,  636,  638,  638,  638,  639,
      639,  639,  640,  640,  640,  412,  636,  410,  408,  638,
      641,  641,  641,  401,  398,  640,  651,  651,  651,  654,

      654,  654,  655,  655,  655,  657,  657,  657,  391,  651,
      388,  386,  654,  658,  658,  658,  384,  383,  657,  659,
      659,  659,  668,  668,  668,  669,  669,  669,  670,  670,
      670,  672,  672,  672,  379,  668,  674,  674,  674,  377,
      373,  670,  681,  681,  681,  683,  683,  683,  684,  684,
      684,  685,  685,  685,  681,  694,  694,  694,  695,  695,
      695,  684,  697,  697,  697,  372,  371,  694,  706,  706,
      706,  716,  716,  716,  723,  723,  723,  725,  725,  725,
      726,  726,  726,  716,  370,  366,  723,  364,  362,  725,
      731,  731,  731,  733,  733,  733,  734,  734,  734,  736,

      736,  736,  731,  361,  359,  733,  741,  741,  741,  742,
      742,  742,  744,  744,  744,  750,  750,  750,  741,  753,
      753,  753,  757,  757,  757,  758,  758,  758,  759,  759,
      759,  353,  753,  352,  757,  760,  760,  760,  758,  762,
      762,  762,  763,  763,  763,  764,  764,  764,  760,  348,
      347,  762,  765,  765,  765,  766,  766,  766,  768,  768,
      768,  769,  769,  769,  346,  765,  773,  773,  773,  774,
      774,  774,  775,  775,  775,  776,  776,  776,  773,  345,
      342,  774,  778,  778,  778,  779,  779,  779,  780,  780,
      780,  781,  781,  781,  782,  782,  782,  783,  783,  783,

      784,  339,  784,  785,  785,  338,  336,  335,  329,  328,
      324,  321,  318,  310,  305,  304,  302,  301,  298,  294,
      293,  289,  288,  287,  286,  284,  283,  282,  281,  280,
      274,  270,  267,  266,  262,  260,  259,  258,  256,  255,
      254,  253,  252,  251,  249,  248,  245,  240,  239,  235,
      232,  227,  225,  224,  221,  220,  214,  213,  211,  210,
      208,  207,  206,  204,  203,  202,  201,  200,  199,  198,
      197,  196,  191,  187,  185,  184,  182,  181,  180,  179,
      177,  176,  175,  174,  173,  172,  171,  170,  169,  168,
      166,  165,  164,  160,  159,  157,  156,  151,  150,  149,

      148,  147,  146,  142,  141,  140,  137,  136,  135,  134,
      132,  131,  130,  129,  128,  127,  126,  125,  124,  122,
      121,  120,  118,  116,  115,  113,  112,  110,  109,  102,
      100,   99,   98,   96,   94,   93,   92,   91,   90,   89,
       88,   87,   86,   84,   83,   82,   80,   77,   76,   75,
       71,   68,   66,   65,   64,   62,   58,   54,   51,   50,
       49,   47,   46,   45,   44,   43,   40,   38,   35,   29,
       25,   17,    6,    5,    4,    3,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[117] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
/** @file parseosil.l
 * 
 * @author  Robert Fourer, Gus Gassmann, Jun Ma, Kipp Martin, 
 * @version 2.0, 12/21/2007
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005-2007, Robert Fourer, Gus Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"

#include <iostream>
#include "OSConfig.h"


//#define PARSERDEBUG



#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

#include <sstream>  
#include "OSiLParserData.h"



#include "OSErrorClass.h"
#include "OSParseosil.tab.hpp"
#include "OSInstance.h"




#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif




#ifdef WIN_
#define YY_NO_UNISTD_H
#include <io.h>
#include <process.h>
#endif
using std::cout;
using std::endl;
using std::ostringstream;







#line 1190 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.cpp"

#define INITIAL 0
#define doublequoteattributetext 1
#define singlequoteattributetext 2
#define startelement 3
#define osilattributetext 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osillex_destroy (yyscan_t yyscanner );

int osilget_debug (yyscan_t yyscanner );

void osilset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osilget_extra (yyscan_t yyscanner );

void osilset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osilget_in (yyscan_t yyscanner );

void osilset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osilget_out (yyscan_t yyscanner );

void osilset_out  (FILE * out_str ,yyscan_t yyscanner );

int osilget_leng (yyscan_t yyscanner );

char *osilget_text (yyscan_t yyscanner );

int osilget_lineno (yyscan_t yyscanner );

void osilset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osilget_lval (yyscan_t yyscanner );

void osilset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osilget_lloc (yyscan_t yyscanner );
    
        void osilset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osilwrap (yyscan_t yyscanner );
#else
extern int osilwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osillex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osillex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 110 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"

 
#line 1435 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osilensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osil_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 778 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1677 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 112 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 114 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = strdup(yytext); return(QUOTE);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 115 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 116 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 117 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; yylval->dval = atof(yytext); return(DOUBLE);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 118 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 121 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 122 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFQTERMSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 123 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFSTAGESATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 124 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 125 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 126 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 128 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 129 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXONEATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 130 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXTWOATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 131 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(COEFATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 132 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUEATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 133 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 134 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTIDXATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 135 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ENDIDXATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 136 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HORIZONATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 137 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 139 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(IDATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 140 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(IDATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 141 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 142 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 143 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 144 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 147 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OSILEND);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 148 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATAEND);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 149 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSSTART);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 150 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSEND);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 151 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMSTART);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 152 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMEND);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 154 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 155 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 156 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 157 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 158 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 159 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 160 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 161 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 162 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 163 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 164 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 165 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 166 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 167 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 168 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 169 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 170 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 171 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 172 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 173 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 174 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUARESTART);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 175 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUAREEND);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 176 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINSTART);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 177 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINEND);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 178 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSSTART);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 179 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSEND);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 180 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 181 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 182 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 183 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 184 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 185 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 186 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 187 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 188 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINSTART);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 189 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINEND);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 190 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 191 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 192 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFSTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 193 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFEND);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 194 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 195 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 197 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 198 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 199 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ESTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 200 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 201 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PISTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 202 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PIEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 203 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 204 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 206 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINSTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 207 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 208 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESSTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 209 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 210 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 211 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGEEND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 212 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 213 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 214 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 215 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 216 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 217 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 218 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 219 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 220 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 221 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 222 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 223 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 224 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALSTART);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 225 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALEND);}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 228 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
BEGIN comment;
	YY_BREAK
case 106:
#line 230 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 230 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 231 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 233 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
BEGIN xmldeclaration;
	YY_BREAK
case 110:
#line 235 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 235 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 236 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 239 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext); return(ATTRIBUTETEXT);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 240 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext); return(ATTRIBUTETEXT);}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 242 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 254 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"
ECHO;
	YY_BREAK
#line 2223 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(osilattributetext):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osillex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osilwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osillex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osilrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osilrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 778 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 778 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 777);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osilrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osilwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osilrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osilensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osil_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osil_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osil_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osilpop_buffer_state();
	 *		osilpush_buffer_state(new_buffer);
     */
	osilensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osil_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osilwrap()) processing, but the only time this flag
	 * is looked at is after osilwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osil_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osil_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osilalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osil_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osil_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osil_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osilfree((void *) b->yy_ch_buf ,yyscanner );

	osilfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osilrestart() or at EOF.
 */
    static void osil_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osil_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osil_init_buffer was _probably_
     * called from osilrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osil_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osil_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osilensure_buffer_stack(yyscanner);

	/* This block is copied from osil_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osil_switch_to_buffer. */
	osil_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osilpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osil_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osilensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osil_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osil_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osillex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osil_scan_bytes() instead.
 */
YY_BUFFER_STATE osil_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osil_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osillex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osil_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osilalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osil_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osil_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osilget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osilget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osilget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osilget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osilget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osilset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osil_switch_to_buffer
 */
void osilset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osilset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osilget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osilset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osilget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osilset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osilget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osilset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osillex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osillex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osillex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osillex_init()
     */
    return 0;
}

/* osillex_destroy is for both reentrant and non-reentrant scanners. */
int osillex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osilpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osilfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osilfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osillex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osilfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osilalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osilrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osilfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osilrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 254 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/OSParseosil.l"




