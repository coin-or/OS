#line 2 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.cpp"

#line 4 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 189
#define YY_END_OF_BUFFER 190
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1668] =
    {   0,
        1,    1,  187,  187,  185,  185,  186,  186,    0,    0,
        0,    0,    0,    0,    0,    0,  190,  188,    1,    1,
        2,  176,    2,  176,    6,  176,    5,  188,    4,  176,
        2,  187,  189,  185,  186,  178,  179,  178,  182,  183,
      182,    1,  176,  176,  176,    5,    0,    4,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
        3,    6,    5,  176,    6,  176,    7,    5,    0,    0,
      181,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    4,  176,  187,  185,
      186,    0,  184,  176,  176,  176,  176,  176,  176,  176,

      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
        0,  176,    6,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    6,  180,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,    0,
      176,  176,  176,  176,  176,  176,    6,  177,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  168,    0,    0,    0,    0,    0,    0,    0,
        0,   68,    0,    0,    0,  160,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  152,    0,    0,    0,
      154,  176,  176,  176,  176,  176,   24,  176,  176,  176,
      176,  176,  176,  176,  176,    0,   41,   42,  176,  176,
      176,  176,  176,  176,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  114,    0,    0,    0,    0,
        0,    0,  104,    0,    0,  176,  176,  176,    0,  176,
       24,  176,  176,  176,  176,  176,    0,  176,  176,  176,
      176,  176,    0,  176,  176,  176,    0,  176,    0,  169,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   69,    0,    0,    0,    0,    0,    0,    0,  161,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  153,    0,    0,    0,    0,    0,  155,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       80,    0,    0,    0,    0,    0,    0,    0,   60,   59,

       94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  176,  176,    0,   39,   40,  176,  176,
      176,  176,  176,    0,   31,   32,  176,  176,  176,  176,
        0,   49,   50,  176,  176,    0,   37,   38,  176,    0,
      169,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   69,    0,    0,    0,    0,    0,    0,  161,    0,
        0,    0,   61,    0,    0,    0,    0,  115,    0,    0,
        0,    0,    0,    0,  153,    0,    0,    0,  105,    0,
      155,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       64,    0,    0,  176,  176,  176,  176,  176,  176,  176,
      176,  176,    0,  176,   25,  176,  176,  176,    0,   33,
       34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   81,    0,    0,    0,    0,    0,    0,
        0,   61,    0,   95,    0,    0,    0,  115,    0,    0,
        0,    0,    0,    0,    0,    0,  105,    0,    0,    0,
       90,    0,    0,    0,   62,    0,    0,    0,    0,    0,
       84,  106,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  138,    0,    0,   66,    0,    0,    0,

        0,    0,  176,  176,  176,  176,  176,    0,  176,  176,
      176,    0,   45,   46,   25,  176,  176,  176,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       81,    0,    0,    0,    0,    0,    0,    0,    0,   95,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   65,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   88,
      126,    0,    0,    0,    0,    0,    0,    0,    0,   86,
        0,  176,    0,  176,  176,  176,    0,   51,   52,  176,

      176,    0,  176,  176,  176,  176,  176,  176,  176,  176,
        0,   53,   54,    0,    0,   91,    0,    0,    0,    0,
        0,   63,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   85,    0,  107,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  139,    0,    0,
        0,    0,   67,    0,    0,    0,    0,    0,   65,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  140,    0,   47,   48,  176,  176,

      176,  176,    0,   43,   44,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,    0,   91,    0,    0,
        0,    0,   63,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   85,  107,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   89,    0,  127,  139,    0,
        0,    0,    0,   67,    0,    0,    0,    0,    0,    0,
       87,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  156,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   72,    0,    0,    0,  176,  176,  176,  176,  176,

      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   89,  127,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   87,    0,  141,  164,    0,
        0,    0,  120,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  100,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   74,    0,    0,    0,  176,
        0,  176,   26,  176,    0,  176,  176,   22,  176,  176,
      176,   20,  176,  176,  176,  176,  176,   18,  176,  176,

       17,  176,  176,  176,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  157,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   73,    0,    0,    0,
      141,  110,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   76,    0,  102,   96,    0,   70,   92,    0,
        0,    0,    0,    0,    0,  174,    0,    0,    0,   35,
       36,   26,    0,   55,   56,  176,    0,   22,  176,  176,
       20,  176,  176,  176,  176,  176,   18,  176,   17,  176,
      176,    0,   57,   58,    0,  165,    0,    0,    0,    0,

      121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  101,    0,    0,  157,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   75,   73,    0,    0,
        0,    0,  134,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   98,    0,    0,    0,    0,    0,  116,  172,
        0,    0,    0,   27,   28,  176,  176,  176,  176,  176,
      176,  176,  176,   10,  176,  176,  176,  176,    0,  165,
        0,  111,    0,    0,  121,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   77,    0,    0,  103,  101,    0,
       97,    0,    0,   71,    0,   93,    0,    0,    0,    0,

        0,    0,   75,    0,  175,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   82,    0,  176,  176,    9,  176,
      176,  176,  176,  176,  176,   10,  176,  176,  176,    0,
       29,   30,  111,    0,    0,    0,  135,    0,    0,    0,
        0,    0,    0,    0,    0,   77,    0,  103,   97,    0,
       99,   71,   93,    0,    0,    0,    0,    0,    0,  117,
      175,    0,  173,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  136,    0,
        0,    0,  176,    9,  176,  176,  176,  176,  176,  176,

      176,  176,  176,    0,    0,  135,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   99,    0,    0,    0,    0,
        0,  117,  173,    0,   83,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  124,   78,    0,    0,    0,    0,
        0,    0,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  137,    0,    0,   83,
        0,    0,  118,    0,    0,  170,    0,    0,    0,    0,
        0,    0,  130,    0,    0,    0,  176,  176,  176,  176,
      176,  176,  176,   11,  176,   12,  176,  176,   13,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  125,
        0,   79,    0,    0,    0,  137,    0,    0,    0,    0,
      146,    0,    0,    0,    0,    0,    0,    0,  108,    0,
        0,  176,  176,   14,  176,  176,  176,  176,   11,   12,
      176,   13,    0,    0,  119,    0,    0,    0,  171,    0,
        0,    0,    0,  125,   79,    0,    0,    0,  131,    0,
        0,    0,  132,    0,    0,    0,    0,    0,    0,    0,
      112,    0,  176,   15,   14,  176,  176,  176,  176,  176,
        0,  119,    0,  147,    0,  171,    0,    0,    0,    0,
        0,    0,  131,    0,  109,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   15,  176,  176,  176,    8,
      176,  176,    0,  133,  147,    0,    0,    0,    0,    0,
        0,    0,  109,    0,  113,    0,    0,    0,    0,  142,
        0,    0,    0,    0,  176,  176,    8,  176,  176,   23,
      133,    0,    0,    0,    0,    0,    0,    0,  113,    0,
        0,  162,  158,    0,  122,    0,    0,    0,  176,  176,
      176,   23,    0,    0,    0,    0,  143,    0,    0,    0,
        0,    0,  166,    0,    0,  128,    0,  176,  176,  176,
        0,    0,  163,    0,  159,  143,    0,    0,  123,    0,
        0,    0,    0,    0,    0,  176,  176,  176,    0,  167,

      163,  159,    0,  123,    0,    0,  129,    0,    0,    0,
        0,  176,  176,  176,  167,    0,    0,  129,    0,    0,
        0,    0,  176,  176,  176,    0,    0,    0,  144,    0,
      150,  176,  176,  176,    0,    0,    0,    0,  176,  176,
      176,   16,    0,  145,    0,    0,  151,    0,  176,  176,
       19,   16,  145,    0,  151,    0,  176,   21,   19,    0,
      148,   21,    0,    0,  149,  149,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    7,    1,    1,    8,    1,
        1,    7,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    7,    1,   14,
       15,   16,   17,    7,    7,   18,   19,   20,   21,   22,
        7,    7,   23,   24,   25,   26,   27,   28,   29,   30,
        7,   31,   32,   33,   34,   35,   36,    7,    7,    7,
        1,    7,    1,    1,    7,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,    1,   63,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[64] =
    {   0,
        1,    2,    2,    2,    1,    3,    2,    4,    1,    2,
        2,    2,    2,    2,    1,    5,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    1
    } ;

static yyconst flex_int16_t yy_base[1679] =
    {   0,
        0,   63, 3464, 3463, 3472, 3471, 3468, 3467,    0,    0,
        0,    0,   15,   16,    4,   17, 3474, 3481,  125,  182,
     3467,    8, 3464,   16,   29,   17,   79,  236,   33,   24,
     3481,    0, 3481,    0,    0, 3481, 3481, 3461, 3481, 3481,
     3454,    0,   30,   35,   39,   85,   42,   54,   80,   89,
       88,   92,   93,   46,   97,  134,   96,  100,  105,  108,
     3481,  187,  202,  144,  231,  143, 3481,  174, 3459,  256,
     3481, 3417,   91, 3422, 3425, 3415, 3413, 3418,   78,  155,
      112, 3421,  128, 3400, 3405, 3422,  231,  235,    0,    0,
        0, 3442, 3481,  203,  242,  249,  252,  246,  301,  302,

      306,  309,  310,  313,  328,  183,  257,  319,  324,  331,
     3444,  335,  349, 3446, 3404,   99, 3409, 3412, 3402, 3400,
     3405,  205,  318,  172, 3408,  213, 3387, 3392, 3409, 3395,
     3392, 3389, 3394, 3391,  326, 3402, 3400, 3378, 3387, 3390,
     3379, 3383, 3389, 3376,  107, 3380, 3377, 3375,    6, 3373,
     3375, 3385, 3371,  253, 3481,  336,  341,  350,  369,  386,
      370,  377,  378,  381,  382,  390,  389,  393,  415,  430,
      394,  421,  397,  426,  425,  429, 3411, 3481, 3373, 3370,
     3367, 3372, 3369,  401, 3380, 3378, 3356, 3365, 3368, 3357,
     3361, 3367, 3354,  365, 3358, 3355, 3353,   70, 3351, 3353,

     3363, 3349,  369, 3361, 3360, 3359, 3358, 3342, 3340, 3340,
     3354, 3371, 3352, 3359,  431, 3350, 3345, 3341, 3347, 3335,
     3331, 3341, 3345, 3326, 3324, 3323, 3345, 3323, 3337, 3323,
     3331,  445,  450,  468,  451,  475,  471,  471,  478,  479,
      482,  503,  483,  486,  496,  526, 3481, 3481,  495,  537,
      500,  499,  540,  507,  555, 3334, 3333, 3332, 3331, 3315,
     3313, 3313, 3327,  558, 3326, 3333,  449,  561, 3320, 3316,
     3322, 3310, 3306, 3316, 3320, 3301, 3299, 3298,  564, 3299,
     3313, 3299,  580, 3296, 3314, 3300, 3310, 3293, 3293, 3301,
     3289, 3307, 3300, 3322, 3291, 3295, 3309, 3293, 3296, 3297,

     3286,  584, 3280, 3276, 3273, 3301, 3289,  331, 3284, 3287,
     3290, 3285, 3481, 3297, 3287,  556,  559,  612,  587,  562,
      615,  587,  592,  578,  606,  627,  630,  623,  630,  631,
      517,  648,  652,  645,  651,  666,  670,  683,  686,  692,
     3267, 3285, 3271, 3281, 3264, 3264, 3272, 3260, 3278, 3271,
      701,  707, 3293, 3262, 3266, 3280, 3264, 3267,  710,  716,
     3268, 3257,  719, 3251, 3247, 3244,  725, 3261,  407, 3256,
     3259,  728,  734, 3262, 3257,  743, 3269,  746,  749, 3259,
     3241, 3255, 3253, 3236, 3258, 3253, 3252,  500, 3238, 3246,
     3481, 3231, 3236, 3250, 3228, 3233, 3225, 3235,  754, 3481,

     3250, 3222, 3226, 3239, 3220, 3219, 3219, 3233, 3217, 3216,
     3220, 3231, 3229,  726,  747,  763, 3481, 3481,  759,  758,
      762,  763,  767,  782, 3481, 3481,  773,  792,  807,  799,
      822, 3481, 3481,  802,  813,  830, 3481, 3481,  837,  840,
      853, 3212, 3226, 3224, 3207, 3229, 3224, 3223,  825, 3209,
     3217,  856,  859, 3202, 3207, 3221, 3199, 3204,  862, 3196,
     3206,  865,  868,  874, 3194, 3198,  880,  883, 3211, 3192,
     3191, 3191, 3205, 3189,  889, 3188, 3192,  895,  898, 3203,
      902, 3201, 3201, 3181, 3195, 3184, 3183, 3185, 3184, 3186,
     3185, 3190, 3174, 3186, 3185,  517, 3178, 3173, 3178, 3160,

     3169,  887, 3166, 3174, 3163, 3161, 3175, 3174,  576, 3169,
     3481, 3164, 3164,  894,  898,  899,  902,  917,  908,  909,
      914,  932,  957,  964,  938,  929,  913,  970,  985, 3481,
     3481, 3174, 3154, 3168, 3157, 3156, 3158, 3157, 3159, 3158,
     3163, 3147,  992,  949, 3159, 3158,  643, 3151, 3146, 3151,
     3133,  973,  995,  998, 3142,  942, 3139, 1001, 3147, 3136,
     3134, 3148, 3147,  650, 3142, 1010, 1013, 3137, 3137, 3139,
     3481, 3133, 3128,  209, 3481, 1000, 3127, 3132, 3138, 3143,
     3481, 3481, 3120, 3124, 3143, 3120, 3115, 3135, 3115, 3125,
     3124, 3128, 3113, 3125, 3124, 3124,   57, 3111, 3111, 3124,

     3119, 3118, 1028,  976,  993, 1008, 1035, 1051, 1031, 1058,
     1051, 1085, 3481, 3481, 1074, 1052, 1055, 1095, 1098, 3113,
     1110, 3107, 3102,  250, 1113, 1101, 3101, 3106, 3112, 3117,
     1092, 1121, 1129, 3094, 3098, 3117, 3094, 3089, 3109, 1136,
     3089, 3099, 3098, 3102, 3087, 1139, 3099, 3099, 1144, 3086,
     3086, 3099, 1147, 1150, 3094, 3093, 3083, 3093, 3086, 3089,
     3092, 3091, 3076, 3069, 3087, 3087, 3082, 3081,  943, 3084,
     3071, 3078, 3066, 3056, 3075, 3059, 3069, 3059, 3064, 3481,
     3481, 3056, 3070, 1003, 3072, 3077, 3051, 3083, 3067, 3481,
     3049, 1154, 1171, 1076, 1091, 1145, 1179, 3481, 3481, 1148,

     1189, 1192, 1170, 1174, 1151, 1183, 1194, 1197, 1198, 1201,
     1224, 3481, 3481, 3053, 1236, 1239, 3063, 3056, 3059, 3062,
     1244, 1247, 3061, 3046, 3039, 3057, 3057, 3052, 3051, 1020,
     3054, 1251, 1259, 1262, 1266, 3041, 3048, 3036, 3026, 3045,
     3029, 3039, 3029, 3034, 1269, 1272, 1277, 1280, 3026, 3040,
     1062, 1287, 1292, 3042, 3047, 3021, 3053, 3037, 1295, 1298,
     3019, 3017, 3027, 3030, 3022, 3022, 3013, 3017, 3029, 3019,
     3010, 3024, 3007, 3010, 3023, 3005, 3020, 3016, 3019, 3023,
     2999, 3008, 3001, 3010, 3009, 3016, 3016, 3002, 3001, 2996,
     3021, 2998, 2992, 2993, 3481, 1302, 3481, 3481, 1293, 1297,

     1301, 1302, 1317, 3481, 3481, 1308, 1219, 1313, 1312, 1316,
     1208, 1317, 1320, 1202, 1321, 1324, 2984, 1342, 2994, 2997,
     2989, 2989, 1348, 2980, 2984, 2996, 2986, 2977, 2991, 2974,
     2977, 2990, 2972, 1358, 1367, 2987, 2983, 2986, 2990, 2966,
     2975, 2968, 2977, 2976, 1371, 1374, 1377, 1381, 1386, 2983,
     2983, 2969, 2968, 1392, 2963, 2988, 2965, 2959, 2960, 1395,
     1398, 1401, 2952, 2965, 2950, 2963, 2962, 2957, 2946, 2952,
     2957, 2947, 2928, 2950, 2906, 2895, 2897, 2900, 2848, 2848,
     2837, 3481, 2830, 2829, 2839, 2810, 2807, 2795, 2796,   83,
      146, 3481,  151,  156,  205, 1404, 1410, 1419, 1325, 1425,

     1341, 1428, 1422, 1431, 1432, 1450, 1435, 1458, 1442, 1474,
      200,  220,  225,  242,  245,  244,  264,  280,  293,  292,
      290,  327,  328,  338,  367,  408,  415,  421,  435, 1479,
      474,  488,  507,  524, 1482, 1494,  534,  541,  558,  565,
      580, 1497,  573,  582,  607, 1502, 1505, 1508, 3481,  598,
      633,  636, 3481,  645,  645,  671,  668,  678,  665,  673,
      688,  692,  697,  685, 3481,  702,  692,  710,  709,  712,
      749,  766,  755,  756,  757, 3481,  751,  753,  787, 1512,
     1516, 1527, 1530, 1533, 1548, 1555, 1558, 1536, 1509, 1561,
     1564, 1542, 1568, 1539, 1569, 1572, 1587, 1592, 1584, 1602,

     1606, 1454, 1598, 1617, 1632, 1625,  757,  784,  764, 1640,
      776,  779,  814,  834,  837,  828,  829,  851,  848,  857,
      841, 1643,  876,  864, 1646, 1649,  887,  883,  893,  924,
      956,  945,  965,  969, 1661, 1664, 1667,  977,  977, 1015,
     1670, 3481,  983,  999, 1009,  998, 1021, 1007, 1041, 1031,
     1091, 1066, 3481, 1090, 3481, 3481, 1093, 3481, 3481, 1093,
     1115, 1126, 1122, 1162, 1151, 1164, 1182, 1182, 1679, 3481,
     3481, 1686, 1689, 3481, 3481, 1696, 1699, 1711, 1662, 1641,
     1715, 1670, 1706, 1690, 1728, 1707, 1734, 1731, 1746, 1441,
     1749, 1752, 3481, 3481, 1764, 1767, 1770, 1193, 1236, 1773,

     1779, 1254, 1233, 1255, 1256, 1309, 1294, 1336, 1311, 1788,
     1348, 1791, 1794, 1797, 1809, 1350, 1812, 1815, 1818, 1341,
     1358, 1365, 1361, 1377, 1382, 1824, 1833, 1839, 1842, 1403,
     1405, 1595, 3481, 1411, 1450, 1444, 1457, 1469, 1518, 1513,
     1531, 1539, 3481, 1538, 1570, 1563, 1567, 1570, 3481, 3481,
     1589, 1600, 1845, 3481, 3481, 1792, 1852, 1743, 1836, 1843,
     1846, 1816, 1861, 1867, 1858, 1864, 1868, 1886, 1901, 1908,
     1915, 1918, 1634, 1921, 1924, 1602, 1623, 1627, 1634, 1646,
     1663, 1658, 1679, 1930, 1936, 1680, 1939, 1945, 1948, 1954,
     1957, 1960, 1963, 1969, 1978, 1981, 1675, 1706, 1686, 1683,

     1684, 1984, 1987, 1993, 1999, 2002, 1705, 1724, 1737, 1742,
     1747, 1742, 1745, 1745, 1764, 1768, 1765, 1773, 1792, 1793,
     1788, 1825, 1846, 1834, 3481, 1836, 1994, 2009, 2012, 1878,
     2003, 1961, 2006, 2012, 2013, 2028, 2019, 1892, 2020, 2038,
     3481, 3481, 2045, 1850, 1859, 2048, 2052, 1861, 1854, 1857,
     1857, 1888, 1889, 1877, 1894, 2055, 1912, 2066, 2069, 2072,
     2075, 2078, 2081, 1909, 1917, 1921, 1941, 1927, 2087, 2090,
     2093, 2096, 2102, 2105, 1942, 1945, 1951, 1943, 1971, 1996,
     1997, 2008, 1990, 2022, 2015, 2068, 2046, 2043, 3481, 2057,
     2056, 2072, 2099, 2114, 2106, 2109, 2110, 2113, 2114, 2117,

     2118, 2121, 2124, 2066, 2072, 2139, 2080, 2089, 2103, 2104,
     2111, 2093, 2109, 2102, 2135, 2152, 2116, 2102, 2159, 2120,
     2112, 2165, 2178, 2181, 2184, 2131, 2130, 2133, 2119, 2122,
     2134, 2172, 2154, 2159, 3481, 3481, 2139, 2139, 2154, 2147,
     2153, 2155, 2186, 2189, 2190, 2194, 2197, 2198, 2213, 2216,
     2207, 2222, 2160, 2168, 2165, 2178, 2184, 2222, 2204, 2210,
     2247, 2251, 2191, 2192, 2215, 2256, 2262, 2212, 2217, 2266,
     2227, 2217, 3481, 2219, 2240, 3481, 2225, 2240, 2230, 2228,
     2243, 2248, 3481, 2241, 2242, 2239, 2271, 2286, 2277, 2278,
     2282, 2281, 2301, 2304, 2307, 2310, 2304, 2325, 2333, 2230,

     2340, 2244, 2289, 2343, 2274, 2293, 2285, 2287, 2346, 2349,
     2361, 2364, 2317, 2324, 2367, 2370, 2317, 2319, 2316, 2334,
     3481, 2339, 2321, 2331, 2323, 2354, 2332, 2333, 3481, 2330,
     2336, 2385, 2388, 2391, 2382, 2391, 2392, 2395, 2410, 2413,
     2404, 2419, 2356, 2422, 2425, 2428, 2373, 2437, 2431, 2380,
     2394, 2388, 2419, 2446, 2453, 2401, 2401, 2456, 2459, 2462,
     2412, 2418, 3481, 2421, 2420, 2414, 2432, 2423, 2436, 2449,
     3481, 2434, 2477, 2480, 2483, 2474, 2480, 2495, 2486, 2487,
     2502, 2510, 2513, 2518, 2441, 2521, 2445, 2450, 2467, 2475,
     2489, 2503, 2529, 2532, 2537, 2541, 2494, 2489, 2507, 2508,

     2495, 2493, 2508, 2502, 2518, 2556, 2547, 2548, 2563, 2566,
     2557, 2578, 2572, 2581, 2596, 2498, 2516, 2531, 2532, 2532,
     2547, 2544, 2599, 2602, 2605, 2560, 2569, 2556, 2557, 2581,
     2573, 2570, 2558, 2576, 2605, 2606, 2621, 2612, 2627, 2630,
     2634, 2586, 2584, 2585, 2642, 2606, 2603, 2591, 2648, 2612,
     2599, 3481, 3481, 2599, 3481, 2606, 2616, 2614, 2646, 2649,
     2652, 2667, 2612, 2674, 2677, 2680, 2683, 2616, 2695, 2623,
     2647, 2644, 3481, 2637, 2649, 3481, 2651, 2686, 2689, 2690,
     2710, 2713, 2716, 2720, 2728, 2737, 2641, 2740, 2744, 2664,
     2747, 2666, 2665, 2685, 2681, 2738, 2739, 2744, 2762, 2765,

     2768, 2771, 2682, 2777, 2692, 2783, 2786, 2689, 2684, 2696,
     2701, 2777, 2745, 2784, 2799, 2712, 2735, 2802, 2721, 2739,
     2738, 2737, 2793, 2796, 2797, 2754, 2763, 2759, 3481, 2772,
     3481, 2803, 2802, 2821, 2824, 2777, 2827, 2777, 2825, 2845,
     2852, 2860, 2867, 2870, 2788, 2873, 2882, 2777, 2888, 2891,
     2894, 2897, 2906, 2782, 2909, 2787, 2912, 2915, 2918, 2790,
     3481, 2921, 2927, 2930, 2933, 2936, 3481, 2946, 2951, 2956,
     2961, 2966, 2971, 2976, 2980, 2985, 2989, 2994
    } ;

static yyconst flex_int16_t yy_def[1679] =
    {   0,
     1668, 1668, 1669, 1669, 1670, 1670, 1671, 1671, 1672, 1672,
     1672, 1672, 1673, 1673, 1674, 1674, 1667, 1667, 1675, 1675,
     1667, 1675, 1667, 1675, 1675, 1675, 1675, 1667, 1667, 1675,
     1667, 1676, 1667, 1677, 1678, 1667, 1667, 1667, 1667, 1667,
     1667,   20, 1675, 1675, 1675, 1675,   28, 1667, 1675, 1675,
     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
     1667, 1675, 1675, 1675, 1675, 1675, 1667, 1675, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1675, 1676, 1677,
     1678, 1667, 1667, 1675, 1675, 1675, 1675, 1675, 1675, 1675,

     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
     1667, 1675, 1675, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1675, 1667, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1667,
     1675, 1675, 1675, 1675, 1675, 1675, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1675, 1675, 1675, 1675, 1675, 1667, 1675, 1675, 1675,
     1675, 1675, 1675, 1675, 1675, 1667, 1667, 1667, 1675, 1675,
     1675, 1675, 1675, 1675, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1675, 1675, 1675, 1667, 1675,
     1667, 1675, 1675, 1675, 1675, 1675, 1667, 1675, 1675, 1675,
     1675, 1675, 1667, 1675, 1675, 1675, 1667, 1675, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1675, 1675, 1667, 1667, 1667, 1675, 1675,
     1675, 1675, 1675, 1667, 1667, 1667, 1675, 1675, 1675, 1675,
     1667, 1667, 1667, 1675, 1675, 1667, 1667, 1667, 1675, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1667, 1675, 1667, 1675, 1675, 1675, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1675, 1675, 1675, 1675, 1675, 1667, 1675, 1675,
     1675, 1667, 1667, 1667, 1667, 1675, 1675, 1675, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1675, 1667, 1675, 1675, 1675, 1667, 1667, 1667, 1675,

     1675, 1667, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1675, 1675,

     1675, 1675, 1667, 1667, 1667, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1675, 1675, 1675, 1675, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1675, 1675, 1675, 1675, 1675,

     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1675,
     1667, 1675, 1667, 1675, 1667, 1675, 1675, 1667, 1675, 1675,
     1675, 1667, 1675, 1675, 1675, 1675, 1675, 1667, 1675, 1675,

     1667, 1675, 1675, 1675, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1675, 1667, 1667, 1675, 1675,
     1667, 1675, 1675, 1675, 1675, 1675, 1667, 1675, 1667, 1675,
     1675, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1675, 1667, 1675, 1675, 1675, 1675, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1675, 1675, 1667, 1675,
     1675, 1675, 1675, 1675, 1675, 1667, 1675, 1675, 1675, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1675, 1667, 1675, 1675, 1675, 1675, 1675, 1675,

     1675, 1675, 1675, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1675, 1675, 1675, 1675,
     1675, 1675, 1675, 1667, 1675, 1667, 1675, 1675, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1675, 1675, 1667, 1675, 1675, 1675, 1675, 1667, 1667,
     1675, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1675, 1667, 1667, 1675, 1675, 1675, 1675, 1675,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1675, 1675, 1675, 1667,
     1675, 1675, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1675, 1675, 1667, 1675, 1675, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1675, 1675,
     1675, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1675, 1675, 1675,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1675, 1675, 1675, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1675, 1675, 1675, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1675, 1675, 1675, 1667, 1667, 1667, 1667, 1667,
     1667, 1675, 1675, 1675, 1667, 1667, 1667, 1667, 1675, 1675,
     1675, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1675, 1675,
     1667, 1667, 1667, 1667, 1667, 1667, 1675, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667,    0, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667
    } ;

static yyconst flex_int16_t yy_nxt[3545] =
    {   0,
       18,   19,   19,   20,   18,   21,   40,   23,   18,   24,
       25,   26,   27,   28,   18,   29,   18,   37,   37,   40,
       41, 1667,   30, 1667,   38,   38,   62, 1667,   63, 1667,
     1667, 1667,   67,   41,   87,   87,   87, 1667,   64, 1667,
     1667,   65, 1667, 1667, 1667, 1667, 1667,   46, 1667,   66,
     1667,   88, 1667,  226,   67,   87,   87,   87, 1667, 1667,
      227, 1667,   31,   18,   19,   19,   20,   18,   21,   66,
       23,   18,   24,   25,   26,   27,   28,   18,   29,   18,
       68,   68,   68,   99,  685,   30,   68,   68,   68,   62,
      686,   63, 1667, 1667, 1667, 1667,  100,   46, 1667,   66,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667,  138, 1667,   94,  278, 1667,   66,
     1667, 1667,  139, 1667,  279,   31,   42,   42,   42,   95,
      975,  131,   98,  101,   44,  132,   45,   46,   47,  180,
       48,   96,  108,  181,  110,   97,  104, 1667,  145, 1667,
      105,  111,  112,  106,  109,  113, 1667, 1667, 1667, 1667,
      107,  221,  222,   49,   50,  146,   51,   52,  148,   53,
      102,   88,   54,   55,   56,   68,   68,   68,  149,   57,
       58,   59,   60,   42,   42,   42,  976, 1667,  150, 1667,
      103,   44,  140,   45,   46,   47, 1667,   48, 1667,   65,

     1667,  977, 1667,   68,   68,   68,  141,   66,  194,  142,
      143,  144,   62,  978,   63, 1667, 1667, 1667, 1667,  171,
       49,   50,   66,   51,   52,  195,   53,   66,  660,   54,
       55,   56,   87,   87,   87,  661,   57,   58,   59,   60,
       69,  187,   66,   65, 1667,  979, 1667,   70, 1667,  188,
     1667,   66,   71,  197, 1006, 1667,  154, 1667,  156, 1667,
     1007, 1667, 1667,  198, 1667, 1667, 1667, 1667, 1667,  719,
     1667,   66, 1667,  199,   72,   73,  720,   74,   75, 1008,
       76,   77, 1009,   78,   79, 1010,   80,   81, 1011,   82,
       83,   84,   85,   86,  115,  116,  157,  117,  118,  158,

      119,  120,  159,  121,  122,  160,  123,  124,  172,  125,
      126,  127,  128,  129, 1667, 1667, 1667, 1667, 1012, 1667,
      161, 1667, 1667, 1667, 1667, 1667, 1667, 1013, 1667,  169,
      169,  169, 1667, 1014, 1667,  162, 1015, 1667,  173, 1667,
      163, 1667,  170, 1667, 1667, 1016, 1667,  113, 1667, 1667,
     1667, 1667,  164,  174, 1667,  189, 1667,  165,  166, 1017,
      167,  113, 1667, 1667, 1667, 1667, 1018,  168,  175,  190,
      208,  406,  191,  192,  193,  407,  232,  209,  176,  233,
      210,  211, 1667, 1667, 1667, 1667, 1019,  236,  236,  236,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,  234, 1667,

      237, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1020, 1667,  239,  240,  245,  169,  169,  169,  273,
      274,  241,  242,  284,  285,  235,  238,  243, 1667,  170,
     1667,  246,  246,  246, 1667,  247, 1667,  248, 1667, 1667,
     1667, 1667, 1667,  249, 1667,  260,  244,  471, 1021,  297,
      298,  472,  261,  251, 1022,  262,  263,  299, 1667, 1023,
     1667,  250,  252, 1667, 1667, 1667, 1667,  356,  357,  318,
      318,  318,  321,  321,  321,  358,  236,  236,  236, 1024,
      253, 1667,  319, 1667, 1667,  254, 1667,  316, 1667,  237,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

      325, 1667,  320,  317,  326,  326,  326,  322, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667,  327, 1667,  490,
     1667,  491, 1667,  328, 1027,  323,  329,  246,  246,  246,
     1667,  247, 1667,  248,  324,  330,  334, 1028,  332,  332,
      332,  336,  336,  336,  583, 1029,  335,  338,  584,  331,
     1667,  333, 1667, 1667,  337, 1667,  339,  339,  339,  351,
      351,  351,  359,  359,  359,  372,  372,  372,  430, 1667,
      340, 1667, 1667,  352, 1667, 1667,  360, 1667, 1030,  373,
      353,  378,  378,  378, 1031,  399,  399,  399,  416,  416,
      416, 1667,  417, 1667,  418,  379, 1032,  419,  374,  400,

     1667,  361, 1667,  415,  598, 1667,  414, 1667,  599,  341,
      342, 1033, 1034,  318,  318,  318,  321,  321,  321, 1667,
     1035, 1667,  422, 1038,  380, 1667,  319, 1667,  326,  326,
      326,  424,  424,  424,  420,  425, 1667,  426, 1667, 1039,
     1667,  327, 1667, 1667, 1667, 1667, 1667, 1040,  421,  332,
      332,  332, 1042,  431,  431,  431,  423,  432, 1667,  433,
     1667, 1667,  333, 1667, 1667, 1043, 1667,  336,  336,  336,
      634,  436,  436,  436,  635,  437,  427,  438,  650, 1667,
      337, 1667,  651,  428,  439,  439,  439,  339,  339,  339,
      429, 1044,  434,  441,  441,  441, 1667,  440, 1667, 1045,

     1046,  340,  351,  351,  351, 1047, 1048,  435,  452,  452,
      452,  359,  359,  359, 1049, 1050,  352,  459,  459,  459,
      462,  462,  462, 1051, 1052,  360,  467,  467,  467,  372,
      372,  372, 1053, 1054,  463,  475,  475,  475, 1055, 1667,
      468, 1667, 1056,  373,  478,  478,  478,  378,  378,  378,
      481,  481,  481, 1057,  469,  399,  399,  399,  479, 1058,
     1667,  379, 1667, 1059,  416,  416,  416, 1060,  417,  400,
      418, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,  514,
     1667, 1061, 1667,  424,  424,  424, 1667,  425, 1667,  426,
     1062, 1063,  517,  522,  522,  522, 1064, 1065,  515,  516,

     1066,  521,  518, 1067, 1068, 1667,  523, 1667,  524,  524,
      524, 1097, 1667,  519, 1667, 1667, 1098, 1667,  520, 1099,
     1667,  525, 1667,  431,  431,  431, 1667,  432, 1667,  433,
     1102,  436,  436,  436, 1103,  437,  527,  438,  439,  439,
      439,  529,  529,  529,  539,  530,  540,  531, 1104,  526,
     1667,  440, 1667,  528,  441,  441,  441,  452,  452,  452,
      543,  543,  543,  459,  459,  459,  462,  462,  462,  552,
      552,  552, 1105, 1106,  544,  553,  553,  553, 1107, 1108,
      463,  467,  467,  467,  558,  558,  558, 1109, 1110,  554,
      475,  475,  475, 1111, 1112,  468,  478,  478,  478,  567,

      567,  567,  555,  481,  481,  481,  590, 1667,  591, 1667,
      479, 1667, 1667, 1667, 1667, 1667, 1115, 1667,  607,  607,
      607, 1667, 1667, 1667, 1667, 1116, 1667, 1667, 1667, 1667,
     1667,  608, 1667,  522,  522,  522, 1118, 1119,  606,  615,
      615,  615, 1667,  605, 1667, 1667,  523, 1667, 1120,  617,
      631,  631,  631,  604,  603,  611, 1121,  609,  612,  612,
      612,  642,  613,  643,  614,  524,  524,  524,  774,  610,
      775,  618,  618,  618,  552,  552,  552, 1667,  525, 1667,
     1122, 1123,  616, 1667,  619, 1667,  529,  529,  529, 1667,
      530, 1667,  531,  543,  543,  543,  553,  553,  553,  640,

      640,  640,  558,  558,  558, 1124, 1667,  544, 1667, 1125,
      554,  653,  653,  653,  567,  567,  567,  662,  663,  664,
      694, 1667,  788, 1667,  789,  654, 1129, 1130,  665,  692,
      692,  692, 1131, 1132,  666,  695,  607,  607,  607, 1133,
     1134, 1667,  693, 1667, 1667,  831, 1667,  832, 1667,  608,
     1667, 1135,  697,  697,  697,  696,  698, 1136,  699,  701,
      701,  701, 1137,  700, 1667, 1667, 1667, 1667, 1667,  703,
     1667, 1667,  702, 1667,  704,  615,  615,  615, 1138,  705,
      706,  852,  707,  853, 1139,  708,  612,  612,  612, 1667,
      613, 1667,  614,  631,  631,  631,  618,  618,  618,  711,

      711,  711,  710,  712, 1667,  713, 1667,  709, 1667,  619,
     1667,  715,  715,  715,  721,  721,  721, 1140,  723,  724,
      725, 1141,  732,  732,  732,  716,  799, 1142,  722,  726,
      734,  734,  734, 1143,  800,  727,  733,  640,  640,  640,
      747,  747,  747, 1144,  735,  752,  752,  752,  653,  653,
      653,  759,  759,  759,  748,  692,  692,  692, 1667,  753,
     1667, 1667,  654, 1667, 1667, 1145, 1667, 1667,  693, 1667,
     1146,  754,  796,  796,  796, 1147,  797,  755,  798,  749,
      697,  697,  697, 1667,  698, 1667,  699, 1667,  808, 1667,
      701,  701,  701,  803,  803,  803, 1667,  804, 1667,  805,

     1148,  801, 1667,  702, 1667, 1149,  809, 1667,  802, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1150,  810,
      806, 1667,  812, 1667,  807,  711,  711,  711, 1151,  712,
      815,  713, 1667,  814, 1667, 1152,  811,  715,  715,  715,
      818,  818,  818, 1173,  813,  721,  721,  721,  823,  823,
      823,  716,  732,  732,  732,  908,  901,  816,  905,  722,
      834,  834,  834,  734,  734,  734,  733,  835,  835,  835,
      845,  845,  845,  847,  847,  847, 1174,  735,  747,  747,
      747,  849,  849,  849,  846, 1176, 1177,  848,  752,  752,
      752, 1178,  748,  854,  854,  854,  759,  759,  759,  860,

      860,  860,  753,  796,  796,  796, 1667,  797, 1667,  798,
     1667, 1179, 1667,  861, 1667, 1667, 1667, 1667,  803,  803,
      803, 1667,  804, 1667,  805, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667,  898,  896,  818,  818,  818, 1180, 1181,  906,  823,
      823,  823,  897,  899, 1667,  903, 1667,  900,  902,  834,
      834,  834, 1182,  990,  910,  986, 1183,  907,  835,  835,
      835,  904,  845,  845,  845,  935,  935,  935,  847,  847,
      847,  909,  936,  936,  936, 1186,  846,  849,  849,  849,
     1192, 1197,  848,  854,  854,  854,  860,  860,  860,  946,

      946,  946,  947,  947,  947,  980,  980,  980, 1198, 1199,
      861,  982,  982,  982, 1200, 1201,  948, 1667,  981, 1667,
      984,  984,  984, 1667,  983, 1667,  987,  987,  987,  991,
      991,  991, 1667,  985, 1667, 1667, 1202, 1667, 1667,  988,
     1667, 1667,  992, 1667, 1667, 1667, 1667, 1667, 1667, 1207,
     1667,  997,  997,  997, 1667, 1667, 1667, 1667, 1208, 1000,
     1000, 1000,  994, 1667,  998, 1667, 1211, 1667,  993, 1667,
      996, 1667, 1001, 1667,  995, 1004, 1004, 1004, 1167,  989,
     1025, 1025, 1025,  935,  935,  935, 1212, 1667, 1005, 1667,
     1090, 1213,  999, 1003, 1026,  936,  936,  936, 1036, 1036,

     1036, 1214, 1002,  946,  946,  946,  947,  947,  947, 1041,
     1041, 1041, 1037,  980,  980,  980, 1215, 1069, 1069, 1069,
      948, 1070, 1667, 1071, 1667, 1667,  981, 1667,  982,  982,
      982, 1072, 1072, 1072,  984,  984,  984, 1078, 1078, 1078,
     1667,  983, 1667, 1081, 1081, 1081, 1667,  985, 1667, 1073,
     1073, 1073, 1667, 1074, 1667, 1075, 1076, 1076, 1076,  987,
      987,  987, 1216, 1217, 1079,  991,  991,  991, 1667, 1077,
     1667, 1667,  988, 1667, 1667, 1218, 1667, 1667,  992, 1667,
     1080, 1667, 1667, 1667, 1667, 1667, 1219, 1667,  997,  997,
      997, 1220, 1083, 1087, 1087, 1087, 1221, 1667, 1084, 1667,

     1667,  998, 1667, 1000, 1000, 1000, 1082, 1089, 1089, 1089,
     1222, 1667, 1086, 1667, 1209, 1667, 1001, 1667, 1004, 1004,
     1004, 1210, 1223, 1085, 1088, 1224, 1095, 1095, 1095, 1225,
     1667, 1005, 1667, 1092, 1092, 1092, 1226, 1093, 1091, 1094,
     1096, 1100, 1100, 1100, 1113, 1113, 1113, 1025, 1025, 1025,
     1117, 1117, 1117, 1244, 1667, 1101, 1667, 1248, 1114, 1249,
     1245, 1026, 1126, 1126, 1126, 1036, 1036, 1036, 1128, 1128,
     1128, 1041, 1041, 1041, 1250, 1667, 1127, 1667, 1251, 1037,
     1069, 1069, 1069, 1667, 1070, 1667, 1071, 1072, 1072, 1072,
     1073, 1073, 1073, 1252, 1074, 1157, 1075, 1076, 1076, 1076,

     1153, 1153, 1153, 1667, 1154, 1667, 1155, 1253, 1254, 1667,
     1077, 1667, 1078, 1078, 1078, 1156, 1081, 1081, 1081, 1667,
     1667, 1667, 1667, 1255, 1159, 1158, 1162, 1257, 1264, 1163,
     1163, 1163, 1265, 1266, 1160, 1087, 1087, 1087, 1267, 1268,
     1161, 1667, 1164, 1667, 1667, 1274, 1667, 1089, 1089, 1089,
     1168, 1168, 1168, 1092, 1092, 1092, 1667, 1093, 1667, 1094,
     1275, 1165, 1667, 1169, 1667, 1095, 1095, 1095, 1170, 1170,
     1170, 1171, 1171, 1171, 1100, 1100, 1100, 1276, 1277, 1096,
     1175, 1175, 1175, 1278, 1166, 1172, 1279, 1230, 1101, 1184,
     1184, 1184, 1187, 1187, 1187, 1113, 1113, 1113, 1189, 1189,

     1189, 1280, 1281, 1185, 1282, 1667, 1188, 1667, 1283, 1114,
     1190, 1190, 1190, 1117, 1117, 1117, 1193, 1193, 1193, 1195,
     1195, 1195, 1284, 1285, 1191, 1126, 1126, 1126, 1227, 1667,
     1194, 1667, 1286, 1196, 1203, 1203, 1203, 1287, 1288, 1127,
     1128, 1128, 1128, 1204, 1204, 1204, 1153, 1153, 1153, 1667,
     1154, 1667, 1155, 1228, 1228, 1228, 1667, 1205, 1667, 1667,
     1235, 1667, 1163, 1163, 1163, 1667, 1229, 1667, 1236, 1236,
     1236, 1667, 1289, 1667, 1667, 1164, 1667, 1667, 1290, 1667,
     1232, 1667, 1234, 1667, 1291, 1292, 1231, 1168, 1168, 1168,
     1304, 1667, 1238, 1667, 1233, 1305, 1206, 1307, 1308, 1667,

     1169, 1667, 1240, 1240, 1240, 1667, 1241, 1667, 1242, 1170,
     1170, 1170, 1237, 1309, 1310, 1239, 1171, 1171, 1171, 1243,
     1243, 1243, 1246, 1246, 1246, 1175, 1175, 1175, 1311, 1312,
     1172, 1184, 1184, 1184, 1313, 1295, 1247, 1256, 1256, 1256,
     1187, 1187, 1187, 1302, 1314, 1185, 1258, 1258, 1258, 1189,
     1189, 1189, 1315, 1317, 1188, 1190, 1190, 1190, 1259, 1259,
     1259, 1260, 1260, 1260, 1193, 1193, 1193, 1318, 1319, 1191,
     1262, 1262, 1262, 1320, 1667, 1261, 1667, 1321, 1194, 1195,
     1195, 1195, 1263, 1263, 1263, 1269, 1269, 1269, 1203, 1203,
     1203, 1326, 1327, 1196, 1204, 1204, 1204, 1328, 1329, 1270,

     1271, 1271, 1271, 1272, 1272, 1272, 1297, 1667, 1205, 1667,
     1228, 1228, 1228, 1294, 1294, 1294, 1667, 1273, 1667, 1667,
     1330, 1667, 1667, 1229, 1667, 1667, 1667, 1667, 1667, 1236,
     1236, 1236, 1667, 1667, 1667, 1667, 1331, 1332, 1293, 1240,
     1240, 1240, 1333, 1241, 1334, 1242, 1243, 1243, 1243, 1246,
     1246, 1246, 1296, 1306, 1306, 1306, 1256, 1256, 1256, 1301,
     1303, 1298, 1335, 1247, 1336, 1299, 1300, 1258, 1258, 1258,
     1259, 1259, 1259, 1260, 1260, 1260, 1316, 1316, 1316, 1262,
     1262, 1262, 1263, 1263, 1263, 1337, 1338, 1261, 1269, 1269,
     1269, 1322, 1322, 1322, 1271, 1271, 1271, 1272, 1272, 1272,

     1339, 1340, 1270, 1323, 1323, 1323, 1324, 1324, 1324, 1341,
     1342, 1273, 1667, 1353, 1667, 1294, 1294, 1294, 1354, 1667,
     1325, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1355, 1667, 1667, 1356, 1667,
     1306, 1306, 1306, 1357, 1358, 1359, 1344, 1360, 1343, 1361,
     1346, 1362, 1363, 1316, 1316, 1316, 1364, 1347, 1348, 1365,
     1366, 1366, 1366, 1345, 1368, 1369, 1322, 1322, 1322, 1371,
     1372, 1349, 1350, 1373, 1367, 1374, 1351, 1375, 1352, 1323,
     1323, 1323, 1324, 1324, 1324, 1370, 1370, 1370, 1376, 1377,
     1379, 1380, 1381, 1382, 1383, 1384, 1325, 1385, 1386, 1667,

     1400, 1667, 1667, 1667, 1667, 1667, 1378, 1667, 1401, 1667,
     1667, 1667, 1667, 1667, 1393, 1393, 1393, 1395, 1395, 1395,
     1667, 1402, 1667, 1398, 1398, 1398, 1667, 1394, 1667, 1667,
     1396, 1667, 1390, 1403, 1392, 1667, 1399, 1667, 1404, 1405,
     1407, 1387, 1408, 1388, 1413, 1389, 1414, 1391, 1409, 1409,
     1409, 1397, 1411, 1411, 1411, 1415, 1406, 1366, 1366, 1366,
     1417, 1418, 1410, 1416, 1416, 1416, 1412, 1370, 1370, 1370,
     1419, 1367, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427,
     1428, 1429, 1430, 1431, 1667, 1443, 1667, 1433, 1433, 1433,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1446, 1667,

     1434, 1667, 1393, 1393, 1393, 1439, 1439, 1439, 1395, 1395,
     1395, 1440, 1440, 1440, 1667, 1394, 1667, 1667, 1438, 1667,
     1667, 1396, 1667, 1447, 1450, 1432, 1398, 1398, 1398, 1451,
     1435, 1437, 1452, 1436, 1442, 1442, 1442, 1453, 1667, 1399,
     1667, 1444, 1444, 1444, 1448, 1448, 1448, 1409, 1409, 1409,
     1454, 1454, 1454, 1456, 1441, 1445, 1457, 1460, 1449, 1461,
     1462, 1410, 1411, 1411, 1411, 1455, 1455, 1455, 1458, 1458,
     1458, 1416, 1416, 1416, 1463, 1464, 1412, 1465, 1466, 1467,
     1468, 1469, 1459, 1470, 1471, 1472, 1473, 1473, 1473, 1433,
     1433, 1433, 1475, 1475, 1475, 1667, 1481, 1667, 1667, 1474,

     1667, 1667, 1434, 1667, 1667, 1667, 1667, 1667, 1667, 1485,
     1667, 1439, 1439, 1439, 1440, 1440, 1440, 1667, 1476, 1667,
     1442, 1442, 1442, 1444, 1444, 1444, 1482, 1482, 1482, 1483,
     1483, 1483, 1486, 1486, 1486, 1477, 1487, 1445, 1448, 1448,
     1448, 1488, 1479, 1484, 1489, 1490, 1478, 1454, 1454, 1454,
     1491, 1492, 1449, 1480, 1455, 1455, 1455, 1458, 1458, 1458,
     1493, 1493, 1493, 1494, 1494, 1494, 1496, 1497, 1498, 1499,
     1500, 1459, 1501, 1502, 1503, 1504, 1505, 1495, 1473, 1473,
     1473, 1506, 1506, 1506, 1475, 1475, 1475, 1667, 1516, 1667,
     1667, 1474, 1667, 1667, 1517, 1667, 1509, 1509, 1509, 1667,

     1667, 1667, 1667, 1513, 1513, 1513, 1518, 1519, 1667, 1510,
     1667, 1482, 1482, 1482, 1483, 1483, 1483, 1514, 1507, 1515,
     1515, 1515, 1486, 1486, 1486, 1520, 1511, 1521, 1484, 1522,
     1493, 1493, 1493, 1494, 1494, 1494, 1526, 1508, 1523, 1523,
     1523, 1512, 1524, 1524, 1524, 1527, 1528, 1495, 1529, 1530,
     1531, 1532, 1533, 1534, 1542, 1543, 1525, 1506, 1506, 1506,
     1667, 1667, 1667, 1667, 1509, 1509, 1509, 1537, 1537, 1537,
     1667, 1544, 1667, 1513, 1513, 1513, 1667, 1510, 1667, 1539,
     1539, 1539, 1541, 1541, 1541, 1538, 1545, 1514, 1536, 1546,
     1547, 1667, 1540, 1667, 1548, 1550, 1535, 1515, 1515, 1515,

     1523, 1523, 1523, 1524, 1524, 1524, 1549, 1549, 1549, 1551,
     1552, 1553, 1554, 1555, 1556, 1557, 1558, 1525, 1667, 1667,
     1667, 1667, 1537, 1537, 1537, 1667, 1563, 1667, 1539, 1539,
     1539, 1562, 1562, 1562, 1560, 1541, 1541, 1541, 1564, 1565,
     1667, 1540, 1667, 1566, 1566, 1566, 1569, 1570, 1571, 1549,
     1549, 1549, 1572, 1573, 1574, 1575, 1576, 1567, 1577, 1667,
     1559, 1667, 1667, 1561, 1667, 1667, 1581, 1667, 1562, 1562,
     1562, 1587, 1590, 1568, 1578, 1582, 1582, 1582, 1584, 1584,
     1584, 1566, 1566, 1566, 1586, 1586, 1586, 1591, 1592, 1583,
     1593, 1594, 1585, 1595, 1603, 1567, 1588, 1588, 1588, 1667,

     1579, 1667, 1667, 1667, 1667, 1667, 1605, 1580, 1608, 1609,
     1589, 1599, 1599, 1599, 1582, 1582, 1582, 1601, 1601, 1601,
     1610, 1584, 1584, 1584, 1611, 1600, 1616, 1617, 1583, 1602,
     1602, 1602, 1619, 1620, 1598, 1585, 1621, 1596, 1586, 1586,
     1586, 1588, 1588, 1588, 1597, 1604, 1604, 1604, 1606, 1606,
     1606, 1667, 1667, 1667, 1667, 1589, 1622, 1667, 1667, 1667,
     1667, 1626, 1607, 1599, 1599, 1599, 1615, 1615, 1615, 1601,
     1601, 1601, 1602, 1602, 1602, 1627, 1628, 1600, 1604, 1604,
     1604, 1629, 1630, 1613, 1606, 1606, 1606, 1618, 1618, 1618,
     1667, 1631, 1667, 1612, 1614, 1624, 1635, 1667, 1607, 1667,

     1615, 1615, 1615, 1618, 1618, 1618, 1667, 1636, 1667, 1667,
     1667, 1667, 1667, 1637, 1638, 1667, 1667, 1667, 1667, 1645,
     1648, 1623, 1641, 1641, 1641, 1643, 1643, 1643, 1646, 1646,
     1646, 1654, 1656, 1625, 1667, 1642, 1667, 1660, 1667, 1644,
     1667, 1661, 1647, 1632, 1663, 1633, 1650, 1650, 1650,  974,
      973, 1634, 1639, 1641, 1641, 1641, 1640,  972, 1667, 1651,
     1667, 1652, 1652, 1652,  971, 1667, 1642, 1667, 1643, 1643,
     1643, 1653, 1653, 1653, 1646, 1646, 1646,  970,  969, 1649,
      968,  967, 1644, 1655, 1655, 1655,  966,  965, 1647, 1657,
     1657, 1657, 1650, 1650, 1650, 1659, 1659, 1659, 1652, 1652,

     1652, 1667, 1658, 1667, 1667, 1651, 1667, 1653, 1653, 1653,
     1655, 1655, 1655, 1657, 1657, 1657, 1662, 1662, 1662, 1659,
     1659, 1659, 1662, 1662, 1662, 1667, 1658, 1667, 1664, 1664,
     1664, 1664, 1664, 1664, 1666, 1666, 1666, 1666, 1666, 1666,
      964,  963, 1665,  962,  961, 1665,   22,   22,   22,   22,
       22,   32,   32,   32,   32,   32,   34,   34,   34,   34,
       34,   35,   35,   35,   35,   35,   33,   33,   33,   33,
       33,   36,   36,   36,   36,   36,   39,   39,   39,   39,
       39,   43,  960,  959,   43,   89,   89,   89,   89,   90,
       90,  958,   90,   90,   91,   91,   91,  957,   91,  956,

      955,  954,  953,  952,  951,  950,  949,  945,  944,  943,
      942,  941,  940,  939,  938,  937,  934,  933,  932,  931,
      930,  929,  928,  927,  926,  925,  924,  923,  922,  921,
      920,  919,  918,  917,  916,  915,  914,  913,  912,  911,
      895,  894,  893,  892,  891,  890,  889,  888,  887,  886,
      885,  884,  883,  882,  881,  880,  879,  878,  877,  876,
      875,  874,  873,  872,  871,  870,  869,  868,  867,  866,
      865,  864,  863,  862,  859,  858,  857,  856,  855,  851,
      850,  844,  843,  842,  841,  840,  839,  838,  837,  836,
      833,  830,  829,  828,  827,  826,  825,  824,  822,  821,

      820,  819,  817,  795,  794,  793,  792,  791,  790,  787,
      786,  785,  784,  783,  782,  781,  780,  779,  778,  777,
      776,  773,  772,  771,  770,  769,  768,  767,  766,  765,
      764,  763,  762,  761,  760,  758,  757,  756,  751,  750,
      746,  745,  744,  743,  742,  741,  740,  739,  738,  737,
      736,  731,  730,  729,  728,  718,  717,  714,  691,  690,
      689,  688,  687,  684,  683,  682,  681,  680,  679,  678,
      677,  676,  675,  674,  673,  672,  671,  670,  669,  668,
      667,  659,  658,  657,  656,  655,  652,  649,  648,  647,
      646,  645,  644,  641,  639,  638,  637,  636,  633,  632,

      630,  629,  628,  627,  626,  625,  624,  623,  622,  621,
      620,  602,  601,  600,  597,  596,  595,  594,  593,  592,
      589,  588,  587,  586,  585,  582,  581,  580,  579,  578,
      577,  576,  575,  574,  573,  572,  571,  570,  569,  568,
      566,  565,  564,  563,  562,  561,  560,  559,  557,  556,
      551,  550,  549,  548,  547,  546,  545,  542,  541,  538,
      537,  536,  535,  534,  533,  532,  513,  512,  511,  510,
      509,  508,  507,  506,  505,  504,  503,  502,  501,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  489,  488,
      487,  486,  485,  484,  483,  482,  480,  477,  476,  474,

      473,  470,  466,  465,  464,  461,  460,  458,  457,  456,
      455,  454,  453,  451,  450,  449,  448,  447,  446,  445,
      444,  443,  442,  413,  412,  411,  410,  409,  408,  405,
      404,  403,  402,  401,  398,  397,  396,  395,  394,  393,
      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
      382,  381,  377,  376,  375,  371,  370,  369,  368,  367,
      366,  365,  364,  363,  362,  355,  354,  350,  349,  348,
      347,  346,  345,  344,  343,  315,  314,  313,  312,  311,
      310,  309,  308,  307,  306,  305,  304,  303,  302,  301,
      300,  296,  295,  294,  293,  292,  291,  290,  289,  288,

      287,  286,  283,  282,  281,  280,  277,  276,  275,  272,
      271,  270,  269,  268,  267,  266,  265,  264,  259,  258,
      257,  256,  255,  177,  231,  230,  229,  228,  225,  224,
      223,  220,  219,  218,  217,  216,  215,  214,  213,  212,
      207,  206,  205,  204,  203,  202,  201,  200,  196,  186,
      185,  184,  183,  182,  179,  178,  177,  155,  153,  152,
      151,  147,  137,  136,  135,  134,  133,  130,  114,   93,
       92,   61,   61, 1667,   33,   33,   33,   33,   33,   33,
       17, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667
    } ;

static yyconst flex_int16_t yy_chk[3545] =
    {   0,
        1,    1,    1,    1,    1,    1,   15,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   13,   14,   16,
       15,   22,    1,   22,   13,   14,   24,    0,   24,   24,
       26,   24,   26,   16,   29,   29,   29,   30,   24,   30,
        0,   25,   25,   43,   25,   43,   47,   44,   44,   25,
       44,   30,   45,  149,   45,   48,   48,   48,   47,   54,
      149,   54,    1,    2,    2,    2,    2,    2,    2,   25,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       27,   27,   27,   54,  597,    2,   46,   46,   46,   27,
      597,   27,   27,   49,   27,   49,   54,   46,   46,   27,

       46,   51,   50,   51,   50,   52,   53,   52,   53,   57,
       55,   57,   55,   58,   79,   58,   49,  198,   59,   27,
       59,   60,   79,   60,  198,    2,   19,   19,   19,   50,
      890,   73,   53,   55,   19,   73,   19,   19,   19,  116,
       19,   51,   59,  116,   60,   52,   57,   56,   81,   56,
       58,   66,   66,   58,   59,   66,   66,   64,   66,   64,
       58,  145,  145,   19,   19,   81,   19,   19,   83,   19,
       56,   64,   19,   19,   19,   68,   68,   68,   83,   19,
       19,   19,   19,   20,   20,   20,  891,   68,   83,   68,
       56,   20,   80,   20,   20,   20,  106,   20,  106,   62,

       62,  893,   62,   63,   63,   63,   80,   62,  124,   80,
       80,   80,   63,  894,   63,   63,   94,   63,   94,  106,
       20,   20,   63,   20,   20,  124,   20,   62,  574,   20,
       20,   20,   87,   87,   87,  574,   20,   20,   20,   20,
       28,  122,   63,   65,   65,  895,   65,   28,   88,  122,
       88,   65,   28,  126,  911,   95,   88,   95,   94,   98,
      912,   98,   96,  126,   96,   97,  154,   97,  154,  624,
      107,   65,  107,  126,   28,   28,  624,   28,   28,  913,
       28,   28,  914,   28,   28,  915,   28,   28,  916,   28,
       28,   28,   28,   28,   70,   70,   95,   70,   70,   96,

       70,   70,   97,   70,   70,   98,   70,   70,  107,   70,
       70,   70,   70,   70,   99,  100,   99,  100,  917,  101,
       99,  101,  102,  103,  102,  103,  104,  918,  104,  105,
      105,  105,  108,  919,  108,   99,  920,  109,  108,  109,
      100,  105,  105,  105,  110,  921,  110,  112,  112,  156,
      112,  156,  101,  108,  157,  123,  157,  102,  103,  922,
      104,  113,  113,  158,  113,  158,  923,  104,  109,  123,
      135,  308,  123,  123,  123,  308,  156,  135,  110,  157,
      135,  135,  159,  161,  159,  161,  924,  160,  160,  160,
      162,  163,  162,  163,  164,  165,  164,  165,  158,  160,

      160,  160,  167,  166,  167,  166,  168,  171,  168,  171,
      173,  925,  173,  162,  163,  168,  169,  169,  169,  194,
      194,  164,  165,  203,  203,  159,  161,  166,  169,  169,
      169,  170,  170,  170,  172,  170,  172,  170,  175,  174,
      175,  174,  176,  171,  176,  184,  167,  369,  926,  215,
      215,  369,  184,  173,  927,  184,  184,  215,  232,  928,
      232,  172,  174,  233,  235,  233,  235,  267,  267,  234,
      234,  234,  237,  237,  237,  267,  236,  236,  236,  929,
      175,  234,  234,  234,  238,  176,  238,  232,  236,  236,
      236,  239,  240,  239,  240,  241,  243,  241,  243,  244,

      241,  244,  235,  233,  242,  242,  242,  238,  249,  245,
      249,  245,  252,  251,  252,  251,  242,  242,  242,  388,
      254,  388,  254,  243,  931,  239,  244,  246,  246,  246,
      331,  246,  331,  246,  240,  245,  251,  932,  250,  250,
      250,  253,  253,  253,  496,  933,  252,  254,  496,  249,
      250,  250,  250,  253,  253,  253,  255,  255,  255,  264,
      264,  264,  268,  268,  268,  279,  279,  279,  331,  316,
      255,  316,  317,  264,  317,  320,  268,  320,  934,  279,
      264,  283,  283,  283,  937,  302,  302,  302,  319,  319,
      319,  324,  319,  324,  319,  283,  938,  320,  279,  302,

      322,  268,  322,  317,  509,  323,  316,  323,  509,  255,
      255,  939,  940,  318,  318,  318,  321,  321,  321,  325,
      941,  325,  324,  943,  283,  318,  318,  318,  326,  326,
      326,  327,  327,  327,  322,  327,  328,  327,  328,  944,
      326,  326,  326,  329,  330,  329,  330,  945,  323,  332,
      332,  332,  950,  333,  333,  333,  325,  333,  334,  333,
      334,  332,  332,  332,  335,  951,  335,  336,  336,  336,
      547,  337,  337,  337,  547,  337,  328,  337,  564,  336,
      336,  336,  564,  329,  338,  338,  338,  339,  339,  339,
      330,  952,  334,  340,  340,  340,  338,  338,  338,  954,

      955,  339,  351,  351,  351,  956,  957,  335,  352,  352,
      352,  359,  359,  359,  958,  959,  351,  360,  360,  360,
      363,  363,  363,  960,  961,  359,  367,  367,  367,  372,
      372,  372,  962,  963,  363,  373,  373,  373,  964,  414,
      367,  414,  966,  372,  376,  376,  376,  378,  378,  378,
      379,  379,  379,  967,  367,  399,  399,  399,  376,  968,
      415,  378,  415,  969,  416,  416,  416,  970,  416,  399,
      416,  420,  419,  420,  419,  421,  422,  421,  422,  414,
      423,  971,  423,  424,  424,  424,  427,  424,  427,  424,
      972,  973,  420,  428,  428,  428,  974,  975,  415,  419,

      977,  427,  421,  978,  979,  428,  428,  428,  429,  429,
      429, 1007,  430,  422,  430,  434, 1008,  434,  423, 1009,
      429,  429,  429,  431,  431,  431,  435,  431,  435,  431,
     1011,  436,  436,  436, 1012,  436,  434,  436,  439,  439,
      439,  440,  440,  440,  449,  440,  449,  440, 1013,  430,
      439,  439,  439,  435,  441,  441,  441,  452,  452,  452,
      453,  453,  453,  459,  459,  459,  462,  462,  462,  463,
      463,  463, 1014, 1015,  453,  464,  464,  464, 1016, 1017,
      462,  467,  467,  467,  468,  468,  468, 1018, 1019,  464,
      475,  475,  475, 1020, 1021,  467,  478,  478,  478,  479,

      479,  479,  464,  481,  481,  481,  502,  514,  502,  514,
      478,  515,  516,  515,  516,  517, 1023,  517,  518,  518,
      518,  519,  520,  519,  520, 1024,  527,  521,  527,  521,
      518,  518,  518,  522,  522,  522, 1027, 1028,  517,  525,
      525,  525,  526,  516,  526,  522,  522,  522, 1029,  527,
      544,  544,  544,  515,  514,  521, 1030,  519,  523,  523,
      523,  556,  523,  556,  523,  524,  524,  524,  669,  520,
      669,  528,  528,  528,  552,  552,  552,  524,  524,  524,
     1031, 1032,  526,  528,  528,  528,  529,  529,  529,  604,
      529,  604,  529,  543,  543,  543,  553,  553,  553,  554,

      554,  554,  558,  558,  558, 1033,  605,  543,  605, 1034,
      553,  566,  566,  566,  567,  567,  567,  576,  576,  576,
      604,  606,  684,  606,  684,  566, 1038, 1039,  576,  603,
      603,  603, 1040, 1043,  576,  605,  607,  607,  607, 1044,
     1045,  603,  603,  603,  609,  730,  609,  730,  607,  607,
      607, 1046,  608,  608,  608,  606,  608, 1047,  608,  610,
      610,  610, 1048,  609,  611,  616,  611,  616,  617,  611,
      617,  610,  610,  610,  611,  615,  615,  615, 1049,  611,
      611,  751,  611,  751, 1050,  611,  612,  612,  612,  694,
      612,  694,  612,  631,  631,  631,  618,  618,  618,  619,

      619,  619,  617,  619,  695,  619,  695,  616,  618,  618,
      618,  621,  621,  621,  625,  625,  625, 1051,  626,  626,
      626, 1052,  632,  632,  632,  621,  694, 1054,  625,  626,
      633,  633,  633, 1057,  695,  626,  632,  640,  640,  640,
      646,  646,  646, 1060,  633,  649,  649,  649,  653,  653,
      653,  654,  654,  654,  646,  692,  692,  692,  696,  649,
      696,  700,  653,  700,  705, 1061,  705,  692,  692,  692,
     1062,  649,  693,  693,  693, 1063,  693,  649,  693,  646,
      697,  697,  697,  703,  697,  703,  697,  704,  705,  704,
      701,  701,  701,  702,  702,  702,  706,  702,  706,  702,

     1064,  696,  701,  701,  701, 1065,  705,  707,  700,  707,
      708,  709,  708,  709,  710,  814,  710,  814, 1066,  706,
      703,  811,  707,  811,  704,  711,  711,  711, 1067,  711,
      709,  711,  807,  708,  807, 1068,  706,  715,  715,  715,
      716,  716,  716, 1098,  707,  721,  721,  721,  722,  722,
      722,  715,  732,  732,  732,  814,  807,  710,  811,  721,
      733,  733,  733,  734,  734,  734,  732,  735,  735,  735,
      745,  745,  745,  746,  746,  746, 1099,  734,  747,  747,
      747,  748,  748,  748,  745, 1102, 1103,  746,  752,  752,
      752, 1104,  747,  753,  753,  753,  759,  759,  759,  760,

      760,  760,  752,  796,  796,  796,  799,  796,  799,  796,
      800, 1105,  800,  760,  801,  802,  801,  802,  803,  803,
      803,  806,  803,  806,  803,  809,  808,  809,  808,  810,
      812,  810,  812,  813,  815,  813,  815,  816,  899,  816,
      899,  801,  799,  818,  818,  818, 1106, 1107,  812,  823,
      823,  823,  800,  802,  901,  809,  901,  806,  808,  834,
      834,  834, 1108,  901,  816,  899, 1109,  813,  835,  835,
      835,  810,  845,  845,  845,  846,  846,  846,  847,  847,
      847,  815,  848,  848,  848, 1111,  845,  849,  849,  849,
     1116, 1120,  847,  854,  854,  854,  860,  860,  860,  861,

      861,  861,  862,  862,  862,  896,  896,  896, 1121, 1122,
      860,  897,  897,  897, 1123, 1124,  862,  896,  896,  896,
      898,  898,  898,  897,  897,  897,  900,  900,  900,  902,
      902,  902,  898,  898,  898,  903, 1125,  903,  900,  900,
      900,  902,  902,  902,  904,  905,  904,  905,  907, 1130,
      907,  906,  906,  906, 1090,  909, 1090,  909, 1131,  908,
      908,  908,  903,  906,  906,  906, 1134, 1002,  902, 1002,
      905,  908,  908,  908,  904,  910,  910,  910, 1090,  900,
      930,  930,  930,  935,  935,  935, 1135,  910,  910,  910,
     1002, 1136,  907,  909,  930,  936,  936,  936,  942,  942,

      942, 1137,  908,  946,  946,  946,  947,  947,  947,  948,
      948,  948,  942,  980,  980,  980, 1138,  981,  981,  981,
      947,  981,  989,  981,  989,  980,  980,  980,  982,  982,
      982,  983,  983,  983,  984,  984,  984,  988,  988,  988,
      982,  982,  982,  992,  992,  992,  984,  984,  984,  985,
      985,  985,  994,  985,  994,  985,  986,  986,  986,  987,
      987,  987, 1139, 1140,  989,  991,  991,  991,  986,  986,
      986,  987,  987,  987,  990, 1141,  990,  991,  991,  991,
      990,  993,  995,  993,  995,  996, 1142,  996,  997,  997,
      997, 1144,  994,  998,  998,  998, 1145,  999,  995,  999,

      997,  997,  997, 1000, 1000, 1000,  993, 1001, 1001, 1001,
     1146, 1003,  996, 1003, 1132, 1000, 1000, 1000, 1004, 1004,
     1004, 1132, 1147,  995,  999, 1148, 1006, 1006, 1006, 1151,
     1004, 1004, 1004, 1005, 1005, 1005, 1152, 1005, 1003, 1005,
     1006, 1010, 1010, 1010, 1022, 1022, 1022, 1025, 1025, 1025,
     1026, 1026, 1026, 1173, 1080, 1010, 1080, 1176, 1022, 1177,
     1173, 1025, 1035, 1035, 1035, 1036, 1036, 1036, 1037, 1037,
     1037, 1041, 1041, 1041, 1178, 1079, 1035, 1079, 1179, 1036,
     1069, 1069, 1069, 1082, 1069, 1082, 1069, 1072, 1072, 1072,
     1073, 1073, 1073, 1180, 1073, 1080, 1073, 1076, 1076, 1076,

     1077, 1077, 1077, 1084, 1077, 1084, 1077, 1181, 1182, 1076,
     1076, 1076, 1078, 1078, 1078, 1079, 1081, 1081, 1081, 1083,
     1086, 1083, 1086, 1183, 1083, 1082, 1084, 1186, 1197, 1085,
     1085, 1085, 1198, 1199, 1083, 1087, 1087, 1087, 1200, 1201,
     1083, 1085, 1085, 1085, 1088, 1207, 1088, 1089, 1089, 1089,
     1091, 1091, 1091, 1092, 1092, 1092, 1158, 1092, 1158, 1092,
     1208, 1086, 1091, 1091, 1091, 1095, 1095, 1095, 1096, 1096,
     1096, 1097, 1097, 1097, 1100, 1100, 1100, 1209, 1210, 1095,
     1101, 1101, 1101, 1211, 1088, 1097, 1212, 1158, 1100, 1110,
     1110, 1110, 1112, 1112, 1112, 1113, 1113, 1113, 1114, 1114,

     1114, 1213, 1214, 1110, 1215, 1156, 1112, 1156, 1216, 1113,
     1115, 1115, 1115, 1117, 1117, 1117, 1118, 1118, 1118, 1119,
     1119, 1119, 1217, 1218, 1115, 1126, 1126, 1126, 1156, 1162,
     1118, 1162, 1219, 1119, 1127, 1127, 1127, 1220, 1221, 1126,
     1128, 1128, 1128, 1129, 1129, 1129, 1153, 1153, 1153, 1159,
     1153, 1159, 1153, 1157, 1157, 1157, 1160, 1129, 1160, 1161,
     1162, 1161, 1163, 1163, 1163, 1157, 1157, 1157, 1164, 1164,
     1164, 1165, 1222, 1165, 1163, 1163, 1163, 1166, 1223, 1166,
     1160, 1167, 1161, 1167, 1224, 1226, 1159, 1168, 1168, 1168,
     1244, 1230, 1166, 1230, 1160, 1245, 1129, 1248, 1249, 1168,

     1168, 1168, 1169, 1169, 1169, 1238, 1169, 1238, 1169, 1170,
     1170, 1170, 1165, 1250, 1251, 1167, 1171, 1171, 1171, 1172,
     1172, 1172, 1174, 1174, 1174, 1175, 1175, 1175, 1252, 1253,
     1171, 1184, 1184, 1184, 1254, 1230, 1174, 1185, 1185, 1185,
     1187, 1187, 1187, 1238, 1255, 1184, 1188, 1188, 1188, 1189,
     1189, 1189, 1257, 1264, 1187, 1190, 1190, 1190, 1191, 1191,
     1191, 1192, 1192, 1192, 1193, 1193, 1193, 1265, 1266, 1190,
     1194, 1194, 1194, 1267, 1232, 1192, 1232, 1268, 1193, 1195,
     1195, 1195, 1196, 1196, 1196, 1202, 1202, 1202, 1203, 1203,
     1203, 1275, 1276, 1195, 1204, 1204, 1204, 1277, 1278, 1202,

     1205, 1205, 1205, 1206, 1206, 1206, 1232, 1227, 1204, 1227,
     1228, 1228, 1228, 1229, 1229, 1229, 1231, 1206, 1231, 1233,
     1279, 1233, 1228, 1228, 1228, 1234, 1235, 1234, 1235, 1236,
     1236, 1236, 1237, 1239, 1237, 1239, 1280, 1281, 1227, 1240,
     1240, 1240, 1282, 1240, 1283, 1240, 1243, 1243, 1243, 1246,
     1246, 1246, 1231, 1247, 1247, 1247, 1256, 1256, 1256, 1237,
     1239, 1233, 1284, 1246, 1285, 1234, 1235, 1258, 1258, 1258,
     1259, 1259, 1259, 1260, 1260, 1260, 1261, 1261, 1261, 1262,
     1262, 1262, 1263, 1263, 1263, 1286, 1287, 1260, 1269, 1269,
     1269, 1270, 1270, 1270, 1271, 1271, 1271, 1272, 1272, 1272,

     1288, 1290, 1269, 1273, 1273, 1273, 1274, 1274, 1274, 1291,
     1292, 1272, 1293, 1304, 1293, 1294, 1294, 1294, 1305, 1295,
     1274, 1295, 1296, 1297, 1296, 1297, 1298, 1299, 1298, 1299,
     1300, 1301, 1300, 1301, 1302, 1307, 1302, 1303, 1308, 1303,
     1306, 1306, 1306, 1309, 1310, 1311, 1295, 1312, 1293, 1313,
     1297, 1314, 1315, 1316, 1316, 1316, 1317, 1298, 1299, 1318,
     1319, 1319, 1319, 1296, 1320, 1321, 1322, 1322, 1322, 1326,
     1327, 1300, 1301, 1328, 1319, 1329, 1302, 1330, 1303, 1323,
     1323, 1323, 1324, 1324, 1324, 1325, 1325, 1325, 1331, 1332,
     1333, 1334, 1337, 1338, 1339, 1340, 1324, 1341, 1342, 1343,

     1353, 1343, 1344, 1345, 1344, 1345, 1332, 1346, 1354, 1346,
     1347, 1348, 1347, 1348, 1349, 1349, 1349, 1350, 1350, 1350,
     1351, 1355, 1351, 1352, 1352, 1352, 1349, 1349, 1349, 1350,
     1350, 1350, 1346, 1356, 1348, 1352, 1352, 1352, 1357, 1358,
     1359, 1343, 1360, 1344, 1363, 1345, 1364, 1347, 1361, 1361,
     1361, 1351, 1362, 1362, 1362, 1365, 1358, 1366, 1366, 1366,
     1368, 1369, 1361, 1367, 1367, 1367, 1362, 1370, 1370, 1370,
     1371, 1366, 1372, 1374, 1375, 1377, 1378, 1379, 1380, 1381,
     1382, 1384, 1385, 1386, 1387, 1400, 1387, 1388, 1388, 1388,
     1389, 1390, 1389, 1390, 1392, 1391, 1392, 1391, 1402, 1388,

     1388, 1388, 1393, 1393, 1393, 1394, 1394, 1394, 1395, 1395,
     1395, 1396, 1396, 1396, 1393, 1393, 1393, 1397, 1392, 1397,
     1395, 1395, 1395, 1403, 1405, 1387, 1398, 1398, 1398, 1406,
     1389, 1391, 1407, 1390, 1399, 1399, 1399, 1408, 1398, 1398,
     1398, 1401, 1401, 1401, 1404, 1404, 1404, 1409, 1409, 1409,
     1410, 1410, 1410, 1413, 1397, 1401, 1414, 1417, 1404, 1418,
     1419, 1409, 1411, 1411, 1411, 1412, 1412, 1412, 1415, 1415,
     1415, 1416, 1416, 1416, 1420, 1422, 1411, 1423, 1424, 1425,
     1426, 1427, 1415, 1428, 1430, 1431, 1432, 1432, 1432, 1433,
     1433, 1433, 1434, 1434, 1434, 1435, 1443, 1435, 1432, 1432,

     1432, 1433, 1433, 1433, 1436, 1437, 1436, 1437, 1438, 1447,
     1438, 1439, 1439, 1439, 1440, 1440, 1440, 1441, 1435, 1441,
     1442, 1442, 1442, 1444, 1444, 1444, 1445, 1445, 1445, 1446,
     1446, 1446, 1449, 1449, 1449, 1436, 1450, 1444, 1448, 1448,
     1448, 1451, 1438, 1446, 1452, 1453, 1437, 1454, 1454, 1454,
     1456, 1457, 1448, 1441, 1455, 1455, 1455, 1458, 1458, 1458,
     1459, 1459, 1459, 1460, 1460, 1460, 1461, 1462, 1464, 1465,
     1466, 1458, 1467, 1468, 1469, 1470, 1472, 1460, 1473, 1473,
     1473, 1474, 1474, 1474, 1475, 1475, 1475, 1476, 1485, 1476,
     1473, 1473, 1473, 1477, 1487, 1477, 1478, 1478, 1478, 1479,

     1480, 1479, 1480, 1481, 1481, 1481, 1488, 1489, 1478, 1478,
     1478, 1482, 1482, 1482, 1483, 1483, 1483, 1481, 1476, 1484,
     1484, 1484, 1486, 1486, 1486, 1490, 1479, 1491, 1483, 1492,
     1493, 1493, 1493, 1494, 1494, 1494, 1497, 1477, 1495, 1495,
     1495, 1480, 1496, 1496, 1496, 1498, 1499, 1494, 1500, 1501,
     1502, 1503, 1504, 1505, 1516, 1517, 1496, 1506, 1506, 1506,
     1507, 1508, 1507, 1508, 1509, 1509, 1509, 1510, 1510, 1510,
     1511, 1518, 1511, 1513, 1513, 1513, 1509, 1509, 1509, 1512,
     1512, 1512, 1514, 1514, 1514, 1511, 1519, 1513, 1508, 1520,
     1521, 1512, 1512, 1512, 1522, 1526, 1507, 1515, 1515, 1515,

     1523, 1523, 1523, 1524, 1524, 1524, 1525, 1525, 1525, 1527,
     1528, 1529, 1530, 1531, 1532, 1533, 1534, 1524, 1535, 1536,
     1535, 1536, 1537, 1537, 1537, 1538, 1542, 1538, 1539, 1539,
     1539, 1540, 1540, 1540, 1536, 1541, 1541, 1541, 1543, 1544,
     1539, 1539, 1539, 1545, 1545, 1545, 1546, 1547, 1548, 1549,
     1549, 1549, 1550, 1551, 1554, 1556, 1557, 1545, 1558, 1559,
     1535, 1559, 1560, 1538, 1560, 1561, 1563, 1561, 1562, 1562,
     1562, 1568, 1570, 1545, 1559, 1564, 1564, 1564, 1565, 1565,
     1565, 1566, 1566, 1566, 1567, 1567, 1567, 1571, 1572, 1564,
     1574, 1575, 1565, 1577, 1587, 1566, 1569, 1569, 1569, 1578,

     1560, 1578, 1579, 1580, 1579, 1580, 1590, 1561, 1592, 1593,
     1569, 1581, 1581, 1581, 1582, 1582, 1582, 1583, 1583, 1583,
     1594, 1584, 1584, 1584, 1595, 1581, 1603, 1605, 1582, 1585,
     1585, 1585, 1608, 1609, 1580, 1584, 1610, 1578, 1586, 1586,
     1586, 1588, 1588, 1588, 1579, 1589, 1589, 1589, 1591, 1591,
     1591, 1596, 1597, 1596, 1597, 1588, 1611, 1598, 1613, 1598,
     1613, 1616, 1591, 1599, 1599, 1599, 1600, 1600, 1600, 1601,
     1601, 1601, 1602, 1602, 1602, 1617, 1619, 1599, 1604, 1604,
     1604, 1620, 1621, 1597, 1606, 1606, 1606, 1607, 1607, 1607,
     1612, 1622, 1612, 1596, 1598, 1613, 1626, 1614, 1606, 1614,

     1615, 1615, 1615, 1618, 1618, 1618, 1623, 1627, 1623, 1624,
     1625, 1624, 1625, 1628, 1630, 1633, 1632, 1633, 1632, 1636,
     1638, 1612, 1634, 1634, 1634, 1635, 1635, 1635, 1637, 1637,
     1637, 1645, 1648, 1614, 1634, 1634, 1634, 1654, 1639, 1635,
     1639, 1656, 1637, 1623, 1660, 1624, 1640, 1640, 1640,  889,
      888, 1625, 1632, 1641, 1641, 1641, 1633,  887, 1640, 1640,
     1640, 1642, 1642, 1642,  886, 1641, 1641, 1641, 1643, 1643,
     1643, 1644, 1644, 1644, 1646, 1646, 1646,  885,  884, 1639,
      883,  881, 1643, 1647, 1647, 1647,  880,  879, 1646, 1649,
     1649, 1649, 1650, 1650, 1650, 1651, 1651, 1651, 1652, 1652,

     1652, 1649, 1649, 1649, 1650, 1650, 1650, 1653, 1653, 1653,
     1655, 1655, 1655, 1657, 1657, 1657, 1658, 1658, 1658, 1659,
     1659, 1659, 1662, 1662, 1662, 1657, 1657, 1657, 1663, 1663,
     1663, 1664, 1664, 1664, 1665, 1665, 1665, 1666, 1666, 1666,
      878,  877, 1663,  876,  875, 1664, 1668, 1668, 1668, 1668,
     1668, 1669, 1669, 1669, 1669, 1669, 1670, 1670, 1670, 1670,
     1670, 1671, 1671, 1671, 1671, 1671, 1672, 1672, 1672, 1672,
     1672, 1673, 1673, 1673, 1673, 1673, 1674, 1674, 1674, 1674,
     1674, 1675,  874,  873, 1675, 1676, 1676, 1676, 1676, 1677,
     1677,  872, 1677, 1677, 1678, 1678, 1678,  871, 1678,  870,

      869,  868,  867,  866,  865,  864,  863,  859,  858,  857,
      856,  855,  853,  852,  851,  850,  844,  843,  842,  841,
      840,  839,  838,  837,  836,  833,  832,  831,  830,  829,
      828,  827,  826,  825,  824,  822,  821,  820,  819,  817,
      794,  793,  792,  791,  790,  789,  788,  787,  786,  785,
      784,  783,  782,  781,  780,  779,  778,  777,  776,  775,
      774,  773,  772,  771,  770,  769,  768,  767,  766,  765,
      764,  763,  762,  761,  758,  757,  756,  755,  754,  750,
      749,  744,  743,  742,  741,  740,  739,  738,  737,  736,
      731,  729,  728,  727,  726,  725,  724,  723,  720,  719,

      718,  717,  714,  691,  689,  688,  687,  686,  685,  683,
      682,  679,  678,  677,  676,  675,  674,  673,  672,  671,
      670,  668,  667,  666,  665,  664,  663,  662,  661,  660,
      659,  658,  657,  656,  655,  652,  651,  650,  648,  647,
      645,  644,  643,  642,  641,  639,  638,  637,  636,  635,
      634,  630,  629,  628,  627,  623,  622,  620,  602,  601,
      600,  599,  598,  596,  595,  594,  593,  592,  591,  590,
      589,  588,  587,  586,  585,  584,  583,  580,  579,  578,
      577,  573,  572,  570,  569,  568,  565,  563,  562,  561,
      560,  559,  557,  555,  551,  550,  549,  548,  546,  545,

      542,  541,  540,  539,  538,  537,  536,  535,  534,  533,
      532,  513,  512,  510,  508,  507,  506,  505,  504,  503,
      501,  500,  499,  498,  497,  495,  494,  493,  492,  491,
      490,  489,  488,  487,  486,  485,  484,  483,  482,  480,
      477,  476,  474,  473,  472,  471,  470,  469,  466,  465,
      461,  460,  458,  457,  456,  455,  454,  451,  450,  448,
      447,  446,  445,  444,  443,  442,  413,  412,  411,  410,
      409,  408,  407,  406,  405,  404,  403,  402,  401,  398,
      397,  396,  395,  394,  393,  392,  390,  389,  387,  386,
      385,  384,  383,  382,  381,  380,  377,  375,  374,  371,

      370,  368,  366,  365,  364,  362,  361,  358,  357,  356,
      355,  354,  353,  350,  349,  348,  347,  346,  345,  344,
      343,  342,  341,  315,  314,  312,  311,  310,  309,  307,
      306,  305,  304,  303,  301,  300,  299,  298,  297,  296,
      295,  294,  293,  292,  291,  290,  289,  288,  287,  286,
      285,  284,  282,  281,  280,  278,  277,  276,  275,  274,
      273,  272,  271,  270,  269,  266,  265,  263,  262,  261,
      260,  259,  258,  257,  256,  231,  230,  229,  228,  227,
      226,  225,  224,  223,  222,  221,  220,  219,  218,  217,
      216,  214,  213,  212,  211,  210,  209,  208,  207,  206,

      205,  204,  202,  201,  200,  199,  197,  196,  195,  193,
      192,  191,  190,  189,  188,  187,  186,  185,  183,  182,
      181,  180,  179,  177,  153,  152,  151,  150,  148,  147,
      146,  144,  143,  142,  141,  140,  139,  138,  137,  136,
      134,  133,  132,  131,  130,  129,  128,  127,  125,  121,
      120,  119,  118,  117,  115,  114,  111,   92,   86,   85,
       84,   82,   78,   77,   76,   75,   74,   72,   69,   41,
       38,   23,   21,   17,    8,    7,    6,    5,    4,    3,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,

     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[190] =
    {   0,
1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 
    0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
/* $Id$ */
/** @file parseosol.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin, 
 * @version 1.1, 10/07/2008
 * @since   OS1.1
 *
 * \remarks
 * Copyright (C) 2005-2008, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 17 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSoLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"


//#define PARSERDEBUG
#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;








#line 102 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 1889 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osollex_init (yyscan_t* scanner);

int osollex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 112 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"


 
#line 2144 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1668 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3481 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 115 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 119 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 120 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 121 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 122 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 124 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 138 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 140 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 141 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 142 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 143 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 144 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 145 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 146 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 147 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 148 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 149 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 150 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 151 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 152 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 153 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 154 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 155 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 156 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 157 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 158 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 160 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 161 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 162 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 163 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 164 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 165 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 166 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 167 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 168 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 169 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 170 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 171 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 172 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 173 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 174 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 175 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 176 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 177 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 178 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 179 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 180 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 181 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 182 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 183 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 184 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 185 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 186 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 187 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 189 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBDUALVALUEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 190 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBDUALVALUEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 191 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBDUALVALUEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 192 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBDUALVALUEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 195 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 196 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 198 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 199 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 200 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 201 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 202 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 203 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 204 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 205 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 206 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 207 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 208 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 210 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 211 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 212 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 213 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 214 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 215 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 216 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 217 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 218 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 219 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 220 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 221 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 222 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 223 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 224 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 225 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 226 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 227 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 228 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 229 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 230 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 231 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 232 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 233 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 235 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 236 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 237 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZESTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 238 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSIZEEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 239 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 240 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 241 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 242 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 244 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 245 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 247 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 248 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 249 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMESTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 250 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMEEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 251 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 252 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 253 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 254 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 255 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 256 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 257 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 258 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 259 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 260 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 261 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 262 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 263 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 264 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 265 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 266 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 267 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 268 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 269 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 270 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 271 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 272 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 273 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 274 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 275 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 276 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 277 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 278 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 279 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 280 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 283 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 284 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 285 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 286 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 287 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 288 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 289 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 290 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 291 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 292 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 293 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 294 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 295 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 296 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 297 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 298 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 299 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 300 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 301 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 302 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 303 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 304 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 305 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 306 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 307 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 308 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 309 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 310 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 311 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 312 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 313 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 314 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 315 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 316 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 317 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 318 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 321 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; /*yylval->sval = strdup( yytext);*/   yylval->sval = yytext; yyextra->errorText = yylval->sval;  return (ELEMENTTEXT); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 323 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 178:
#line 325 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 325 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 326 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 328 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 182:
#line 330 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 330 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 331 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 334 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 335 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;  return(ATTRIBUTETEXT);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 336 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 339 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
{  

	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 352 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"
ECHO;
	YY_BREAK
#line 3385 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osolrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1668 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1668 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1667);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osollex_init_extra has the same functionality as osollex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osolalloc in
 * the yyextra field.
 */

int osollex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osolset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osolset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 352 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosol.l"





