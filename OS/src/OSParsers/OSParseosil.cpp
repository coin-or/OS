#line 2 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.cpp"

#line 4 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osilrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osillex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osilrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osilrestart (FILE *input_file ,yyscan_t yyscanner );
void osil_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osil_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osil_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osilpop_buffer_state (yyscan_t yyscanner );

static void osilensure_buffer_stack (yyscan_t yyscanner );
static void osil_load_buffer_state (yyscan_t yyscanner );
static void osil_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osil_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osil_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osil_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osilalloc (yy_size_t ,yyscan_t yyscanner );
void *osilrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osilfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osil_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osilensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osilwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 116
#define YY_END_OF_BUFFER 117
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[776] =
    {   0,
        0,    0,  113,  113,  114,  114,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  117,  115,    1,    1,
        1,    2,  115,    5,  115,    4,  115,    3,  115,  113,
      116,  114,  106,  107,  106,  110,  111,  110,    0,    0,
        0,    3,    0,    0,    0,    0,    0,    0,    0,    5,
        4,    0,    5,    0,    6,    0,    0,  109,   79,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  113,  114,    0,  112,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    5,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   81,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   35,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    5,  108,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  105,    0,   80,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       99,    0,    0,    0,    0,    0,   65,    0,    0,   49,
        0,    0,    0,    0,    0,  101,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   97,    0,    0,    0,
       21,   22,    0,   13,    0,    0,    0,    0,    0,    0,
        0,   80,    0,   82,    0,    0,    0,    0,    0,    0,
        0,    0,   66,    0,    0,    0,   50,    0,    0,    0,
        0,   36,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   61,    0,
        0,    0,   57,    0,    0,   63,    0,   59,   65,    0,
       49,    0,   67,    0,   69,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   55,    0,    0,    0,
       71,    0,    0,    0,   16,    0,   13,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   82,    0,   62,    0,
        0,  100,    0,    0,   58,    0,    0,   64,    0,   60,
       66,    0,    0,   50,    0,   68,    0,   70,    0,    0,
       36,    0,    0,    0,  102,    0,    0,    0,    0,    0,
        0,    0,    0,   56,    0,    0,    0,   72,    0,    0,
       98,    0,   61,    0,    0,   57,    0,   63,   59,    0,
       67,   69,    0,    0,    0,    0,    0,    0,   41,    0,
        0,   31,    0,   55,    0,   89,   71,    0,    0,    0,
       16,    0,    0,    0,    0,   25,   26,    0,    0,   20,
        0,    0,   23,   24,    0,   17,   62,    0,  100,    0,

       58,    0,   64,   60,    0,    0,   68,   70,    0,    0,
        0,    0,  102,    0,    0,   27,    0,   42,    0,    0,
        0,    0,   56,    0,    0,   72,    0,    0,   98,    0,
        0,    0,    0,    0,    0,   43,    0,    0,   77,    0,
       41,    0,   47,    0,    0,    0,   87,    0,    0,   37,
        0,    0,    0,   14,    0,   15,    0,   20,    0,   17,
        0,    0,    0,    0,    0,    0,   44,    0,    0,    0,
        0,   27,   42,    0,   48,    0,    0,   32,    0,    0,
        0,   90,    0,    0,    0,   38,    0,    0,    0,    0,
       39,    0,   43,    0,   45,    0,    0,   47,    0,    0,

        0,   53,    0,    0,   37,    0,    0,   19,   14,   15,
        0,    0,    0,    0,    0,   40,    0,    0,   44,    0,
       46,    0,    0,   78,    0,   48,    0,   32,    0,    0,
       54,    0,   90,    0,   88,    0,   38,    0,    0,   73,
        0,   39,  103,   45,    0,    0,    0,   75,    0,   53,
        0,    0,   83,   19,    0,    0,    0,    0,    0,    0,
        0,   18,    0,   74,    0,   40,    0,    0,   46,    0,
       78,    0,    0,   76,    0,   54,    0,   88,    0,    0,
       73,    0,    0,    0,   75,    0,    0,    0,   91,    0,
        0,    0,    0,    0,    0,   18,   74,    0,    0,    0,

      104,    0,    0,   76,    0,    0,    0,    0,   84,    0,
        0,    0,   95,    0,    0,   85,    0,    0,    0,    0,
        0,    0,    0,    0,  104,    0,    0,    0,    0,    0,
       84,    0,   92,   93,    0,    0,    0,   51,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   96,    0,
        0,   52,    0,   86,   92,    0,    0,   51,    0,    0,
        0,    0,    0,    0,    0,   94,    0,    0,   96,    0,
       52,   86,    0,    0,    0,    0,    0,    0,    0,    0,
       94,    0,   28,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   12,    0,   28,    0,    0,    0,    0,    0,

        0,    0,    0,   12,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    7,    0,    0,    0,    0,    0,    0,
        0,    9,    0,    7,    0,    0,    0,    0,    0,    8,
        0,    9,    0,    0,    0,   33,    0,    8,    0,    0,
        0,    0,   29,    0,    0,    0,   34,    0,    0,    0,
       10,   34,    0,   30,    0,   10,   30,    0,    0,    0,
        0,    0,   11,   11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    1,    1,    1,    7,    1,
        1,    1,    8,    1,    9,   10,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    1,    1,   13,
       14,   15,   16,    1,    1,    1,   17,   18,   19,   20,
        1,    1,   21,    1,    1,    1,    1,   22,   23,   24,
       25,   26,   27,   28,    1,   29,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   30,   31,   32,   33,

       34,   35,   36,   37,   38,   39,    1,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,    1,   55,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[56] =
    {   0,
        1,    1,    1,    1,    1,    2,    3,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[784] =
    {   0,
        0,   54, 1668, 1667, 1665, 1664,    0,    0,    0,    0,
        0,    0,    5,   13,    2,   14, 1670, 1675,  108,    0,
        0, 1675,   13,    7, 1654,   17,  154, 1675, 1646,    0,
     1675,    0, 1675, 1675, 1658, 1675, 1675, 1651,    0, 1650,
       15, 1675, 1621, 1620, 1629,    3, 1613, 1607, 1629,   16,
       28, 1636,   20,   34, 1675, 1648,  186, 1675, 1675, 1635,
       13, 1612, 1616,   22,   35, 1611,    7,   38, 1621,   33,
       31,   44, 1613, 1620, 1629,    0,    0, 1633, 1675, 1613,
     1600,   81, 1604, 1603, 1613, 1598, 1601, 1628, 1627, 1629,
       98, 1616,   57, 1593, 1597,   44,   56, 1592,   56,   65,

       73,   82,   75,   89, 1595, 1602, 1675, 1584, 1590,   84,
     1579, 1593, 1583,  114, 1578,  139, 1573, 1582, 1587, 1675,
     1580, 1580, 1581, 1570, 1567, 1574, 1582, 1585, 1572, 1564,
     1582, 1570, 1569, 1563, 1675, 1675, 1573, 1569,  149,  165,
      209, 1572, 1574, 1558, 1569, 1553, 1675,  145,  172,  178,
     1554, 1560,   88, 1549, 1563, 1553,  236,    1,  239, 1544,
     1553, 1558,  242, 1551, 1551, 1552, 1552, 1540, 1537, 1544,
     1552, 1555, 1542, 1534, 1552, 1540, 1539, 1533,  245, 1560,
     1530,  259, 1538,  262,  265,  268,  187, 1541,  282,  204,
      285,  288, 1544, 1533, 1541, 1537, 1523, 1535, 1535, 1521,

     1533,  291, 1535, 1528,  305, 1529, 1524,  308, 1507,  311,
     1675, 1675,  321,  324, 1518, 1508,  327, 1524, 1509,  330,
     1522,  336,  343,  346,  349, 1537,  352,  357, 1516,  366,
      371,  374,  380, 1505, 1518,  388,  391,  394,  398, 1521,
      402,  408, 1510, 1518,  412, 1508, 1500, 1512, 1512, 1498,
     1510,  416, 1512, 1505,  419, 1506,  422,  426,  436, 1501,
     1490,  440,  446, 1504,  449,  454,  459,  463,  466, 1490,
      469,  473,  476,  479,  482, 1488, 1486, 1495, 1498, 1499,
      487, 1484, 1480, 1487, 1481,  493,  496, 1480, 1491,  501,
      507,   89, 1494,  510,  515, 1480,  518, 1488, 1478,  523,

      526, 1474,  532,  536,  541,  552,  555,  558,  561, 1481,
      565,  568, 1470,  572,  575, 1484,  579,  582,  586,  589,
      593, 1486, 1469,  596,  600,  603,  606,  609, 1467, 1465,
      614, 1474, 1477,  620,  623, 1478,  626,  629, 1463, 1459,
     1466, 1460,  634,  643, 1459, 1470,  648,  651,   97,  654,
      657, 1473,  662, 1467, 1452,  668, 1443,  671,  674, 1426,
      677,  680,  683, 1427, 1405, 1400, 1382,  686,  689,  692,
     1396, 1675, 1371,  700, 1366, 1338,  706, 1341,  709, 1351,
      712, 1339,  715,  718,  724, 1675, 1675, 1340,  731,  734,
     1329,  737, 1675, 1675,  744,  747,  750, 1299,  753, 1287,

      757, 1294,  760,  763, 1269, 1260,  766,  769,  772, 1268,
     1252, 1247,  775, 1240,  778,  781,  786,  792,  795, 1248,
      800, 1249,  803, 1240,  809,  814, 1217,  817,  823, 1228,
     1222, 1226,  826, 1224,  831,  834,  840, 1206, 1675, 1201,
      845,  848,  855, 1186, 1184,  858, 1675, 1190,  862,  865,
     1186,  868,  872,  876,  885,  888, 1190,  891, 1165,  894,
     1165, 1116,  898, 1097, 1098,  901,  904,  907, 1086,  915,
     1068,  921,  924,  929,  932, 1057,  935,  938, 1052,  943,
      949,  952,  957, 1045,  963,  971, 1045,  977, 1042,  980,
      983, 1026,  986,  994,  997, 1035, 1013, 1000, 1003, 1010,

     1008, 1011, 1003, 1014, 1017, 1007, 1022, 1025, 1028, 1031,
     1020, 1036, 1049,  984, 1052, 1055,  983,  976, 1058, 1066,
     1069,  978, 1072, 1075,  944, 1080, 1086, 1089,  955, 1092,
     1095,  948, 1100, 1106, 1109,  947, 1112,  942, 1115, 1120,
      929, 1123, 1675, 1129,  924,  934, 1132, 1135,  931, 1138,
      919,  919,  902, 1141,  905,  900,  898,  872,  872,  885,
     1146, 1149, 1152, 1155,  872, 1159,  894, 1162, 1166,  839,
     1169,  849, 1172, 1176,  849, 1179,  811, 1182,  815, 1186,
     1189,  797,  821,  792, 1192,  814,  775,  780, 1675,  772,
      767,  769,  770,  762,  745, 1195, 1200,  738,  712, 1203,

     1206,  706,  676, 1209,  689,  657,  658, 1212, 1217, 1220,
      652,  645, 1675,  625, 1226, 1675,  620,  622,  614,  610,
      606,  602,  592,  586, 1234,  568, 1240,  576, 1243, 1246,
     1249, 1260, 1263, 1675,  570,  518, 1266, 1269,  503,  511,
      510,  495,  497,  493, 1274,  485,  463, 1280, 1283,  472,
     1288, 1294, 1297, 1302, 1305,  455,  458, 1311,  446,  445,
      411,  424,  398,  405, 1314, 1317, 1320,  389, 1323,  398,
     1328, 1334,  398,  373,  377,  354,  349,  337, 1337,  340,
     1340, 1343, 1346,  345,  336,  319,  327,  325,  332,  307,
      305, 1350, 1353,  308, 1357,  289,  283,  272,  284,  263,

      258,  268,  269, 1363,  252,  251,  264,  244,  243,  231,
      259,  229,  247, 1366,  235,  221,  215,  222,  208,  201,
     1369,  218, 1372, 1375,  207,  201,  183,  180, 1385,  177,
     1388, 1391,  171, 1394,  173,  172,  162,  155, 1401, 1404,
      154, 1407,  144,  136,  131, 1675,  130, 1410,  132,  117,
     1414,  115, 1675,  114, 1417, 1420, 1423, 1430,  110, 1434,
     1437, 1440, 1447, 1450,  101, 1453, 1456,   89,   64,   24,
     1461, 1464, 1467, 1470, 1675, 1478, 1481, 1484, 1487, 1490,
     1493, 1496, 1499
    } ;

static yyconst flex_int16_t yy_def[784] =
    {   0,
      776,  776,  777,  777,  778,  778,  779,  779,  779,  779,
      779,  779,  780,  780,  781,  781,  775,  775,  775,   19,
       19,  775,  775,  775,  775,  775,  775,  775,  775,  782,
      775,  783,  775,  775,  775,  775,  775,  775,   19,  775,
       27,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  782,  783,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,    0,  775,  775,  775,  775,  775,
      775,  775,  775
    } ;

static yyconst flex_int16_t yy_nxt[1731] =
    {   0,
      775,   19,   20,   21,   37,   22,   22,   34,   23,   24,
       25,   26,   27,   35,   28,   34,   37,   38,   53,  775,
       29,   35,   50,  775,   51,   54,   50,   53,   51,   38,
      775,   53,   83,   52,   54,   54,  117,   50,   54,   51,
       54,   88,   88,  108,  118,   89,   54,  234,  235,   54,
       54,   84,  109,   54,   22,   19,   20,   21,  127,   22,
       22,   54,   23,   24,   25,   26,   27,  112,   28,  114,
      771,  119,  124,  113,   29,  125,  115,  120,  126,  128,
      121,  129,  139,  139,  139,  160,  122,  151,  130,  155,
      157,  131,  132,  161,  140,  156,  152,  158,  162,  148,

      148,  148,  171,  166,  163,  770,  378,  164,   22,   39,
       39,   39,  149,  165,  427,  186,  186,  186,   40,  167,
       41,  168,   42,  172,  169,  181,  173,  170,  187,  227,
      182,  769,  141,  174,  228,  379,  175,  176,  768,   43,
      189,  189,  189,  428,   44,   45,  148,  148,  148,   46,
      139,  139,  139,  190,   47,   48,  765,   49,   56,  149,
      759,  758,  140,  755,   57,  754,  210,  210,  210,   58,
      211,  212,   59,  222,  222,  222,  753,   60,  752,  223,
      223,  223,  751,   61,  750,   62,   63,   64,  269,  269,
      269,   65,  224,   66,   67,   68,   69,   70,   71,  749,

       72,   73,  747,   74,   91,  271,  271,  271,  746,   92,
      213,  213,  213,  745,  744,   93,  743,   94,   95,   96,
      741,  738,  214,   97,  737,   98,   99,  100,  101,  102,
      103,  215,  104,  105,  736,  106,  216,  232,  232,  232,
      236,  236,  236,  241,  241,  241,  258,  258,  258,  735,
      233,  733,  730,  237,  729,  728,  242,  727,  726,  259,
      262,  262,  262,  265,  265,  265,  267,  267,  267,  186,
      186,  186,  725,  263,  722,  721,  266,  720,  719,  268,
      718,  717,  187,  189,  189,  189,  272,  272,  272,  274,
      274,  274,  286,  286,  286,  716,  190,  715,  714,  273,

      713,  712,  275,  711,  710,  287,  290,  290,  290,  294,
      294,  294,  210,  210,  210,  709,  211,  212,  708,  291,
      707,  295,  213,  213,  213,  297,  297,  297,  300,  300,
      300,  304,  304,  304,  214,  706,  276,  222,  222,  222,
      301,  705,  703,  305,  223,  223,  223,  307,  307,  307,
      308,  308,  308,  311,  311,  311,  702,  224,  314,  314,
      314,  701,  700,  309,  699,  698,  312,  317,  317,  317,
      697,  315,  319,  319,  319,  232,  232,  232,  696,  694,
      318,  321,  321,  321,  691,  320,  690,  689,  233,  236,
      236,  236,  324,  324,  324,  325,  325,  325,  313,  327,

      327,  327,  237,  241,  241,  241,  688,  687,  326,  331,
      331,  331,  328,  334,  334,  334,  242,  343,  343,  343,
      347,  347,  347,  350,  350,  350,  335,  258,  258,  258,
      344,  686,  685,  348,  684,  680,  351,  353,  353,  353,
      259,  262,  262,  262,  679,  336,  329,  356,  356,  356,
      265,  265,  265,  678,  263,  358,  358,  358,  677,  352,
      267,  267,  267,  266,  359,  359,  359,  269,  269,  269,
      271,  271,  271,  268,  272,  272,  272,  361,  361,  361,
      274,  274,  274,  362,  362,  362,  676,  273,  368,  368,
      368,  675,  674,  275,  286,  286,  286,  374,  374,  374,

      673,  369,  290,  290,  290,  670,  668,  287,  377,  377,
      377,  294,  294,  294,  667,  291,  381,  381,  381,  297,
      297,  297,  664,  295,  300,  300,  300,  385,  385,  385,
      663,  386,  387,  389,  389,  389,  301,  304,  304,  304,
      662,  661,  392,  392,  392,  390,  393,  394,  660,  305,
      659,  657,  391,  395,  395,  395,  307,  307,  307,  308,
      308,  308,  397,  397,  397,  396,  311,  311,  311,  399,
      399,  399,  309,  314,  314,  314,  401,  401,  401,  312,
      317,  317,  317,  403,  403,  403,  315,  319,  319,  319,
      404,  404,  404,  318,  321,  321,  321,  324,  324,  324,

      320,  325,  325,  325,  407,  407,  407,  327,  327,  327,
      408,  408,  408,  656,  326,  331,  331,  331,  650,  647,
      328,  334,  334,  334,  413,  413,  413,  415,  415,  415,
      417,  417,  417,  646,  335,  343,  343,  343,  645,  644,
      416,  643,  642,  418,  423,  423,  423,  641,  344,  347,
      347,  347,  426,  426,  426,  350,  350,  350,  429,  429,
      429,  640,  348,  353,  353,  353,  639,  636,  351,  356,
      356,  356,  358,  358,  358,  359,  359,  359,  361,  361,
      361,  362,  362,  362,  435,  435,  435,  368,  368,  368,
      441,  441,  441,  442,  442,  442,  635,  436,  634,  630,

      369,  374,  374,  374,  629,  628,  443,  377,  377,  377,
      449,  449,  449,  381,  381,  381,  453,  453,  453,  455,
      455,  455,  627,  450,  626,  385,  385,  385,  454,  386,
      387,  456,  389,  389,  389,  458,  458,  458,  392,  392,
      392,  624,  393,  394,  390,  395,  395,  395,  460,  460,
      460,  397,  397,  397,  399,  399,  399,  396,  401,  401,
      401,  403,  403,  403,  404,  404,  404,  407,  407,  407,
      408,  408,  408,  466,  466,  466,  413,  413,  413,  415,
      415,  415,  472,  472,  472,  623,  467,  417,  417,  417,
      622,  621,  416,  473,  473,  473,  474,  474,  474,  620,

      418,  477,  477,  477,  423,  423,  423,  619,  618,  475,
      481,  481,  481,  617,  478,  426,  426,  426,  485,  485,
      485,  616,  615,  482,  429,  429,  429,  490,  490,  490,
      614,  486,  435,  435,  435,  493,  493,  493,  613,  612,
      491,  494,  494,  494,  611,  436,  441,  441,  441,  442,
      442,  442,  607,  606,  495,  483,  498,  498,  498,  501,
      501,  501,  443,  449,  449,  449,  505,  505,  505,  507,
      507,  507,  502,  453,  453,  453,  450,  509,  509,  509,
      605,  508,  603,  503,  602,  454,  455,  455,  455,  510,
      510,  510,  458,  458,  458,  460,  460,  460,  456,  515,

      515,  515,  466,  466,  466,  519,  519,  519,  520,  520,
      520,  599,  516,  598,  595,  467,  523,  523,  523,  594,
      593,  521,  472,  472,  472,  473,  473,  473,  592,  524,
      474,  474,  474,  526,  526,  526,  477,  477,  477,  528,
      528,  528,  591,  475,  530,  530,  530,  590,  589,  478,
      481,  481,  481,  533,  533,  533,  588,  531,  534,  534,
      534,  587,  586,  482,  485,  485,  485,  584,  532,  583,
      582,  535,  537,  537,  537,  580,  579,  486,  539,  539,
      539,  490,  490,  490,  542,  542,  542,  493,  493,  493,
      577,  540,  575,  572,  491,  494,  494,  494,  544,  544,

      544,  498,  498,  498,  547,  547,  547,  570,  495,  501,
      501,  501,  550,  550,  550,  568,  567,  548,  505,  505,
      505,  565,  502,  507,  507,  507,  554,  554,  554,  509,
      509,  509,  510,  510,  510,  508,  555,  561,  561,  561,
      553,  556,  557,  552,  558,  551,  559,  549,  560,  562,
      563,  563,  563,  515,  515,  515,  566,  566,  566,  519,
      519,  519,  546,  564,  545,  543,  516,  520,  520,  520,
      569,  569,  569,  523,  523,  523,  571,  571,  571,  541,
      521,  526,  526,  526,  538,  536,  524,  573,  573,  573,
      528,  528,  528,  530,  530,  530,  576,  576,  576,  529,

      574,  533,  533,  533,  527,  525,  531,  534,  534,  534,
      578,  578,  578,  537,  537,  537,  539,  539,  539,  522,
      535,  581,  581,  581,  542,  542,  542,  518,  517,  540,
      544,  544,  544,  547,  547,  547,  585,  585,  585,  550,
      550,  550,  554,  554,  554,  514,  548,  561,  561,  561,
      596,  596,  596,  563,  563,  563,  597,  597,  597,  562,
      566,  566,  566,  600,  600,  600,  564,  569,  569,  569,
      571,  571,  571,  573,  573,  573,  601,  604,  604,  604,
      576,  576,  576,  578,  578,  578,  574,  608,  608,  608,
      581,  581,  581,  585,  585,  585,  596,  596,  596,  513,

      609,  597,  597,  597,  600,  600,  600,  625,  625,  625,
      604,  604,  604,  608,  608,  608,  512,  601,  631,  631,
      631,  632,  632,  632,  511,  506,  609,  637,  637,  637,
      504,  500,  610,  499,  633,  625,  625,  625,  497,  496,
      638,  648,  648,  648,  651,  651,  651,  653,  653,  653,
      631,  631,  631,  492,  649,  489,  488,  652,  487,  484,
      654,  632,  632,  632,  655,  655,  655,  637,  637,  637,
      658,  658,  658,  480,  633,  665,  665,  665,  479,  476,
      638,  648,  648,  648,  669,  669,  669,  471,  666,  651,
      651,  651,  470,  469,  649,  671,  671,  671,  653,  653,

      653,  468,  652,  672,  672,  672,  655,  655,  655,  465,
      464,  654,  658,  658,  658,  665,  665,  665,  681,  681,
      681,  682,  682,  682,  669,  669,  669,  463,  666,  671,
      671,  671,  462,  461,  683,  672,  672,  672,  692,  692,
      692,  681,  681,  681,  682,  682,  682,  695,  695,  695,
      693,  692,  692,  692,  704,  704,  704,  683,  695,  695,
      695,  459,  457,  693,  704,  704,  704,  723,  723,  723,
      731,  731,  731,  723,  723,  723,  734,  734,  734,  724,
      452,  451,  732,  448,  447,  724,  739,  739,  739,  731,
      731,  731,  742,  742,  742,  734,  734,  734,  740,  446,

      445,  732,  739,  739,  739,  748,  748,  748,  742,  742,
      742,  748,  748,  748,  740,  756,  756,  756,  760,  760,
      760,  756,  756,  756,  762,  762,  762,  444,  757,  440,
      761,  763,  763,  763,  757,  760,  760,  760,  766,  766,
      766,  762,  762,  762,  764,  439,  438,  761,  763,  763,
      763,  767,  767,  767,  766,  766,  766,  767,  767,  767,
      437,  764,  772,  772,  772,  772,  772,  772,  774,  774,
      774,  774,  774,  774,  773,  434,  433,  773,   18,   18,
       18,   30,   30,   30,   32,   32,   32,   31,   31,   31,
       33,   33,   33,   36,   36,   36,   76,  432,   76,   77,

       77,  431,  430,  425,  424,  422,  421,  420,  419,  414,
      412,  411,  410,  409,  406,  405,  402,  400,  398,  388,
      384,  383,  382,  380,  376,  375,  373,  372,  371,  370,
      367,  366,  365,  364,  363,  360,  357,  355,  354,  349,
      346,  345,  342,  341,  340,  339,  338,  337,  333,  332,
      330,  323,  322,  316,  310,  306,  303,  302,  299,  298,
      296,  293,  292,  289,  288,  285,  284,  283,  282,  281,
      280,  279,  278,  277,  270,  264,  261,  260,  257,  256,
      255,  254,  253,  252,  251,  250,  249,  248,  247,  246,
      245,  244,  243,  240,  239,  238,  231,  230,  229,  226,

      225,  221,  220,  219,  218,  217,  209,  208,  207,  206,
      205,  204,  203,  202,  201,  200,  199,  198,  197,  196,
      195,  194,  193,  192,  191,  188,  185,  184,  183,  180,
      179,  178,  177,  159,  154,  153,  150,  147,   89,   89,
      146,  145,  144,  143,  142,  138,  137,  136,  135,  134,
      133,  123,  116,  111,  110,  107,   90,   75,   87,   86,
       85,   82,   81,   80,   55,   79,   78,   75,   55,  775,
       31,   31,   31,   31,   17,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775
    } ;

static yyconst flex_int16_t yy_chk[1731] =
    {   0,
        0,    1,    1,    1,   15,    1,    1,   13,    1,    1,
        1,    1,    1,   13,    1,   14,   16,   15,   24,   41,
        1,   14,   23,    0,   23,   24,   26,   50,   26,   16,
       41,   53,   46,   23,   50,   26,   67,   51,   53,   51,
       24,   54,   54,   61,   67,   54,   51,  158,  158,   50,
       26,   46,   61,   53,    1,    2,    2,    2,   71,    2,
        2,   51,    2,    2,    2,    2,    2,   64,    2,   65,
      770,   68,   70,   64,    2,   70,   65,   68,   70,   71,
       68,   72,   82,   82,   82,   99,   68,   93,   72,   96,
       97,   72,   72,   99,   82,   96,   93,   97,  100,   91,

       91,   91,  103,  101,  100,  769,  292,  100,    2,   19,
       19,   19,   91,  100,  349,  114,  114,  114,   19,  101,
       19,  102,   19,  103,  102,  110,  104,  102,  114,  153,
      110,  768,   82,  104,  153,  292,  104,  104,  765,   19,
      116,  116,  116,  349,   19,   19,  148,  148,  148,   19,
      139,  139,  139,  116,   19,   19,  759,   19,   27,  148,
      754,  752,  139,  750,   27,  749,  140,  140,  140,   27,
      140,  140,   27,  149,  149,  149,  747,   27,  745,  150,
      150,  150,  744,   27,  743,   27,   27,   27,  187,  187,
      187,   27,  150,   27,   27,   27,   27,   27,   27,  741,

       27,   27,  738,   27,   57,  190,  190,  190,  737,   57,
      141,  141,  141,  736,  735,   57,  733,   57,   57,   57,
      730,  728,  141,   57,  727,   57,   57,   57,   57,   57,
       57,  141,   57,   57,  726,   57,  141,  157,  157,  157,
      159,  159,  159,  163,  163,  163,  179,  179,  179,  725,
      157,  722,  720,  159,  719,  718,  163,  717,  716,  179,
      182,  182,  182,  184,  184,  184,  185,  185,  185,  186,
      186,  186,  715,  182,  713,  712,  184,  711,  710,  185,
      709,  708,  186,  189,  189,  189,  191,  191,  191,  192,
      192,  192,  202,  202,  202,  707,  189,  706,  705,  191,

      703,  702,  192,  701,  700,  202,  205,  205,  205,  208,
      208,  208,  210,  210,  210,  699,  210,  210,  698,  205,
      697,  208,  213,  213,  213,  214,  214,  214,  217,  217,
      217,  220,  220,  220,  213,  696,  192,  222,  222,  222,
      217,  694,  691,  220,  223,  223,  223,  224,  224,  224,
      225,  225,  225,  227,  227,  227,  690,  223,  228,  228,
      228,  689,  688,  225,  687,  686,  227,  230,  230,  230,
      685,  228,  231,  231,  231,  232,  232,  232,  684,  680,
      230,  233,  233,  233,  678,  231,  677,  676,  232,  236,
      236,  236,  237,  237,  237,  238,  238,  238,  227,  239,

      239,  239,  236,  241,  241,  241,  675,  674,  238,  242,
      242,  242,  239,  245,  245,  245,  241,  252,  252,  252,
      255,  255,  255,  257,  257,  257,  245,  258,  258,  258,
      252,  673,  670,  255,  668,  664,  257,  259,  259,  259,
      258,  262,  262,  262,  663,  245,  239,  263,  263,  263,
      265,  265,  265,  662,  262,  266,  266,  266,  661,  257,
      267,  267,  267,  265,  268,  268,  268,  269,  269,  269,
      271,  271,  271,  267,  272,  272,  272,  273,  273,  273,
      274,  274,  274,  275,  275,  275,  660,  272,  281,  281,
      281,  659,  657,  274,  286,  286,  286,  287,  287,  287,

      656,  281,  290,  290,  290,  650,  647,  286,  291,  291,
      291,  294,  294,  294,  646,  290,  295,  295,  295,  297,
      297,  297,  644,  294,  300,  300,  300,  301,  301,  301,
      643,  301,  301,  303,  303,  303,  300,  304,  304,  304,
      642,  641,  305,  305,  305,  303,  305,  305,  640,  304,
      639,  636,  303,  306,  306,  306,  307,  307,  307,  308,
      308,  308,  309,  309,  309,  306,  311,  311,  311,  312,
      312,  312,  308,  314,  314,  314,  315,  315,  315,  311,
      317,  317,  317,  318,  318,  318,  314,  319,  319,  319,
      320,  320,  320,  317,  321,  321,  321,  324,  324,  324,

      319,  325,  325,  325,  326,  326,  326,  327,  327,  327,
      328,  328,  328,  635,  325,  331,  331,  331,  628,  626,
      327,  334,  334,  334,  335,  335,  335,  337,  337,  337,
      338,  338,  338,  624,  334,  343,  343,  343,  623,  622,
      337,  621,  620,  338,  344,  344,  344,  619,  343,  347,
      347,  347,  348,  348,  348,  350,  350,  350,  351,  351,
      351,  618,  347,  353,  353,  353,  617,  614,  350,  356,
      356,  356,  358,  358,  358,  359,  359,  359,  361,  361,
      361,  362,  362,  362,  363,  363,  363,  368,  368,  368,
      369,  369,  369,  370,  370,  370,  612,  363,  611,  607,

      368,  374,  374,  374,  606,  605,  370,  377,  377,  377,
      379,  379,  379,  381,  381,  381,  383,  383,  383,  384,
      384,  384,  603,  379,  602,  385,  385,  385,  383,  385,
      385,  384,  389,  389,  389,  390,  390,  390,  392,  392,
      392,  599,  392,  392,  389,  395,  395,  395,  396,  396,
      396,  397,  397,  397,  399,  399,  399,  395,  401,  401,
      401,  403,  403,  403,  404,  404,  404,  407,  407,  407,
      408,  408,  408,  409,  409,  409,  413,  413,  413,  415,
      415,  415,  416,  416,  416,  598,  409,  417,  417,  417,
      595,  594,  415,  418,  418,  418,  419,  419,  419,  593,

      417,  421,  421,  421,  423,  423,  423,  592,  591,  419,
      425,  425,  425,  590,  421,  426,  426,  426,  428,  428,
      428,  588,  587,  425,  429,  429,  429,  433,  433,  433,
      586,  428,  435,  435,  435,  436,  436,  436,  584,  583,
      433,  437,  437,  437,  582,  435,  441,  441,  441,  442,
      442,  442,  579,  577,  437,  425,  443,  443,  443,  446,
      446,  446,  442,  449,  449,  449,  450,  450,  450,  452,
      452,  452,  446,  453,  453,  453,  449,  454,  454,  454,
      575,  452,  572,  446,  570,  453,  455,  455,  455,  456,
      456,  456,  458,  458,  458,  460,  460,  460,  455,  463,

      463,  463,  466,  466,  466,  467,  467,  467,  468,  468,
      468,  567,  463,  565,  560,  466,  470,  470,  470,  559,
      558,  468,  472,  472,  472,  473,  473,  473,  557,  470,
      474,  474,  474,  475,  475,  475,  477,  477,  477,  478,
      478,  478,  556,  474,  480,  480,  480,  555,  553,  477,
      481,  481,  481,  482,  482,  482,  552,  480,  483,  483,
      483,  551,  549,  481,  485,  485,  485,  546,  480,  545,
      541,  483,  486,  486,  486,  538,  536,  485,  488,  488,
      488,  490,  490,  490,  491,  491,  491,  493,  493,  493,
      532,  488,  529,  525,  490,  494,  494,  494,  495,  495,

      495,  498,  498,  498,  499,  499,  499,  522,  494,  501,
      501,  501,  502,  502,  502,  518,  517,  499,  505,  505,
      505,  514,  501,  507,  507,  507,  508,  508,  508,  509,
      509,  509,  510,  510,  510,  507,  511,  512,  512,  512,
      506,  511,  511,  504,  511,  503,  511,  500,  511,  512,
      513,  513,  513,  515,  515,  515,  516,  516,  516,  519,
      519,  519,  497,  513,  496,  492,  515,  520,  520,  520,
      521,  521,  521,  523,  523,  523,  524,  524,  524,  489,
      520,  526,  526,  526,  487,  484,  523,  527,  527,  527,
      528,  528,  528,  530,  530,  530,  531,  531,  531,  479,

      527,  533,  533,  533,  476,  471,  530,  534,  534,  534,
      535,  535,  535,  537,  537,  537,  539,  539,  539,  469,
      534,  540,  540,  540,  542,  542,  542,  465,  464,  539,
      544,  544,  544,  547,  547,  547,  548,  548,  548,  550,
      550,  550,  554,  554,  554,  462,  547,  561,  561,  561,
      562,  562,  562,  563,  563,  563,  564,  564,  564,  561,
      566,  566,  566,  568,  568,  568,  563,  569,  569,  569,
      571,  571,  571,  573,  573,  573,  568,  574,  574,  574,
      576,  576,  576,  578,  578,  578,  573,  580,  580,  580,
      581,  581,  581,  585,  585,  585,  596,  596,  596,  461,

      580,  597,  597,  597,  600,  600,  600,  601,  601,  601,
      604,  604,  604,  608,  608,  608,  459,  600,  609,  609,
      609,  610,  610,  610,  457,  451,  608,  615,  615,  615,
      448,  445,  580,  444,  610,  625,  625,  625,  440,  438,
      615,  627,  627,  627,  629,  629,  629,  630,  630,  630,
      631,  631,  631,  434,  627,  432,  431,  629,  430,  427,
      630,  632,  632,  632,  633,  633,  633,  637,  637,  637,
      638,  638,  638,  424,  632,  645,  645,  645,  422,  420,
      637,  648,  648,  648,  649,  649,  649,  414,  645,  651,
      651,  651,  412,  411,  648,  652,  652,  652,  653,  653,

      653,  410,  651,  654,  654,  654,  655,  655,  655,  406,
      405,  653,  658,  658,  658,  665,  665,  665,  666,  666,
      666,  667,  667,  667,  669,  669,  669,  402,  665,  671,
      671,  671,  400,  398,  667,  672,  672,  672,  679,  679,
      679,  681,  681,  681,  682,  682,  682,  683,  683,  683,
      679,  692,  692,  692,  693,  693,  693,  682,  695,  695,
      695,  391,  388,  692,  704,  704,  704,  714,  714,  714,
      721,  721,  721,  723,  723,  723,  724,  724,  724,  714,
      382,  380,  721,  378,  376,  723,  729,  729,  729,  731,
      731,  731,  732,  732,  732,  734,  734,  734,  729,  375,

      373,  731,  739,  739,  739,  740,  740,  740,  742,  742,
      742,  748,  748,  748,  739,  751,  751,  751,  755,  755,
      755,  756,  756,  756,  757,  757,  757,  371,  751,  367,
      755,  758,  758,  758,  756,  760,  760,  760,  761,  761,
      761,  762,  762,  762,  758,  366,  365,  760,  763,  763,
      763,  764,  764,  764,  766,  766,  766,  767,  767,  767,
      364,  763,  771,  771,  771,  772,  772,  772,  773,  773,
      773,  774,  774,  774,  771,  360,  357,  772,  776,  776,
      776,  777,  777,  777,  778,  778,  778,  779,  779,  779,
      780,  780,  780,  781,  781,  781,  782,  355,  782,  783,

      783,  354,  352,  346,  345,  342,  341,  340,  339,  336,
      333,  332,  330,  329,  323,  322,  316,  313,  310,  302,
      299,  298,  296,  293,  289,  288,  285,  284,  283,  282,
      280,  279,  278,  277,  276,  270,  264,  261,  260,  256,
      254,  253,  251,  250,  249,  248,  247,  246,  244,  243,
      240,  235,  234,  229,  226,  221,  219,  218,  216,  215,
      209,  207,  206,  204,  203,  201,  200,  199,  198,  197,
      196,  195,  194,  193,  188,  183,  181,  180,  178,  177,
      176,  175,  174,  173,  172,  171,  170,  169,  168,  167,
      166,  165,  164,  162,  161,  160,  156,  155,  154,  152,

      151,  146,  145,  144,  143,  142,  138,  137,  134,  133,
      132,  131,  130,  129,  128,  127,  126,  125,  124,  123,
      122,  121,  119,  118,  117,  115,  113,  112,  111,  109,
      108,  106,  105,   98,   95,   94,   92,   90,   89,   88,
       87,   86,   85,   84,   83,   81,   80,   78,   75,   74,
       73,   69,   66,   63,   62,   60,   56,   52,   49,   48,
       47,   45,   44,   43,   40,   38,   35,   29,   25,   17,
        6,    5,    4,    3,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[117] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
/* $Id$ */
/** @file parseosil.l
 * 
 * @author  Robert Fourer, Gus Gassmann, Jun Ma, Kipp Martin, 
 * @version 1.1, 12/21/2007
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005-2007, Robert Fourer, Gus Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 17 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"


#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#include <iostream>



#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif

#include <sstream>  
#include "OSiLParserData.h"



#include "OSErrorClass.h"
#include "OSParseosil.tab.hpp"
#include "OSInstance.h"


//#define PARSERDEBUG

#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif



#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>
  #endif
#endif
using std::cout;
using std::endl;
using std::ostringstream;







#line 108 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
#define YY_EXTRA_TYPE OSiLParserData*
#line 1197 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.cpp"

#define INITIAL 0
#define doublequoteattributetext 1
#define singlequoteattributetext 2
#define startelement 3
#define osilattributetext 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osillex_init (yyscan_t* scanner);

int osillex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osillex_destroy (yyscan_t yyscanner );

int osilget_debug (yyscan_t yyscanner );

void osilset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osilget_extra (yyscan_t yyscanner );

void osilset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osilget_in (yyscan_t yyscanner );

void osilset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osilget_out (yyscan_t yyscanner );

void osilset_out  (FILE * out_str ,yyscan_t yyscanner );

int osilget_leng (yyscan_t yyscanner );

char *osilget_text (yyscan_t yyscanner );

int osilget_lineno (yyscan_t yyscanner );

void osilset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osilget_lval (yyscan_t yyscanner );

void osilset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osilget_lloc (yyscan_t yyscanner );
    
        void osilset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osilwrap (yyscan_t yyscanner );
#else
extern int osilwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osillex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osillex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 119 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"

 
#line 1451 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osilensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osil_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 776 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1675 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 121 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 126 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 127 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 128 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 130 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
return(DOUBLE);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 146 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 149 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 150 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 151 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 152 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFQTERMSATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 153 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFNONLINEAREXPRESSIONS);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 154 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEROFSTAGESATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 157 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 158 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXONEATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 159 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(IDXTWOATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 160 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;   return(COEFATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 161 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VALUEATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 162 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTIDXATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 163 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(HORIZONATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 164 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STARTATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 166 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(IDATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 167 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(IDATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 168 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 169 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 170 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 171 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
/* patterns for <quadraticCoefficients> */
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 174 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OSILEND);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 175 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INSTANCEDATAEND);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 176 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSSTART);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 177 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QUADRATICCOEFFICIENTSEND);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 178 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMSTART);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 179 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(QTERMEND);}
	YY_BREAK
/* patterns for <nonlinearExpressions> */
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 182 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(NONLINEAREXPRESSIONSSTART);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 183 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NONLINEAREXPRESSIONSEND);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 184 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLSTART);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 185 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NLEND);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 186 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESSTART);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 187 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMESEND);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 188 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDESTART);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 189 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(DIVIDEEND);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 190 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSSTART);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 191 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PLUSEND);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 192 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSSTART);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 193 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINUSEND);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 194 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATESTART);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 195 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NEGATEEND);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 196 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWERSTART);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 197 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(POWEREND);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 198 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNSTART);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 199 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(LNEND);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 200 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTSTART);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 201 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQRTEND);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 202 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUARESTART);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 203 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SQUAREEND);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 204 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINSTART);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 205 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SINEND);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 206 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSSTART);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 207 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(COSEND);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 208 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPSTART);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 209 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EXPEND);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 210 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSSTART);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 211 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ABSEND);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 212 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFSTART);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 213 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ERFEND);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 214 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFSTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 215 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(IFEND);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 216 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXSTART);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 217 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MAXEND);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 218 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINSTART);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 219 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(MINEND);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 220 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMSTART);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 221 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(SUMEND);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 222 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFSTART);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 223 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ALLDIFFEND);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 224 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTSTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 225 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PRODUCTEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 227 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBERSTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 228 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(NUMBEREND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 229 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(ESTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 230 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(EEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 231 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PISTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 232 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(PIEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 233 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  return(VARIABLESTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 234 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLEEND);}
	YY_BREAK
/* patterns for <timeDomain> element */
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 237 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINSTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 238 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(TIMEDOMAINEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 239 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESSTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 240 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 241 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGESTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 242 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(STAGEEND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 243 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 244 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 245 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 246 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 247 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 248 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 249 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 250 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 251 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 252 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 253 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 254 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 255 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALSTART);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 256 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT; return(INTERVALEND);}
	YY_BREAK
/* patterns for <parametersAndStochasticElements> 
{xmlwhitespace}*\<parametersAndStochasticElements {YY_PRINT; return(PARAMETERSSTART);}
{xmlwhitespace}*\<\/parametersAndStochasticElements{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMETERSEND);}
{xmlwhitespace}*\<param {YY_PRINT; return(PARAMSTART);}
{xmlwhitespace}*\<\/param{xmlwhitespace}*\>{xmlwhitespace}* {YY_PRINT; return(PARAMEND);}
*/
case 105:
YY_RULE_SETUP
#line 266 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
BEGIN comment;
	YY_BREAK
case 106:
#line 268 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 268 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 269 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 271 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
BEGIN xmldeclaration;
	YY_BREAK
case 110:
#line 273 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 273 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 274 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
BEGIN 0;
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 277 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 278 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/ yylval->sval = yytext; return(ATTRIBUTETEXT);}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 280 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 292 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"
ECHO;
	YY_BREAK
#line 2261 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(osilattributetext):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osillex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osilwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osillex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osilrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osilrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osilrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 776 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 776 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 775);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osilrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osilwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osilrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osilensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osil_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osil_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osil_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osil_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osilpop_buffer_state();
	 *		osilpush_buffer_state(new_buffer);
     */
	osilensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osil_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osilwrap()) processing, but the only time this flag
	 * is looked at is after osilwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osil_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osil_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osilalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osil_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osil_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osil_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osilfree((void *) b->yy_ch_buf ,yyscanner );

	osilfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osilrestart() or at EOF.
 */
    static void osil_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osil_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osil_init_buffer was _probably_
     * called from osilrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osil_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osil_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osilpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osilensure_buffer_stack(yyscanner);

	/* This block is copied from osil_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osil_switch_to_buffer. */
	osil_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osilpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osil_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osilensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osilrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osilensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osil_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osilalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osil_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osillex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osil_scan_bytes() instead.
 */
YY_BUFFER_STATE osil_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osil_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osillex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osil_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osilalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osil_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osil_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osil_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osilget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osilget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osilget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osilget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osilget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osilget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osilset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osilset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osilset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osil_switch_to_buffer
 */
void osilset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osilset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osilget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osilset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osilget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osilset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osilget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osilset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osillex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osillex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osillex_init_extra has the same functionality as osillex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osilalloc in
 * the yyextra field.
 */

int osillex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osilset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osilalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osilset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osillex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osillex_init()
     */
    return 0;
}

/* osillex_destroy is for both reentrant and non-reentrant scanners. */
int osillex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osil_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osilpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osilfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osilfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osillex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osilfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osilalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osilrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osilfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osilrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 292 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosil.l"




