#line 2 "OSParseosrl.cpp"

#line 4 "OSParseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osrllex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 212
#define YY_END_OF_BUFFER 213
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1655] =
    {   0,
        1,    1,  210,  210,  208,  208,  209,  209,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  213,  211,
        1,    2,  198,    2,  198,    6,  198,    5,  211,    4,
      198,  210,  212,  208,  209,  199,  201,  202,  201,  205,
      206,  205,    1,  198,  198,    6,  198,    5,    0,    4,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,    3,    6,    6,  198,    7,    5,    0,    0,  204,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    4,  198,  210,  208,  209,  199,
        0,  207,  198,  198,  198,  198,  198,  198,  198,  198,

      198,  198,  198,  198,  198,  198,    6,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  110,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    6,  203,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  200,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  100,    0,    0,    0,    0,
        0,  120,    0,    0,    0,   70,    0,  128,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  192,  198,  198,  198,   28,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  111,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       70,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  168,    0,    0,    0,
        0,    0,    0,    0,  198,  198,   28,  198,   29,  198,
       30,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,    0,    0,    0,    0,    0,    0,    0,    0,
      101,    0,    0,    0,  111,    0,    0,    0,    0,  121,
        0,    0,    0,    0,   71,    0,    0,    0,  129,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  193,
        0,    0,    0,    0,    0,    0,    0,    0,   94,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       75,  124,    0,    0,    0,   62,   61,  134,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  198,  198,   29,
       30,  198,   43,   44,  198,  198,  198,  198,   47,   48,
      198,   51,   52,  198,  198,  198,    0,    0,    0,    0,
        0,    0,    0,    0,  101,    0,    0,    0,    0,    0,
        0,  121,    0,    0,    0,   76,   71,    0,    0,  129,
        0,    0,    0,   63,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  169,    0,    0,    0,    0,

        0,    0,    0,    0,  193,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  122,   77,   75,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  158,    0,    0,    0,   66,    0,
        0,    0,    0,    0,    0,    0,    0,  188,  196,    0,
      198,  198,   41,   42,  198,  198,   31,  198,   45,   46,
       49,   50,  198,   55,   56,  198,    0,    0,    0,    0,
        0,    0,    0,   95,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   76,    0,  125,    0,    0,    0,   63,
        0,  135,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  169,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   80,   82,    0,    0,
        0,    0,    0,    0,    0,  112,    0,   64,    0,   77,
        0,  126,    0,    0,    0,    0,    0,   68,    0,    0,
        0,    0,    0,    0,   66,    0,    0,    0,    0,    0,
      178,    0,    0,    0,    0,    0,  198,  198,  198,   31,
      198,   53,   54,  198,    0,    0,    0,    0,    0,    0,
       95,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      123,  125,    0,    0,    0,  135,    0,    0,    0,    0,
        0,    0,    0,    0,  159,    0,    0,    0,    0,   67,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      189,    0,    0,  197,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   64,    0,    0,    0,    0,
        0,    0,    0,    0,   68,    0,    0,  152,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,    0,    0,   81,    0,
       83,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      113,    0,    0,   65,    0,    0,  123,    0,  127,    0,
        0,    0,    0,    0,    0,   69,    0,    0,    0,    0,

        0,  159,    0,    0,    0,   67,    0,    0,    0,    0,
        0,    0,  179,    0,    0,    0,    0,  189,    0,  197,
        0,    0,    0,   98,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  162,    0,    0,    0,
      172,    0,    0,    0,    0,    0,    0,    0,  194,  198,
       35,   36,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,    0,   81,   83,    0,
        0,    0,    0,    0,    0,    0,    0,  113,    0,   65,
        0,    0,  127,    0,    0,    0,    0,    0,    0,   69,

        0,    0,    0,    0,  153,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  179,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  108,    0,    0,    0,    0,  130,    0,    0,    0,
        0,    0,    0,  148,    0,    0,    0,  160,  164,    0,
        0,    0,    0,    0,    0,    0,  186,    0,   33,   34,
      198,  198,  198,   10,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,    0,    0,    0,    0,    0,
       99,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  153,

        0,    0,    0,    0,  163,    0,    0,    0,    0,  173,
        0,    0,    0,    0,    0,    0,    0,    0,  195,    0,
        0,    0,    0,    0,   96,  102,    0,    0,  114,    0,
        0,    0,    0,    0,    0,    0,    0,  146,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  198,
      198,  198,    8,  198,   10,  198,  198,   12,  198,  198,
       14,  198,  198,  198,  198,  198,  198,  198,   25,  198,
      198,  198,  198,    0,    0,    0,    0,   99,    0,    0,
        0,    0,    0,    0,  109,    0,    0,    0,    0,  131,
        0,    0,    0,    0,    0,    0,    0,  149,    0,    0,

        0,    0,  161,  163,    0,  165,    0,    0,  173,    0,
        0,    0,    0,    0,    0,  187,    0,  195,    0,    0,
        0,    0,    0,    0,  106,    0,  118,    0,   74,   72,
      136,    0,    0,    0,    0,    0,  156,    0,    0,    0,
        0,    0,  182,    0,  190,  198,   39,   40,    8,  198,
      198,   12,  198,   14,  198,  198,  198,  198,  198,  198,
       25,  198,  198,  198,  198,    0,    0,    0,    0,    0,
        0,   97,    0,  103,    0,    0,  109,    0,  115,    0,
        0,  131,    0,    0,    0,    0,    0,    0,  147,  149,
        0,    0,    0,  161,  165,    0,    0,    0,    0,    0,

        0,    0,  187,    0,    0,    0,    0,    0,    0,    0,
        0,  116,   74,    0,    0,    0,    0,    0,  154,    0,
        0,    0,    0,  180,  184,   37,   38,  198,  198,  198,
       13,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,   24,  198,  198,  198,  198,    0,    0,    0,    0,
        0,    0,   97,  103,    0,    0,  107,  115,    0,    0,
      119,    0,   73,    0,    0,  137,    0,    0,    0,  147,
        0,    0,    0,  157,    0,    0,    0,    0,    0,    0,
      183,    0,    0,  191,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  176,

      198,  198,   13,  198,  198,  198,  198,  198,  198,  198,
      198,  198,   24,  198,   27,  198,  198,  198,    0,    0,
        0,    0,    0,    0,    0,  107,    0,  117,  119,   73,
        0,  137,    0,    0,    0,    0,    0,  155,  157,    0,
        0,    0,    0,    0,  181,  183,    0,  185,  191,   78,
        0,    0,    0,   90,    0,  104,    0,    0,    0,    0,
        0,    0,    0,    0,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,   27,  198,  198,  198,    0,
        0,    0,    0,    0,    0,    0,  117,    0,    0,    0,
        0,    0,  155,    0,    0,    0,    0,  177,  181,  185,

        0,    0,    0,   92,    0,    0,    0,    0,    0,    0,
        0,    0,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,    0,   79,    0,    0,
        0,    0,   91,    0,    0,  105,    0,    0,    0,    0,
        0,    0,    0,    0,  177,    0,   86,    0,    0,    0,
      142,    0,    0,  166,    0,  174,  198,  198,  198,  198,
      198,  198,  198,  198,  198,   21,  198,  198,  198,   26,
      198,  198,   79,    0,    0,    0,   91,    0,   93,  105,
        0,    0,    0,    0,    0,    0,    0,    0,   84,   88,
        0,    0,  144,  150,  170,  198,  198,  198,   15,  198,

      198,  198,  198,  198,   21,  198,  198,   26,  198,   32,
      198,  198,    0,    0,   87,    0,   93,    0,    0,    0,
      143,    0,    0,    0,  167,    0,    0,  175,    0,  138,
      198,    9,  198,   15,  198,  198,  198,  198,  198,  198,
      198,   23,   32,  198,   59,   60,    0,   85,   87,    0,
       89,    0,    0,  143,    0,  145,    0,  151,  167,    0,
      171,  175,    0,  140,    9,  198,   11,  198,  198,  198,
       18,  198,  198,  198,   23,   57,   58,   85,   89,    0,
        0,  139,    0,  145,  151,  171,    0,   11,  198,  198,
       18,  198,  198,  198,   22,    0,  139,    0,  141,    0,

      198,  198,  198,  198,   22,    0,  141,    0,  198,  198,
      198,  198,    0,    0,  198,  198,  198,  198,    0,    0,
      198,  198,  198,  198,    0,  132,  198,  198,  198,  198,
        0,  198,  198,  198,  198,    0,  133,  198,  198,  198,
       19,  198,   20,  133,  198,  198,   17,   19,   20,  198,
       16,   17,   16,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    1,    1,    7,    1,
        1,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,    6,   24,   25,    6,   26,   27,   28,   29,   30,
        6,   31,   32,   33,   34,   35,    6,    6,    6,    6,
        1,    1,    1,    1,    6,    1,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,    6,   52,   53,   54,   55,   56,   57,   58,
       59,   60,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[61] =
    {   0,
        1,    2,    2,    1,    3,    2,    4,    2,    2,    2,
        2,    2,    2,    2,    5,    2,    6,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2
    } ;

static yyconst flex_int16_t yy_base[1668] =
    {   0,
        0,   24, 3287, 3286, 3297, 3296, 3293, 3292,    0,    0,
        0,    0, 3283, 3282,   13,   37,    3,    5, 3296, 3305,
       47, 3290,   15, 3287,   53,   95,   28,  134,  171,   17,
       59,    0, 3305,    0,    0,    0, 3305, 3305, 3284, 3305,
     3305, 3275,  226,   36,  101,  117,   37,  282,   51,   70,
       64,   63,  123,  106,   67,  126,  109,  135,  143,  144,
      150, 3305,  170,  246,  187, 3305,  176, 3282,  287, 3305,
      130, 3254,   33, 3234,  117, 3248,  193, 3237, 3246,  169,
      217,   83,   40, 3249,  103,  239,    0,    0,    0,    0,
     3267, 3305,  197,  216,  272,  273,  286,  290,  291,  276,

      295,  283,  300,  299,  304,  337,  353, 3274,  264, 3246,
      133, 3226,  156, 3240,  320, 3229, 3238,  324,  341,  126,
       41, 3241, 3222,  143, 3239, 3221, 3224, 3220, 3235, 3305,
      179, 3221, 3211, 3215, 3244, 3226, 3228, 3211, 3218, 3208,
     3209, 3217, 3216, 3206, 3210, 3220,   91, 3202, 3206, 3199,
     3206, 3211,  226,  369, 3305,  343,  347,  386,  365,  375,
      382,  389,  390,  393,  394,  397,  398,  401, 3305, 3196,
      218, 3213, 3195, 3198, 3194, 3209,  421,  381, 3195, 3185,
     3189, 3218, 3200, 3202, 3185, 3192, 3182, 3183, 3191, 3190,
     3180, 3184, 3194,  382, 3176, 3180, 3173, 3180, 3185,  346,

     3169, 3173, 3171, 3177,  313, 3167, 3167, 3171, 3184, 3168,
     3175, 3305, 3160, 3161, 3164,  425, 3158, 3170, 3165, 3161,
     3167, 3166, 3149,  142, 3150,  384, 3163, 3148,  269, 3165,
     3151, 3160, 3143,  397,  425,  429,  445,  453,  456,  461,
      472,  465,  437,  468,  494,  497,  475,  476, 3142, 3146,
     3144, 3150,  425,  499, 3141, 3145,  501,  492, 3158, 3142,
     3149,  504, 3134, 3135, 3138,  520, 3132,  522, 3140, 3136,
     3142, 3141, 3124,  471, 3125,  397, 3138, 3123,  488, 3140,
     3126, 3135, 3118,  531, 3136, 3114, 3119, 3122, 3114, 3153,
      192, 3112, 3125, 3129, 3119, 3122, 3109, 3124, 3119,  539,

      527, 3137, 3121, 3118, 3107,  543, 3102, 3114, 3108, 3097,
     3110, 3094, 3104, 3093, 3094, 3105, 3112, 3094, 3095, 3091,
      537, 3100, 3100, 3102,  521,  532,  551,  567,  570,  575,
      578,  586,  602,  544,  582,  583,  609,  613,  619,  636,
      629,  593, 3101, 3079, 3084, 3087, 3079, 3118,  482,  646,
      611, 3077, 3090, 3094,  652, 3084, 3087, 3074,  654,  656,
     3089, 3084,  658,  662,  664, 3102, 3086,  666,  670, 3083,
     3072,  674, 3067, 3079, 3073, 3062, 3075, 3059, 3069, 3058,
     3059, 3070,  678, 3060, 3061, 3057,  665, 3066,  685,  687,
     3066, 3068, 3056, 3062, 3061, 3064, 3063, 3085, 3305, 3065,

     3044, 3046, 3058, 3045, 3040, 3055, 3041, 3049,  694, 3071,
      691, 3305, 3045, 3032, 3041,  696, 3305,  669, 3029, 3045,
     3038, 3029, 3027, 3025, 3042, 3058, 3028,  385, 3033, 3049,
     3016, 3042, 3027, 3030, 3016, 3010, 3030,  667,  692,  701,
      712,  718, 3061, 3058,  469,  729,  550,  734, 3059, 3056,
      745, 3057, 3054,  751,  754,  612, 3013, 3019, 3018, 3021,
     3020, 3042,  761, 3022,  770, 3001, 3003, 3015, 3002, 2997,
     3012,  772, 2998, 3006,  774,  777,  779,  781, 3003,  783,
     2990, 2999,  785,  787,  790, 2987, 3003, 2996, 2987, 2985,
     2983, 3000, 3016, 2986,  792,  794,  477, 2991, 3007, 2974,

     3000, 2985, 2988, 2974,  797, 2968, 2988, 2992, 2971, 2970,
     2984, 2966, 3000, 2964, 2981, 2962, 2968, 2974, 2977, 2965,
     2973, 3305,  801,  803, 2999, 2969, 2964, 2947, 2966, 2955,
     2957, 2963, 2952,  688, 3305, 2968, 2946, 2963,  808, 2946,
     2961, 2972, 2945, 2945, 2959, 2939, 2943, 2958, 3305, 2942,
      711,  797, 3305, 3305,  798,  814,  821,  625, 3305, 3305,
     3305, 3305,  838, 2983, 2980,  810, 2954, 2933, 2932, 2946,
     2928, 2962,  817,  844, 2926, 2943, 2924, 2930, 2936, 2939,
     2927, 2935,  854,  856,  858,  860, 2932, 2927, 2910,  862,
      864,  866, 2929, 2918, 2920, 2926, 2915,  804,  870, 2931,

     2909, 2926,  874,  876, 2909, 2924, 2935, 2908, 2908, 2922,
     2902, 2906,  880,  882, 2906, 2898, 3305, 3305, 2904, 2895,
     2905, 2912, 2903,  362, 2891, 3305, 2891,  886, 2904,  890,
     2899, 3305, 2886, 2905, 2887, 2892, 2898,  892, 2888, 2887,
     2880, 2890, 2878, 2879,  898, 2882, 2874, 2881, 2879, 2890,
     3305,  642, 2880, 2875, 2870, 2883,  900,  889,  907,  906,
      835, 3305, 3305,  890, 2868,  908,  911, 2874, 2865, 2875,
      932, 2882, 2873,  733, 2861,  935, 2861,  941, 2874,  943,
      945,  947,  951, 2857, 2876,  953, 2858, 2863, 2869,  959,
     2859, 2858, 2851,  961,  963, 2861, 2849, 2850,  967,  969,

     2853, 2845, 2852, 2850, 2861,  972,  702, 2851, 2846,  977,
      979, 2841,  983,  988, 2854, 2857, 2852, 2838, 2841, 2835,
     2839, 2837, 2832, 2845, 2840,  993, 2829, 2854, 2827, 2840,
     2825, 2823,  942, 2838,  999, 2840,  509, 3305, 2819, 2820,
     2825, 2819, 2827, 2829, 2824, 2810, 2813, 2791, 2788, 2741,
     2757, 2735, 2734, 2732, 1001, 1004,  820,  942,  993,  997,
      998, 1005, 1009,  915, 1008, 1012, 2747, 1028, 1030, 1041,
     1035, 2741, 2727, 2728, 2717, 2718, 2714, 2708, 2721, 1044,
     1054, 2713, 1060, 1062, 2701, 2724, 1064, 1066, 1068, 2706,
     2691, 2683, 1017, 2697, 1072, 1076, 2694,  520, 1078, 2673,

     2672, 1082, 2673, 2658, 2661, 1084, 2660, 2651, 2639, 2640,
     2624, 1088, 1090, 2614, 2603, 2616, 2587, 1094, 2583, 1096,
     2564, 2556, 1080, 3305, 2568, 2541, 2523, 2537, 2534, 2490,
     2475, 2476, 2472, 2458, 2439, 2445, 2436, 2423, 2433, 2435,
     2409, 2426, 2403, 2384,   24,  114, 3305,  179,  203,  228,
     3305,  227,  296,  315,  336,  380,  420,  499, 3305, 1101,
      581,  587, 1094, 1095, 1111, 1100, 1024, 1105, 1104, 1108,
      827, 1115,  707, 1114, 1118, 1119,  554, 1135, 1137, 1121,
     1144,  597,  595,  624,  671,  702,  687, 1151,  692, 1155,
      765,  772, 1157,  773,  804,  807,  832,  850,  864, 1160,

      893,  943,  933, 1165, 1167,  933,  937,  959, 1169,  967,
      978,  996, 1171, 1000, 1022, 1173, 1011, 1036, 1037, 1035,
     1058, 1175, 1070, 1120, 1121, 1139, 1128, 1128, 1130, 1164,
     1131, 3305, 1138, 1135, 1142, 1143, 3305, 1143, 1140, 1151,
     1144, 1143, 1158, 3305, 1152, 1154, 1146, 3305, 3305, 1150,
     1163, 1152, 1155, 1169, 1167, 1172, 3305, 1160, 3305, 3305,
     1208, 1211, 1214, 1217, 1218, 1234, 1223, 1239, 1228, 1229,
     1242, 1243, 1272, 1246, 1250, 1158, 1185, 1174, 1181, 1245,
     1250, 1170, 1186, 1216, 1250, 1218, 1274, 1224, 1224, 1232,
     1290, 1231, 1228, 1242, 1242, 1243, 1258, 1300, 1252, 1302,

     1255, 1251, 1306, 1308, 1310, 1312, 1266, 1279, 1318, 1324,
     1270, 1274, 1291, 1290, 1295, 1330, 1285, 1334, 1336, 1307,
     1307, 1289, 1295, 1285, 3305, 3305, 1295, 1306, 3305, 1293,
     1309, 1350, 1301, 1301, 1305, 1327, 1321, 3305, 1314, 1319,
     1306, 1313, 1330, 1315, 1341, 1325, 1327, 1330, 1327, 1368,
     1371, 1377, 1387, 1360, 1393, 1382, 1403, 1398, 1392, 1409,
     1414, 1406, 1413, 1417, 1418, 1421, 1424, 1440, 1444, 1433,
     1434, 1437, 1445, 1339, 1347, 1329, 1339, 1461, 1332, 1465,
     1471, 1348, 1363, 1476, 1482, 1484, 1372, 1397, 1487, 1489,
     1391, 1400, 1416, 1440, 1440, 1492, 1494, 1496, 1436, 1460,

     1448, 1503, 1505, 1510, 1512, 1514, 1455, 1478, 1516, 1473,
     1499, 1483, 1485, 1487, 1524, 1528, 1486, 1530, 1490, 1507,
     1490, 1487, 1517, 1485, 3305, 1489, 3305, 1541, 1543, 1515,
     3305, 1499, 1494, 1498, 1491, 1513, 3305, 1517, 1500, 1519,
     1520, 1505, 3305, 1519, 3305, 1558, 1557, 1557, 1564, 1553,
     1554, 1574, 1580, 1583, 1557, 1584, 1563, 1573, 1593, 1615,
     1618, 1597, 1607, 1611, 1619, 1540, 1595, 1541, 1542, 1572,
     1635, 1600, 1637, 1639, 1539, 1643, 1645, 1647, 1654, 1556,
     1659, 1656, 1663, 1666, 1594, 1596, 1601, 1668, 1672, 1675,
     1603, 1633, 1679, 1684, 1686, 1643, 1630, 1654, 1655, 1640,

     1691, 1657, 1696, 1698, 1654, 1648, 1653, 1673, 1654, 1671,
     1660, 3305, 1708, 1662, 1682, 1660, 1662, 1681, 3305, 1664,
     1683, 1666, 1669, 3305, 3305, 3305, 3305, 1707, 1708, 1724,
     1730, 1713, 1714, 1719, 1720, 1731, 1734, 1735, 1738, 1744,
     1760, 1763, 1771, 1754, 1767, 1774, 1690, 1687, 1703, 1726,
     1716, 1736, 1790, 1792, 1730, 1794, 1797, 1800, 1802, 1806,
     1810, 1812, 1814, 1733, 1818, 1822, 1759, 1752, 1756, 1824,
     1786, 1828, 1830, 1834, 1774, 1798, 1784, 1787, 1838, 1840,
     1846, 1848, 1850, 1856, 1804, 1798, 1814, 1805, 1801, 1807,
     1808, 1816, 1824, 1815, 1835, 1815, 1826, 1819, 1828, 3305,

     1858, 1859, 1875, 1864, 1865, 1870, 1869, 1874, 1878, 1879,
     1882, 1883, 1901, 1908, 1924, 1891, 1918, 1890, 1843, 1840,
     1861, 1858, 1853, 1863, 1865, 1941, 1945, 1947, 1949, 1951,
     1882, 1953, 1892, 1883, 1903, 1886, 1955, 1957, 1961, 1901,
     1909, 1921, 1964, 1966, 1968, 1971, 1973, 1975, 1977, 3305,
     1945, 1944, 1949, 3305, 1950, 3305, 1932, 1935, 1934, 1947,
     1948, 1943, 1940, 1945, 1981, 1982, 1985, 1986, 1989, 1990,
     1993, 1994, 1997, 1998, 2001, 2017, 2006, 2007, 2016, 2025,
     1980, 1995, 2000, 2038, 2001, 2041, 2058, 1992, 1996, 1996,
     2009, 2013, 2060, 2014, 2011, 2016, 2065, 2067, 2069, 2071,

     2035, 2037, 2039, 3305, 2024, 2024, 2026, 2033, 2033, 2035,
     2045, 2037, 2072, 2073, 2076, 2077, 2080, 2081, 2084, 2085,
     2117, 2088, 2095, 2134, 2089, 2092, 2113, 2111, 2068, 2072,
     2079, 2138, 2122, 2140, 2150, 2156, 2068, 2072, 2090, 2098,
     2098, 2105, 2116, 2111, 2159, 2111, 3305, 2124, 2121, 2119,
     3305, 2128, 2120, 3305, 2131, 3305, 2156, 2157, 2173, 2162,
     2163, 2166, 2167, 2170, 2210, 2193, 2176, 2177, 2219, 2201,
     2226, 2230, 2195, 2134, 2198, 2159, 2221, 2235, 2237, 2246,
     2158, 2158, 2248, 2179, 2195, 2251, 2216, 2254, 3305, 3305,
     2208, 2205, 3305, 3305, 3305, 2258, 2247, 2264, 2267, 2261,

     2268, 2271, 2272, 2276, 2292, 2275, 2299, 2296, 2302, 2318,
     2323, 2329, 2325, 2345, 2347, 2349, 2351, 2213, 2218, 2353,
     2355, 2357, 2361, 2365, 2369, 2373, 2377, 2381, 2228, 2243,
     2383, 2386, 2389, 2393, 2293, 2392, 2409, 2328, 2398, 2399,
     2415, 2418, 2425, 2434, 2298, 2299, 2441, 2420, 2443, 2451,
     2453, 2281, 2457, 2459, 2461, 2463, 2467, 2469, 2473, 2477,
     2479, 2483, 2309, 3305, 2485, 2488, 2494, 2478, 2484, 2504,
     2511, 2500, 2501, 2520, 2527, 3305, 3305, 2531, 2536, 2329,
     2538, 2543, 2545, 2547, 2549, 2551, 2311, 2554, 2543, 2544,
     2561, 2550, 2551, 2570, 2577, 2315, 2579, 2581, 2586, 2337,

     2578, 2584, 2585, 2588, 2604, 2345, 2608, 2333, 2597, 2598,
     2601, 2605, 2339, 2342, 2608, 2611, 2612, 2615, 2347, 2366,
     2616, 2625, 2619, 2628, 2376, 3305, 2629, 2632, 2635, 2638,
     2661, 2650, 2653, 2677, 2681, 2672, 2655, 2670, 2697, 2700,
     2705, 2716, 2722, 2707, 2725, 2732, 2741, 2748, 2751, 2757,
     2767, 2773, 2776, 3305, 2793, 2799, 2805, 2811, 2817, 2823,
     2829, 2835, 2840, 2846, 2851, 2857, 2863
    } ;

static yyconst flex_int16_t yy_def[1668] =
    {   0,
     1655, 1655, 1656, 1656, 1657, 1657, 1658, 1658, 1659, 1659,
     1659, 1659, 1660, 1660, 1661, 1661, 1662, 1662, 1654, 1654,
     1663, 1654, 1663, 1654, 1663, 1663, 1663, 1663, 1654, 1654,
     1663, 1664, 1654, 1665, 1666, 1667, 1654, 1654, 1654, 1654,
     1654, 1654, 1663, 1663, 1663, 1663, 1663, 1663,   29, 1654,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1654, 1663, 1663, 1663, 1654, 1663, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1663, 1664, 1665, 1666, 1667,
     1654, 1654, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,

     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1663, 1654, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1663, 1663, 1663,
     1663, 1663, 1654, 1654, 1663, 1663, 1663, 1663, 1654, 1654,
     1663, 1654, 1654, 1663, 1663, 1663, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1663, 1663, 1654, 1654, 1663, 1663, 1663, 1663, 1654, 1654,
     1654, 1654, 1663, 1654, 1654, 1663, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1663, 1663, 1663, 1663,
     1663, 1654, 1654, 1663, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1663,
     1654, 1654, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1663, 1654, 1654, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1663, 1663, 1663, 1663, 1663,

     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1654, 1654, 1654, 1654, 1654,

     1663, 1663, 1663, 1663, 1663, 1654, 1654, 1654, 1663, 1663,
     1663, 1663, 1654, 1654, 1663, 1663, 1663, 1663, 1654, 1654,
     1663, 1663, 1663, 1663, 1654, 1654, 1663, 1663, 1663, 1663,
     1654, 1663, 1663, 1663, 1663, 1654, 1654, 1663, 1663, 1663,
     1663, 1663, 1663, 1654, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663,    0, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654
    } ;

static yyconst flex_int16_t yy_nxt[3366] =
    {   0,
       20,   21,   21,   20,   22,   41,   24,   41,   25,   26,
       27,   28,   28,   28,   29,   38,   30,   20,   85,   85,
       42,   39,   42,   31,   20,   21,   21,   20,   22, 1654,
       24, 1654,   25,   26,   27,   28,   28,   28,   29,   38,
       30,   20, 1654, 1654,   66,   39, 1654,   31,   43,   43,
     1654, 1654, 1654,   66, 1654,   45,   46,   47,   48,   48,
       48,   49,   46,   50,   48,   48,   48, 1654, 1654, 1654,
       51,   85,   85, 1654,  947, 1654,   51, 1654, 1654, 1654,
     1654, 1654,  127, 1654,   52,   53,   86,  128,  151,  198,
       54,   86,  152,  199,   55,   56,   63,   63,   93,   57,

       58,   59,   60,   61,   85,   85,   64,   64,   64, 1654,
       46, 1654,   48,   48,   48, 1654,   65, 1654,   63,   63,
     1654,   97, 1654, 1654,   51, 1654,  149,  226,   64,   64,
       64, 1654,  150, 1654,   65,   67,   67, 1654,   65, 1654,
     1654,  227, 1654,   46,   95,   48,   48,   48, 1654, 1654,
     1654, 1654,  100,  948,   96,   65,   65, 1654, 1654, 1654,
     1654,   98,   94,  130, 1654,  131, 1654,  123,  202,  196,
      101,   63,   63,   65,   68,  197,  203,   67,   67,  104,
       99,   69,  174,  124, 1654,  125, 1654,  175,   70,  105,
     1654,  103, 1654,  102,  106,  106,  310,  311,  107,  107,

      107, 1654,  177, 1654,  178,  139,   71,   72,   73,   74,
       75, 1654,   76, 1654,   77,   78,  949,  209,   79,  140,
       80,  141,  142,   81,   82,   83,   84,   43,   43,  399,
     1654,  133, 1654,  210,   45,   46,   47,   48,   48,   48,
       49,  134,   50,  250,  400,  135,  136,   63,   63,   51,
      156,  251,  950, 1654,  143, 1654,  144,   64,   64,   64,
     1654,  154, 1654,   52,   53,  951,  145,   65,  157,   54,
      146,  147,  233,   55,   56,  148,  952,  234,   57,   58,
       59,   60,   61,   67,   67,   65, 1654, 1654, 1654, 1654,
     1654,   46, 1654,   48,   48,   48, 1654, 1654, 1654, 1654,

     1654,  170, 1654,   65, 1654, 1654, 1654, 1654,  317, 1654,
      159, 1654,  318, 1654, 1654, 1654, 1654,  171, 1654,  172,
     1654,   65,  109,  110,  111,  112,  113,  953,  114,  158,
      115,  116,  160,  165,  117,  163,  118,  161,  162,  119,
      120,  121,  122,  166,  289,  167,  164,  168,  107,  107,
      107, 1654,  290, 1654,   63,   63,  291, 1654,  180, 1654,
      186, 1654,  954, 1654,  107,  107,  107, 1654,  181, 1654,
       63,   63,  182,  183,  187,  955,  188,  189,  190, 1654,
      191, 1654,  235, 1654,  236, 1654,  722,  237,  237, 1654,
      192, 1654,  283,  723,  193,  194, 1654,  284, 1654,  195,

     1654,  238, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654,  239, 1654,  276,  259,
      323,  241,  257,  257,  540,  242,  301,  301,  240,  243,
      956,  313,  277,  245,  244,  260,  314,  258,  541, 1654,
      324, 1654,  248, 1654,  379, 1654,  237,  237,  302,  380,
      246, 1654,  247, 1654,  327,  327,  347,  328,  328, 1654,
      238, 1654,  330,  330,  348,  335,  325, 1654,  349, 1654,
     1654,  329, 1654,  332,  332, 1654,  331, 1654,  957, 1654,
      326, 1654, 1654, 1654, 1654, 1654, 1654,  333, 1654, 1654,
     1654, 1654, 1654,  355,  355,  337,  337,  555,  339,  339,

      350,  350,  257,  257,  334,  359,  359,  336, 1654,  338,
     1654, 1654,  340, 1654,  341,  351,  605,  258,  342,  463,
      360,  364,  364,  368,  368,  376,  377,  383,  301,  301,
      606,  384,  389,  389,  464, 1654,  365, 1654,  369,  842,
      409,  409,  958,  366,  416,  416, 1654,  390, 1654,  410,
      902,  352,  327,  327,  391,  411,  432,  433, 1654,  417,
     1654,  370,  843,  434, 1654, 1654, 1654, 1654,  328,  328,
      438,  440,  440,  903,  392,  439,  330,  330,  558,  441,
      441, 1654,  329, 1654, 1654,  959, 1654,  332,  332, 1654,
      331, 1654, 1654,  960, 1654,  445, 1654, 1654, 1654, 1654,

     1654,  333, 1654,  442,  442,  976,  443, 1654,  444, 1654,
      337,  337,  465,  465,  448,  448, 1654,  449, 1654,  450,
      339,  339,  446, 1654,  338, 1654, 1654, 1654, 1654, 1654,
      454,  454,  982, 1654,  340, 1654,  447,  451,  451, 1654,
      452, 1654,  453, 1654,  455, 1654,  456,  350,  350,  983,
     1654,  566, 1654,  355,  355,  359,  359,  472,  472,  475,
      475,  661,  351,  364,  364,  477,  477,  368,  368,  749,
      360,  480,  480,  750,  476,  483,  483,  984,  365,  495,
      495, 1654,  369, 1654,  501,  502,  389,  389,  505,  505,
      484,  503,  524,  524,  496,  409,  409,  416,  416,  529,

      530,  390,  440,  440,  410,  525, 1654,  985, 1654,  497,
      411,  640,  417,  441,  441, 1654,  641, 1654,  551,  442,
      442, 1654,  443, 1654,  444, 1654, 1654, 1654, 1654,  814,
      556,  556, 1654,  815, 1654,  448,  448,  986,  449,  987,
      450,  988,  552, 1654,  557, 1654,  451,  451, 1654,  452,
     1654,  453,  454,  454,  972,  563,  563,  777,  564, 1654,
      565, 1654,  573,  573,  778, 1654,  455, 1654, 1654,  657,
     1654,  465,  465,  472,  472,  475,  475,  574,  584,  584,
      477,  477,  585,  585,  480,  480,  483,  483,  590,  590,
      476,  591,  591,  495,  495,  604,  604,  586,  505,  505,

      989,  484,  630,  630,  524,  524,  592,  990,  496,  645,
      645, 1654, 1654, 1654, 1654,  556,  556,  525,  573,  573,
      593,  594,  660,  660, 1654,  991, 1654,  692, 1654,  557,
     1654,  646,  693,  574, 1654, 1654, 1654, 1654,  659,  563,
      563, 1654,  564, 1654,  565,  671,  671,  992,  664, 1654,
      658, 1654, 1654,  993, 1654,  680,  680,  584,  584,  585,
      585,  682,  682,  590,  590,  591,  591,  686,  686,  863,
      681,  694,  694,  970,  586,  699,  699,  604,  604,  765,
      592,  710,  710,  713,  713,  994,  695,  726,  726,  995,
      700,  630,  630,  735,  735,  996,  711,  701,  714,  645,

      645,  755,  755, 1654, 1654, 1654, 1654,  660,  660,  768,
      768,  712,  770,  770, 1654,  756, 1654,  727,  766,  736,
     1654, 1654, 1654, 1654,  769,  737,  758,  771,  759, 1654,
      760, 1654,  757,  671,  671,  761,  780,  780,  762,  763,
      997,  764,  783,  783,  680,  680,  787,  787,  682,  682,
      874,  781,  788,  788,  686,  686, 1654,  784, 1654,  681,
      795,  795,  694,  694,  802,  802,  998,  789,  699,  699,
      806,  806,  785,  812,  812,  796,  999,  695,  710,  710,
      818,  818, 1001,  700,  713,  713,  797, 1002,  813,  820,
      820,  864,  798,  711,  726,  726,  838,  839, 1003,  714,

      735,  735,  755,  755, 1006,  860,  860, 1654,  861, 1654,
      862, 1654, 1654, 1654, 1654, 1654,  756, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1007, 1654,  768,
      768,  878,  878, 1008,  869,  867,  879,  879, 1654,  865,
     1654,  866,  770,  770,  769,  780,  780,  875,  876, 1011,
      868,  870,  873, 1012,  871,  888,  888,  771, 1013,  872,
      781,  783,  783,  890,  890,  787,  787,  788,  788,  893,
      893,  897,  898,  795,  795, 1014,  784,  900,  900,  904,
      904,  966,  789,  802,  802,  806,  806, 1015,  796,  812,
      812,  916,  916, 1016,  905,  818,  818,  820,  820,  924,

      925, 1017,  860,  860,  813,  861,  926,  862, 1654, 1654,
     1654, 1654,  963,  963, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1020, 1654, 1654,  964, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654,  878,  878,  879,  879,
      977,  978,  961,  962,  967,  980,  980,  979,  968, 1021,
      969,  971,  888,  888,  965,  974,  890,  890,  893,  893,
      981,  900,  900,  975, 1022,  973,  904,  904, 1000, 1000,
     1004, 1004, 1009, 1009,  916,  916, 1018, 1018, 1023, 1024,
     1025,  905, 1026, 1027, 1028, 1005, 1029, 1010, 1030, 1031,
     1032, 1019, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,

     1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
     1050, 1074, 1052, 1052, 1075,  963,  963, 1076, 1055, 1055,
     1077, 1079, 1654, 1051, 1654, 1654, 1053, 1654, 1654,  964,
     1654, 1654, 1654, 1654, 1654, 1057, 1057, 1654, 1080, 1654,
     1060, 1060, 1654, 1654, 1654, 1654,  980,  980, 1654, 1058,
     1654, 1078, 1078, 1654, 1061, 1654, 1654, 1654, 1654, 1654,
     1654,  981, 1654, 1054, 1654, 1056, 1654, 1063, 1081, 1082,
     1059, 1083, 1086, 1068, 1068, 1084, 1084, 1087, 1062, 1088,
     1091, 1092, 1067, 1064, 1065, 1093, 1654, 1069, 1654, 1073,
     1085, 1089, 1089, 1094, 1066, 1070, 1095, 1096, 1099, 1072,

     1100, 1097, 1097, 1000, 1000, 1101, 1090, 1102, 1102, 1004,
     1004, 1104, 1104, 1105, 1105, 1071, 1098, 1107, 1108, 1009,
     1009, 1110, 1103, 1111, 1005, 1109, 1109, 1112, 1106, 1113,
     1114, 1115, 1115, 1117, 1010, 1018, 1018, 1118, 1118, 1119,
     1120, 1121, 1122, 1123, 1124, 1125, 1116, 1126, 1127, 1130,
     1019, 1128, 1128, 1131, 1132, 1133, 1134, 1135, 1136, 1137,
     1138, 1139, 1140, 1141, 1142, 1143, 1129, 1144, 1145, 1050,
     1050, 1166, 1146, 1146, 1654, 1147, 1654, 1148, 1052, 1052,
     1167, 1168, 1654, 1051, 1654, 1654, 1169, 1654, 1149, 1149,
     1170, 1654, 1053, 1654, 1055, 1055, 1654, 1175, 1654, 1152,

     1152, 1654, 1176, 1654, 1057, 1057, 1654, 1654, 1654, 1654,
     1060, 1060, 1654, 1150, 1654, 1154, 1154, 1654, 1058, 1654,
     1654, 1151, 1654, 1654, 1061, 1654, 1180, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1181, 1654, 1654, 1183,
     1654, 1068, 1068, 1155, 1153, 1161, 1161, 1654, 1654, 1654,
     1654, 1654, 1184, 1654, 1654, 1069, 1654, 1158, 1654, 1654,
     1654, 1654, 1078, 1078, 1156, 1185, 1171, 1171, 1186, 1163,
     1157, 1162, 1173, 1173, 1159, 1187, 1160, 1084, 1084, 1191,
     1164, 1172, 1165, 1177, 1177, 1178, 1178, 1174, 1089, 1089,
     1182, 1182, 1085, 1188, 1188, 1097, 1097, 1190, 1190, 1192,

     1179, 1193, 1196, 1090, 1102, 1102, 1194, 1194, 1189, 1197,
     1098, 1104, 1104, 1105, 1105, 1195, 1195, 1109, 1109, 1103,
     1198, 1199, 1200, 1201, 1202, 1115, 1115, 1204, 1106, 1203,
     1203, 1118, 1118, 1205, 1206, 1208, 1209, 1210, 1207, 1211,
     1116, 1212, 1128, 1128, 1213, 1213, 1214, 1215, 1216, 1217,
     1218, 1219, 1220, 1221, 1222, 1223, 1224, 1129, 1225, 1146,
     1146, 1226, 1147, 1227, 1148, 1149, 1149, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1152, 1152, 1654, 1654, 1654,
     1654, 1230, 1230, 1247, 1154, 1154, 1250, 1654, 1654, 1654,
     1654, 1251, 1252, 1255, 1654, 1231, 1654, 1654, 1654, 1654,

     1654, 1253, 1253, 1233, 1228, 1229, 1238, 1654, 1259, 1654,
     1232, 1654, 1234, 1654, 1235, 1236, 1241, 1241, 1237, 1161,
     1161, 1654, 1248, 1654, 1239, 1654, 1249, 1654, 1240, 1654,
     1242, 1654, 1654, 1654, 1654, 1654, 1171, 1171, 1173, 1173,
     1254, 1254, 1267, 1244, 1256, 1256, 1177, 1177, 1178, 1178,
     1268, 1172, 1269, 1174, 1243, 1258, 1258, 1182, 1182, 1257,
     1260, 1260, 1271, 1179, 1262, 1262, 1245, 1265, 1265, 1188,
     1188, 1272, 1246, 1270, 1270, 1261, 1190, 1190, 1275, 1263,
     1273, 1273, 1266, 1276, 1189, 1194, 1194, 1195, 1195, 1277,
     1278, 1279, 1280, 1280, 1264, 1274, 1282, 1203, 1203, 1283,

     1283, 1285, 1286, 1287, 1288, 1289, 1290, 1281, 1291, 1213,
     1213, 1292, 1293, 1294, 1284, 1295, 1296, 1297, 1298, 1299,
     1300, 1654, 1654, 1654, 1654, 1230, 1230, 1654, 1654, 1654,
     1654, 1303, 1303, 1654, 1654, 1654, 1654, 1319, 1654, 1231,
     1654, 1320, 1301, 1302, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1321, 1654, 1306, 1304, 1322, 1654, 1307,
     1654, 1241, 1241, 1305, 1313, 1313, 1311, 1323, 1654, 1309,
     1654, 1324, 1314, 1314, 1654, 1242, 1654, 1654, 1325, 1654,
     1308, 1654, 1331, 1654, 1310, 1654, 1315, 1654, 1654, 1333,
     1654, 1253, 1253, 1254, 1254, 1256, 1256, 1312, 1326, 1326,

     1316, 1258, 1258, 1327, 1327, 1334, 1317, 1260, 1260, 1335,
     1257, 1329, 1329, 1262, 1262, 1330, 1330, 1318, 1328, 1265,
     1265, 1336, 1261, 1332, 1332, 1270, 1270, 1340, 1263, 1337,
     1337, 1273, 1273, 1341, 1266, 1339, 1339, 1342, 1343, 1344,
     1344, 1280, 1280, 1350, 1338, 1351, 1274, 1346, 1346, 1347,
     1347, 1283, 1283, 1352, 1345, 1353, 1281, 1349, 1349, 1354,
     1355, 1356, 1357, 1358, 1348, 1359, 1284, 1360, 1361, 1362,
     1363, 1364, 1654, 1654, 1654, 1654, 1303, 1303, 1654, 1654,
     1654, 1654, 1380, 1654, 1654, 1654, 1654, 1381, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1382, 1365, 1313, 1313, 1654, 1654, 1654, 1654, 1383, 1314,
     1314, 1384, 1366, 1368, 1369, 1654, 1385, 1654, 1386, 1367,
     1371, 1370, 1654, 1315, 1654, 1376, 1376, 1373, 1388, 1372,
     1377, 1389, 1654, 1390, 1654, 1391, 1374, 1375, 1654, 1392,
     1654, 1378, 1326, 1326, 1394, 1379, 1327, 1327, 1387, 1387,
     1329, 1329, 1330, 1330, 1332, 1332, 1337, 1337, 1393, 1393,
     1395, 1328, 1339, 1339, 1396, 1397, 1397, 1344, 1344, 1399,
     1399, 1338, 1346, 1346, 1347, 1347, 1400, 1400, 1349, 1349,
     1398, 1401, 1345, 1402, 1403, 1404, 1405, 1406, 1407, 1348,
     1408, 1409, 1410, 1411, 1412, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1429, 1654, 1376, 1376,
     1654, 1654, 1654, 1654, 1415, 1414, 1427, 1427, 1417, 1413,
     1654, 1654, 1654, 1654, 1430, 1431, 1434, 1420, 1416, 1432,
     1432, 1428, 1435, 1435, 1418, 1425, 1437, 1419, 1438, 1421,
     1439, 1422, 1440, 1423, 1433, 1426, 1441, 1436, 1424, 1387,
     1387, 1393, 1393, 1442, 1443, 1444, 1397, 1397, 1445, 1445,
     1399, 1399, 1400, 1400, 1446, 1447, 1448, 1449, 1450, 1451,
     1452, 1398, 1453, 1454, 1455, 1456, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,

     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1474, 1654, 1654,
     1475, 1654, 1473, 1473, 1427, 1427, 1476, 1461, 1465, 1465,
     1464, 1481, 1458, 1477, 1477, 1457, 1482, 1462, 1459, 1428,
     1460, 1654, 1466, 1654, 1468, 1469, 1469, 1463, 1467, 1432,
     1432, 1478, 1478, 1483, 1472, 1484, 1471, 1485, 1654, 1470,
     1654, 1435, 1435, 1486, 1433, 1487, 1479, 1480, 1480, 1488,
     1445, 1445, 1489, 1490, 1491, 1492, 1436, 1493, 1494, 1495,
     1654, 1654, 1654, 1654, 1498, 1498, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1513, 1654, 1654, 1499, 1654,
     1654, 1654, 1654, 1654, 1505, 1505, 1473, 1473, 1516, 1514,

     1514, 1518, 1508, 1508, 1519, 1497, 1504, 1654, 1496, 1654,
     1503, 1465, 1465, 1500, 1515, 1654, 1501, 1654, 1522, 1502,
     1469, 1469, 1477, 1477, 1654, 1466, 1654, 1509, 1509, 1507,
     1506, 1511, 1511, 1654, 1470, 1654, 1478, 1478, 1517, 1517,
     1654, 1510, 1654, 1523, 1654, 1512, 1654, 1480, 1480, 1520,
     1520, 1479, 1524, 1524, 1526, 1527, 1527, 1529, 1530, 1531,
     1531, 1654, 1552, 1654, 1521, 1498, 1498, 1525, 1534, 1534,
     1528, 1553, 1654, 1532, 1654, 1654, 1563, 1654, 1654, 1499,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1505, 1505, 1564, 1535, 1508, 1508, 1533,

     1541, 1541, 1576, 1509, 1509, 1577, 1654, 1654, 1654, 1654,
     1654, 1536, 1654, 1654, 1542, 1654, 1654, 1510, 1654, 1543,
     1543, 1538, 1539, 1537, 1511, 1511, 1547, 1547, 1540, 1580,
     1544, 1544, 1654, 1545, 1654, 1546, 1568, 1654, 1512, 1654,
     1587, 1548, 1654, 1654, 1654, 1654, 1514, 1514, 1549, 1549,
     1550, 1550, 1517, 1517, 1520, 1520, 1554, 1554, 1555, 1555,
     1596, 1515, 1557, 1557, 1600, 1551, 1524, 1524, 1606, 1521,
     1559, 1559, 1608, 1556, 1560, 1560, 1572, 1558, 1527, 1527,
     1613, 1525, 1562, 1562, 1531, 1531, 1614, 1565, 1565, 1561,
     1566, 1566, 1619, 1528, 1534, 1534, 1620, 1654, 1532, 1654,

     1654, 1625, 1654, 1654, 1567, 1654, 1654, 1654, 1654, 1654,
     1570, 1570, 1654, 1654, 1654, 1654, 1541, 1541, 1626, 1575,
     1575, 1578, 1578, 1654, 1571, 1654, 1543, 1543, 1631, 1654,
     1542, 1654, 1654,  946, 1654, 1544, 1544, 1573, 1545, 1654,
     1546, 1654, 1547, 1547, 1549, 1549,  945, 1569, 1654,  944,
     1654, 1574, 1550, 1550, 1579, 1579,  943, 1548, 1581, 1581,
     1554, 1554, 1555, 1555, 1584, 1584,  942, 1551, 1557, 1557,
     1585, 1585,  941, 1582, 1559, 1559,  940, 1556, 1560, 1560,
     1586, 1586,  939, 1558, 1562, 1562, 1565, 1565,  938, 1566,
     1566,  937, 1654, 1561, 1654, 1588, 1588,  936, 1654, 1654,

     1654, 1654, 1654, 1567, 1654, 1570, 1570,  935, 1654, 1583,
     1654,  934, 1591, 1591, 1654, 1654, 1654, 1654, 1654, 1571,
     1654, 1594, 1594, 1590,  933, 1654, 1589, 1654, 1575, 1575,
     1592, 1593, 1578, 1578, 1654, 1595, 1654, 1579, 1579, 1581,
     1581, 1654,  932, 1654, 1597, 1597, 1598, 1598, 1584, 1584,
     1585, 1585, 1586, 1586, 1582, 1588, 1588, 1654, 1654, 1654,
     1654, 1599, 1591, 1591, 1654, 1654, 1654, 1654, 1654,  931,
     1654, 1594, 1594,  930, 1602, 1654,  929, 1654, 1605, 1605,
     1597, 1597, 1598, 1598, 1654, 1595, 1654, 1607, 1607, 1603,
     1604, 1654, 1654, 1654, 1654,  928, 1601, 1599, 1654, 1654,

     1654, 1654, 1654,  927, 1654, 1605, 1605,  923, 1609, 1607,
     1607, 1654, 1654, 1654, 1654, 1654,  922, 1654, 1654, 1654,
     1654, 1654, 1654, 1610, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654,  921, 1654, 1615, 1611,  920, 1654,
     1612, 1654, 1654, 1654, 1654, 1654, 1654,  919, 1654, 1654,
     1616, 1654, 1654,  918, 1654, 1617, 1644, 1644, 1623, 1618,
     1621, 1624, 1636, 1636, 1654, 1622, 1654, 1654,  917, 1654,
     1627, 1628, 1629, 1636, 1636, 1632,  915, 1637, 1640, 1640,
      914, 1630, 1642, 1642, 1654, 1633, 1654, 1634, 1637,  913,
     1635, 1654, 1641, 1654,  912, 1654, 1643, 1654, 1646, 1646,

      911, 1640, 1640, 1638,  910, 1639, 1648, 1648, 1644, 1644,
      909, 1654, 1647, 1654, 1654, 1641, 1654, 1642, 1642, 1654,
      908, 1654, 1645, 1649, 1649,  907, 1650, 1650,  906,  901,
     1654, 1643, 1654, 1646, 1646,  899, 1654,  896, 1654, 1654,
     1651, 1654, 1652, 1652,  895,  894, 1654, 1647, 1654, 1648,
     1648,  892, 1649, 1649,  891, 1654,  889, 1654, 1650, 1650,
      887,  886, 1654,  885, 1654, 1654,  884, 1654, 1653, 1653,
      883, 1654, 1651, 1654, 1652, 1652,  882, 1653, 1653,  881,
      880, 1654,  877, 1654,  859,  858,  857, 1654,  856, 1654,
     1654,  855, 1654,   23,   23,   23,   23,   23,   23,   32,

       32,   32,   32,   32,   32,   34,   34,   34,   34,   34,
       34,   35,   35,   35,   35,   35,   35,   33,   33,   33,
       33,   33,   33,   36,   36,   36,   36,   36,   36,   37,
       37,   37,   37,   37,   37,   40,   40,   40,   40,   40,
       40,   44,  854,  853,   44,   44,   87,   87,   87,   87,
       87,   88,   88,  852,   88,   88,   88,   89,   89,   89,
      851,   89,   89,   90,   90,   90,   90,  850,   90,  849,
      848,  847,  846,  845,  844,  841,  840,  837,  836,  835,
      834,  833,  832,  831,  830,  829,  828,  827,  826,  825,
      824,  823,  822,  821,  819,  817,  816,  811,  810,  809,

      808,  807,  805,  804,  803,  801,  800,  799,  794,  793,
      792,  791,  790,  786,  782,  779,  776,  775,  774,  773,
      772,  767,  754,  753,  752,  751,  748,  747,  746,  745,
      744,  743,  742,  741,  740,  739,  738,  734,  733,  732,
      731,  730,  729,  728,  725,  724,  721,  720,  719,  718,
      717,  716,  715,  709,  708,  707,  706,  705,  704,  703,
      702,  698,  697,  696,  691,  690,  689,  688,  687,  685,
      684,  683,  679,  678,  677,  676,  675,  674,  673,  672,
      670,  669,  668,  667,  666,  665,  663,  662,  656,  655,
      654,  653,  652,  651,  650,  649,  648,  647,  644,  643,

      642,  639,  638,  637,  636,  635,  634,  633,  632,  631,
      629,  628,  627,  626,  625,  624,  623,  622,  621,  620,
      619,  618,  617,  616,  615,  614,  613,  612,  611,  610,
      609,  608,  607,  603,  602,  601,  600,  599,  598,  597,
      596,  595,  589,  588,  587,  583,  582,  581,  580,  579,
      578,  577,  576,  575,  572,  571,  570,  569,  568,  567,
      562,  561,  560,  559,  554,  553,  550,  549,  548,  547,
      546,  545,  544,  543,  542,  539,  538,  537,  536,  535,
      534,  533,  532,  531,  528,  527,  526,  523,  522,  521,
      520,  519,  518,  517,  516,  515,  514,  513,  512,  511,

      510,  509,  508,  507,  506,  504,  500,  499,  498,  494,
      493,  492,  491,  490,  489,  488,  487,  486,  485,  482,
      481,  479,  478,  474,  473,  471,  470,  469,  468,  467,
      466,  462,  461,  460,  459,  458,  457,  437,  436,  435,
      431,  430,  429,  428,  427,  426,  425,  424,  423,  422,
      421,  420,  419,  418,  415,  414,  413,  412,  408,  407,
      406,  405,  404,  403,  402,  401,  398,  397,  396,  395,
      394,  393,  388,  387,  386,  385,  382,  381,  378,  375,
      374,  373,  372,  371,  367,  363,  362,  361,  358,  357,
      356,  354,  353,  346,  345,  344,  343,  322,  321,  320,

      319,  316,  315,  312,  309,  308,  307,  306,  305,  304,
      303,  300,  299,  298,  297,  296,  295,  294,  293,  292,
      288,  287,  286,  285,  282,  281,  280,  279,  278,  275,
      274,  273,  272,  271,  270,  269,  268,  267,  266,  265,
      264,  263,  262,  261,  256,  255,  254,  253,  252,  249,
      232,  231,  230,  229,  228,  225,  224,  223,  222,  221,
      220,  219,  218,  217,  216,  215,  214,  213,  212,  211,
      208,  207,  206,  205,  204,  201,  200,  185,  184,  179,
      176,  173,  169,  155,  153,  138,  137,  132,  129,  126,
      108,   92,   91,   62,   62, 1654,   33,   33,   33,   33,

       33,   33,   33,   33,   19, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654
    } ;

static yyconst flex_int16_t yy_chk[3366] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,   30,   30,
       17,   15,   18,    1,    2,    2,    2,    2,    2,   23,
        2,   23,    2,    2,    2,    2,    2,    2,    2,   16,
        2,    2,   27,    0,   27,   16,    0,    2,   21,   21,
       44,   47,   44,   47,   49,   21,   21,   21,   21,   21,
       21,   21,   25,   21,   25,   25,   25,   25,   49,   25,
       21,   50,   50,   31,  845,   31,   25,   52,   51,   52,
       51,   55,   73,   55,   21,   21,   31,   73,   83,  121,
       21,   51,   83,  121,   21,   21,   26,   26,   52,   21,

       21,   21,   21,   21,   85,   85,   26,   26,   26,   26,
       45,   26,   45,   45,   45,   45,   26,   45,   46,   46,
       54,   55,   54,   57,   45,   57,   82,  147,   46,   46,
       46,   46,   82,   46,   26,   28,   28,   53,   46,   53,
       56,  147,   56,   28,   54,   28,   28,   28,   28,   58,
       28,   58,   57,  846,   54,   28,   46,   59,   60,   59,
       60,   56,   53,   75,   61,   75,   61,   71,  124,  120,
       58,   63,   63,   28,   29,  120,  124,   67,   67,   60,
       56,   29,  111,   71,   63,   71,   63,  111,   29,   61,
       67,   59,   67,   58,   65,   65,  224,  224,   65,   65,

       65,   65,  113,   65,  113,   80,   29,   29,   29,   29,
       29,   93,   29,   93,   29,   29,  848,  131,   29,   80,
       29,   80,   80,   29,   29,   29,   29,   43,   43,  291,
       94,   77,   94,  131,   43,   43,   43,   43,   43,   43,
       43,   77,   43,  171,  291,   77,   77,   64,   64,   43,
       93,  171,  849,   86,   81,   86,   81,   64,   64,   64,
       64,   86,   64,   43,   43,  850,   81,   64,   94,   43,
       81,   81,  153,   43,   43,   81,  852,  153,   43,   43,
       43,   43,   43,   48,   48,   64,   95,   96,   95,   96,
      100,   48,  100,   48,   48,   48,   48,  102,   48,  102,

       97,  109,   97,   48,   98,   99,   98,   99,  229,  101,
       96,  101,  229,  104,  103,  104,  103,  109,  105,  109,
      105,   48,   69,   69,   69,   69,   69,  853,   69,   95,
       69,   69,   97,  102,   69,  100,   69,   98,   99,   69,
       69,   69,   69,  103,  205,  104,  101,  105,  106,  106,
      106,  106,  205,  106,  107,  107,  205,  156,  115,  156,
      118,  157,  854,  157,  107,  107,  107,  107,  115,  107,
      154,  154,  115,  115,  118,  855,  118,  118,  119,  159,
      119,  159,  156,  154,  157,  154,  624,  158,  158,  160,
      119,  160,  200,  624,  119,  119,  161,  200,  161,  119,

      158,  158,  158,  162,  163,  162,  163,  164,  165,  164,
      165,  166,  167,  166,  167,  168,  159,  168,  194,  178,
      234,  161,  177,  177,  428,  162,  216,  216,  160,  163,
      856,  226,  194,  165,  164,  178,  226,  177,  428,  235,
      234,  235,  168,  236,  276,  236,  237,  237,  216,  276,
      166,  243,  167,  243,  238,  238,  253,  239,  239,  237,
      237,  237,  240,  240,  253,  243,  235,  238,  253,  238,
      239,  239,  239,  241,  241,  240,  240,  240,  857,  242,
      236,  242,  244,  445,  244,  445,  241,  241,  241,  247,
      248,  247,  248,  258,  258,  245,  245,  445,  246,  246,

      254,  254,  257,  257,  242,  262,  262,  244,  245,  245,
      245,  246,  246,  246,  247,  254,  497,  257,  248,  349,
      262,  266,  266,  268,  268,  274,  274,  279,  301,  301,
      497,  279,  284,  284,  349,  325,  266,  325,  268,  737,
      300,  300,  858,  266,  306,  306,  326,  284,  326,  300,
      798,  254,  327,  327,  284,  300,  321,  321,  334,  306,
      334,  268,  737,  321,  447,  327,  447,  327,  328,  328,
      325,  329,  329,  798,  284,  326,  330,  330,  447,  331,
      331,  328,  328,  328,  329,  861,  329,  332,  332,  330,
      330,  330,  331,  862,  331,  334,  335,  336,  335,  336,

      332,  332,  332,  333,  333,  877,  333,  342,  333,  342,
      337,  337,  351,  351,  338,  338,  333,  338,  333,  338,
      339,  339,  335,  337,  337,  337,  456,  338,  456,  338,
      341,  341,  882,  339,  339,  339,  336,  340,  340,  558,
      340,  558,  340,  341,  341,  341,  342,  350,  350,  883,
      340,  456,  340,  355,  355,  359,  359,  360,  360,  363,
      363,  558,  350,  364,  364,  365,  365,  368,  368,  652,
      359,  369,  369,  652,  363,  372,  372,  884,  364,  383,
      383,  438,  368,  438,  387,  387,  389,  389,  390,  390,
      372,  387,  411,  411,  383,  409,  409,  416,  416,  418,

      418,  389,  440,  440,  409,  411,  439,  885,  439,  383,
      409,  534,  416,  441,  441,  440,  534,  440,  438,  442,
      442,  873,  442,  873,  442,  551,  441,  551,  441,  707,
      446,  446,  442,  707,  442,  448,  448,  886,  448,  887,
      448,  889,  439,  446,  446,  446,  451,  451,  448,  451,
      448,  451,  454,  454,  873,  455,  455,  674,  455,  451,
      455,  451,  463,  463,  674,  454,  454,  454,  455,  551,
      455,  465,  465,  472,  472,  475,  475,  463,  476,  476,
      477,  477,  478,  478,  480,  480,  483,  483,  484,  484,
      475,  485,  485,  495,  495,  496,  496,  478,  505,  505,

      891,  483,  523,  523,  524,  524,  485,  892,  495,  539,
      539,  552,  555,  552,  555,  556,  556,  524,  573,  573,
      485,  485,  557,  557,  566,  894,  566,  598,  556,  556,
      556,  539,  598,  573,  757,  557,  757,  557,  555,  563,
      563,  871,  563,  871,  563,  574,  574,  895,  566,  661,
      552,  661,  563,  896,  563,  583,  583,  584,  584,  585,
      585,  586,  586,  590,  590,  591,  591,  592,  592,  757,
      583,  599,  599,  871,  585,  603,  603,  604,  604,  661,
      591,  613,  613,  614,  614,  897,  599,  628,  628,  898,
      603,  630,  630,  638,  638,  899,  613,  603,  614,  645,

      645,  657,  657,  658,  664,  658,  664,  660,  660,  666,
      666,  613,  667,  667,  657,  657,  657,  628,  664,  638,
      660,  659,  660,  659,  666,  638,  659,  667,  659,  764,
      659,  764,  658,  671,  671,  659,  676,  676,  659,  659,
      901,  659,  678,  678,  680,  680,  681,  681,  682,  682,
      764,  676,  683,  683,  686,  686,  758,  678,  758,  680,
      690,  690,  694,  694,  695,  695,  902,  683,  699,  699,
      700,  700,  678,  706,  706,  690,  903,  694,  710,  710,
      711,  711,  906,  699,  713,  713,  690,  907,  706,  714,
      714,  758,  690,  710,  726,  726,  733,  733,  908,  713,

      735,  735,  755,  755,  910,  756,  756,  759,  756,  759,
      756,  760,  761,  760,  761,  755,  755,  755,  756,  762,
      756,  762,  765,  763,  765,  763,  766,  911,  766,  768,
      768,  769,  769,  912,  761,  760,  771,  771,  867,  759,
      867,  759,  770,  770,  768,  780,  780,  765,  766,  914,
      760,  761,  763,  915,  762,  781,  781,  770,  917,  762,
      780,  783,  783,  784,  784,  787,  787,  788,  788,  789,
      789,  793,  793,  795,  795,  918,  783,  796,  796,  799,
      799,  867,  788,  802,  802,  806,  806,  919,  795,  812,
      812,  813,  813,  920,  799,  818,  818,  820,  820,  823,

      823,  921,  860,  860,  812,  860,  823,  860,  863,  864,
      863,  864,  865,  865,  866,  860,  866,  860,  869,  868,
      869,  868,  870,  923,  870,  865,  865,  865,  874,  872,
      874,  872,  875,  876,  875,  876,  878,  878,  879,  879,
      880,  880,  863,  864,  868,  881,  881,  880,  869,  924,
      870,  872,  888,  888,  866,  875,  890,  890,  893,  893,
      881,  900,  900,  876,  925,  874,  904,  904,  905,  905,
      909,  909,  913,  913,  916,  916,  922,  922,  926,  927,
      928,  904,  929,  930,  931,  909,  933,  913,  934,  935,
      936,  922,  938,  939,  940,  941,  942,  943,  945,  946,

      947,  950,  951,  952,  953,  954,  955,  956,  958,  961,
      961,  976,  962,  962,  977,  963,  963,  978,  964,  964,
      979,  982,  961,  961,  961,  962,  962,  962,  963,  963,
      963,  964,  965,  964,  965,  966,  966,  967,  983,  967,
      968,  968,  969,  970,  969,  970,  980,  980,  966,  966,
      966,  981,  981,  968,  968,  968,  971,  972,  971,  972,
      974,  980,  974,  962,  975,  965,  975,  969,  984,  985,
      967,  986,  988,  973,  973,  987,  987,  989,  968,  990,
      992,  993,  972,  970,  970,  994,  973,  973,  973,  975,
      987,  991,  991,  995,  971,  973,  996,  997,  999,  974,

     1001,  998,  998, 1000, 1000, 1002,  991, 1003, 1003, 1004,
     1004, 1005, 1005, 1006, 1006,  973,  998, 1007, 1008, 1009,
     1009, 1011, 1003, 1012, 1004, 1010, 1010, 1013, 1006, 1014,
     1015, 1016, 1016, 1017, 1009, 1018, 1018, 1019, 1019, 1020,
     1021, 1022, 1023, 1024, 1027, 1028, 1016, 1030, 1031, 1033,
     1018, 1032, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1041,
     1042, 1043, 1044, 1045, 1046, 1047, 1032, 1048, 1049, 1050,
     1050, 1074, 1051, 1051, 1054, 1051, 1054, 1051, 1052, 1052,
     1075, 1076, 1050, 1050, 1050, 1051, 1077, 1051, 1053, 1053,
     1079, 1052, 1052, 1052, 1055, 1055, 1056, 1082, 1056, 1058,

     1058, 1053, 1083, 1053, 1057, 1057, 1059, 1055, 1059, 1055,
     1060, 1060, 1058, 1054, 1058, 1061, 1061, 1057, 1057, 1057,
     1062, 1056, 1062, 1060, 1060, 1060, 1087, 1063, 1061, 1063,
     1061, 1064, 1065, 1064, 1065, 1066, 1088, 1066, 1067, 1091,
     1067, 1068, 1068, 1062, 1059, 1069, 1069, 1070, 1071, 1070,
     1071, 1072, 1092, 1072, 1068, 1068, 1068, 1065, 1069, 1073,
     1069, 1073, 1078, 1078, 1063, 1093, 1080, 1080, 1094, 1071,
     1064, 1070, 1081, 1081, 1066, 1095, 1067, 1084, 1084, 1099,
     1072, 1080, 1073, 1085, 1085, 1086, 1086, 1081, 1089, 1089,
     1090, 1090, 1084, 1096, 1096, 1097, 1097, 1098, 1098, 1100,

     1086, 1101, 1107, 1089, 1102, 1102, 1103, 1103, 1096, 1108,
     1097, 1104, 1104, 1105, 1105, 1106, 1106, 1109, 1109, 1102,
     1110, 1111, 1112, 1113, 1114, 1115, 1115, 1117, 1105, 1116,
     1116, 1118, 1118, 1119, 1120, 1121, 1122, 1123, 1120, 1124,
     1115, 1126, 1128, 1128, 1129, 1129, 1130, 1132, 1133, 1134,
     1135, 1136, 1138, 1139, 1140, 1141, 1142, 1128, 1144, 1146,
     1146, 1147, 1146, 1148, 1146, 1149, 1149, 1150, 1151, 1150,
     1151, 1155, 1146, 1155, 1146, 1152, 1152, 1157, 1149, 1157,
     1149, 1153, 1153, 1166, 1154, 1154, 1168, 1158, 1152, 1158,
     1152, 1169, 1170, 1175, 1153, 1153, 1153, 1154, 1156, 1154,

     1156, 1172, 1172, 1156, 1150, 1151, 1157, 1159, 1180, 1159,
     1155, 1162, 1156, 1162, 1156, 1156, 1160, 1160, 1156, 1161,
     1161, 1163, 1167, 1163, 1158, 1164, 1167, 1164, 1159, 1160,
     1160, 1160, 1161, 1165, 1161, 1165, 1171, 1171, 1173, 1173,
     1174, 1174, 1185, 1163, 1176, 1176, 1177, 1177, 1178, 1178,
     1186, 1171, 1187, 1173, 1162, 1179, 1179, 1182, 1182, 1176,
     1181, 1181, 1191, 1178, 1183, 1183, 1164, 1184, 1184, 1188,
     1188, 1192, 1165, 1189, 1189, 1181, 1190, 1190, 1196, 1183,
     1193, 1193, 1184, 1197, 1188, 1194, 1194, 1195, 1195, 1198,
     1199, 1200, 1201, 1201, 1183, 1193, 1202, 1203, 1203, 1204,

     1204, 1205, 1206, 1207, 1208, 1209, 1210, 1201, 1211, 1213,
     1213, 1214, 1215, 1216, 1204, 1217, 1218, 1220, 1221, 1222,
     1223, 1228, 1229, 1228, 1229, 1230, 1230, 1232, 1233, 1232,
     1233, 1231, 1231, 1234, 1235, 1234, 1235, 1247, 1230, 1230,
     1230, 1248, 1228, 1229, 1231, 1236, 1231, 1236, 1237, 1238,
     1237, 1238, 1239, 1249, 1239, 1234, 1232, 1250, 1240, 1235,
     1240, 1241, 1241, 1233, 1242, 1242, 1239, 1251, 1244, 1237,
     1244, 1252, 1243, 1243, 1241, 1241, 1241, 1242, 1255, 1242,
     1236, 1245, 1264, 1245, 1238, 1243, 1243, 1243, 1246, 1267,
     1246, 1253, 1253, 1254, 1254, 1256, 1256, 1240, 1257, 1257,

     1244, 1258, 1258, 1259, 1259, 1268, 1245, 1260, 1260, 1269,
     1256, 1261, 1261, 1262, 1262, 1263, 1263, 1246, 1259, 1265,
     1265, 1271, 1260, 1266, 1266, 1270, 1270, 1275, 1262, 1272,
     1272, 1273, 1273, 1276, 1265, 1274, 1274, 1277, 1278, 1279,
     1279, 1280, 1280, 1285, 1272, 1286, 1273, 1281, 1281, 1282,
     1282, 1283, 1283, 1287, 1279, 1288, 1280, 1284, 1284, 1289,
     1290, 1291, 1292, 1293, 1282, 1294, 1283, 1295, 1296, 1297,
     1298, 1299, 1301, 1302, 1301, 1302, 1303, 1303, 1304, 1305,
     1304, 1305, 1319, 1307, 1306, 1307, 1306, 1320, 1308, 1303,
     1308, 1303, 1309, 1310, 1309, 1310, 1311, 1312, 1311, 1312,

     1321, 1301, 1313, 1313, 1318, 1316, 1318, 1316, 1322, 1314,
     1314, 1323, 1302, 1305, 1306, 1313, 1324, 1313, 1325, 1304,
     1308, 1307, 1314, 1314, 1314, 1315, 1315, 1310, 1331, 1309,
     1316, 1333, 1317, 1334, 1317, 1335, 1311, 1312, 1315, 1336,
     1315, 1317, 1326, 1326, 1340, 1318, 1327, 1327, 1328, 1328,
     1329, 1329, 1330, 1330, 1332, 1332, 1337, 1337, 1338, 1338,
     1341, 1327, 1339, 1339, 1342, 1343, 1343, 1344, 1344, 1345,
     1345, 1337, 1346, 1346, 1347, 1347, 1348, 1348, 1349, 1349,
     1343, 1351, 1344, 1352, 1353, 1355, 1357, 1358, 1359, 1347,
     1360, 1361, 1362, 1363, 1364, 1365, 1366, 1365, 1366, 1367,

     1368, 1367, 1368, 1369, 1370, 1369, 1370, 1371, 1372, 1371,
     1372, 1373, 1374, 1373, 1374, 1375, 1381, 1375, 1376, 1376,
     1377, 1378, 1377, 1378, 1367, 1366, 1380, 1380, 1369, 1365,
     1379, 1376, 1379, 1376, 1382, 1383, 1385, 1372, 1368, 1384,
     1384, 1380, 1386, 1386, 1370, 1378, 1388, 1371, 1389, 1373,
     1390, 1374, 1391, 1375, 1384, 1379, 1392, 1386, 1377, 1387,
     1387, 1393, 1393, 1394, 1395, 1396, 1397, 1397, 1398, 1398,
     1399, 1399, 1400, 1400, 1401, 1402, 1403, 1405, 1406, 1407,
     1408, 1397, 1409, 1410, 1411, 1412, 1413, 1414, 1413, 1414,
     1415, 1416, 1415, 1416, 1417, 1418, 1417, 1418, 1419, 1420,

     1419, 1420, 1422, 1425, 1422, 1425, 1426, 1429, 1426, 1423,
     1430, 1423, 1428, 1428, 1427, 1427, 1431, 1417, 1421, 1421,
     1420, 1437, 1414, 1433, 1433, 1413, 1438, 1418, 1415, 1427,
     1416, 1421, 1421, 1421, 1423, 1424, 1424, 1419, 1422, 1432,
     1432, 1434, 1434, 1439, 1426, 1440, 1425, 1441, 1424, 1424,
     1424, 1435, 1435, 1442, 1432, 1443, 1434, 1436, 1436, 1444,
     1445, 1445, 1446, 1448, 1449, 1450, 1435, 1452, 1453, 1455,
     1457, 1458, 1457, 1458, 1459, 1459, 1460, 1461, 1460, 1461,
     1462, 1463, 1462, 1463, 1464, 1474, 1464, 1459, 1459, 1459,
     1467, 1468, 1467, 1468, 1466, 1466, 1473, 1473, 1476, 1475,

     1475, 1481, 1470, 1470, 1482, 1458, 1464, 1466, 1457, 1466,
     1463, 1465, 1465, 1460, 1475, 1470, 1461, 1470, 1484, 1462,
     1469, 1469, 1477, 1477, 1465, 1465, 1465, 1471, 1471, 1468,
     1467, 1472, 1472, 1469, 1469, 1469, 1478, 1478, 1479, 1479,
     1471, 1471, 1471, 1485, 1472, 1472, 1472, 1480, 1480, 1483,
     1483, 1478, 1486, 1486, 1487, 1488, 1488, 1491, 1492, 1496,
     1496, 1497, 1518, 1497, 1483, 1498, 1498, 1486, 1499, 1499,
     1488, 1519, 1496, 1496, 1496, 1500, 1529, 1500, 1498, 1498,
     1498, 1499, 1501, 1499, 1501, 1502, 1503, 1502, 1503, 1506,
     1504, 1506, 1504, 1505, 1505, 1530, 1500, 1508, 1508, 1497,

     1507, 1507, 1545, 1509, 1509, 1546, 1505, 1535, 1505, 1535,
     1508, 1501, 1508, 1507, 1507, 1507, 1509, 1509, 1509, 1510,
     1510, 1503, 1504, 1502, 1511, 1511, 1513, 1513, 1506, 1552,
     1512, 1512, 1510, 1512, 1510, 1512, 1535, 1511, 1511, 1511,
     1563, 1513, 1538, 1512, 1538, 1512, 1514, 1514, 1515, 1515,
     1516, 1516, 1517, 1517, 1520, 1520, 1521, 1521, 1522, 1522,
     1580, 1514, 1523, 1523, 1587, 1516, 1524, 1524, 1596, 1520,
     1525, 1525, 1600, 1522, 1526, 1526, 1538, 1523, 1527, 1527,
     1606, 1524, 1528, 1528, 1531, 1531, 1608, 1532, 1532, 1526,
     1533, 1533, 1613, 1527, 1534, 1534, 1614, 1531, 1531, 1531,

     1532, 1619, 1532, 1533, 1533, 1533, 1536, 1534, 1536, 1534,
     1537, 1537, 1539, 1540, 1539, 1540, 1541, 1541, 1620, 1542,
     1542, 1548, 1548, 1537, 1537, 1537, 1543, 1543, 1625, 1541,
     1541, 1541, 1542,  844, 1542, 1544, 1544, 1539, 1544, 1543,
     1544, 1543, 1547, 1547, 1549, 1549,  843, 1536, 1544,  842,
     1544, 1540, 1550, 1550, 1551, 1551,  841, 1547, 1553, 1553,
     1554, 1554, 1555, 1555, 1556, 1556,  840, 1550, 1557, 1557,
     1558, 1558,  839, 1553, 1559, 1559,  838, 1555, 1560, 1560,
     1561, 1561,  837, 1557, 1562, 1562, 1565, 1565,  836, 1566,
     1566,  835, 1568, 1560, 1568, 1567, 1567,  834, 1569, 1565,

     1569, 1565, 1566, 1566, 1566, 1570, 1570,  833, 1567, 1553,
     1567,  832, 1571, 1571, 1572, 1573, 1572, 1573, 1570, 1570,
     1570, 1574, 1574, 1569,  831, 1571, 1568, 1571, 1575, 1575,
     1572, 1573, 1578, 1578, 1574, 1574, 1574, 1579, 1579, 1581,
     1581, 1575,  830, 1575, 1582, 1582, 1583, 1583, 1584, 1584,
     1585, 1585, 1586, 1586, 1581, 1588, 1588, 1589, 1590, 1589,
     1590, 1583, 1591, 1591, 1592, 1593, 1592, 1593, 1588,  829,
     1588, 1594, 1594,  828, 1590, 1591,  827, 1591, 1595, 1595,
     1597, 1597, 1598, 1598, 1594, 1594, 1594, 1599, 1599, 1592,
     1593, 1595, 1601, 1595, 1601,  826, 1589, 1598, 1602, 1603,

     1602, 1603, 1604,  825, 1604, 1605, 1605,  822, 1601, 1607,
     1607, 1609, 1610, 1609, 1610, 1611,  821, 1611, 1605, 1612,
     1605, 1612, 1615, 1602, 1615, 1616, 1617, 1616, 1617, 1618,
     1621, 1618, 1621, 1623,  819, 1623, 1609, 1603,  817, 1622,
     1604, 1622, 1624, 1627, 1624, 1627, 1628,  816, 1628, 1629,
     1610, 1629, 1630,  815, 1630, 1611, 1637, 1637, 1617, 1612,
     1615, 1618, 1631, 1631, 1632, 1616, 1632, 1633,  814, 1633,
     1621, 1622, 1623, 1636, 1636, 1627,  811, 1631, 1634, 1634,
      810, 1624, 1635, 1635, 1638, 1628, 1638, 1629, 1636,  809,
     1630, 1634, 1634, 1634,  808, 1635, 1635, 1635, 1639, 1639,

      807, 1640, 1640, 1632,  805, 1633, 1641, 1641, 1644, 1644,
      804, 1639, 1639, 1639, 1640, 1640, 1640, 1642, 1642, 1641,
      803, 1641, 1638, 1643, 1643,  801, 1645, 1645,  800,  797,
     1642, 1642, 1642, 1646, 1646,  794, 1643,  792, 1643, 1645,
     1645, 1645, 1647, 1647,  791,  790, 1646, 1646, 1646, 1648,
     1648,  786, 1649, 1649,  785, 1647,  782, 1647, 1650, 1650,
      779,  778, 1648,  777, 1648, 1649,  776, 1649, 1651, 1651,
      775, 1650, 1650, 1650, 1652, 1652,  774, 1653, 1653,  773,
      772, 1651,  767, 1651,  754,  753,  752, 1652,  751, 1652,
     1653,  750, 1653, 1655, 1655, 1655, 1655, 1655, 1655, 1656,

     1656, 1656, 1656, 1656, 1656, 1657, 1657, 1657, 1657, 1657,
     1657, 1658, 1658, 1658, 1658, 1658, 1658, 1659, 1659, 1659,
     1659, 1659, 1659, 1660, 1660, 1660, 1660, 1660, 1660, 1661,
     1661, 1661, 1661, 1661, 1661, 1662, 1662, 1662, 1662, 1662,
     1662, 1663,  749,  748, 1663, 1663, 1664, 1664, 1664, 1664,
     1664, 1665, 1665,  747, 1665, 1665, 1665, 1666, 1666, 1666,
      746, 1666, 1666, 1667, 1667, 1667, 1667,  745, 1667,  744,
      743,  742,  741,  740,  739,  736,  734,  732,  731,  730,
      729,  728,  727,  725,  724,  723,  722,  721,  720,  719,
      718,  717,  716,  715,  712,  709,  708,  705,  704,  703,

      702,  701,  698,  697,  696,  693,  692,  691,  689,  688,
      687,  685,  684,  679,  677,  675,  673,  672,  670,  669,
      668,  665,  656,  655,  654,  653,  650,  649,  648,  647,
      646,  644,  643,  642,  641,  640,  639,  637,  636,  635,
      634,  633,  631,  629,  627,  625,  623,  622,  621,  620,
      619,  616,  615,  612,  611,  610,  609,  608,  607,  606,
      605,  602,  601,  600,  597,  596,  595,  594,  593,  589,
      588,  587,  582,  581,  580,  579,  578,  577,  576,  575,
      572,  571,  570,  569,  568,  567,  565,  564,  550,  548,
      547,  546,  545,  544,  543,  542,  541,  540,  538,  537,

      536,  533,  532,  531,  530,  529,  528,  527,  526,  525,
      521,  520,  519,  518,  517,  516,  515,  514,  513,  512,
      511,  510,  509,  508,  507,  506,  504,  503,  502,  501,
      500,  499,  498,  494,  493,  492,  491,  490,  489,  488,
      487,  486,  482,  481,  479,  474,  473,  471,  470,  469,
      468,  467,  466,  464,  462,  461,  460,  459,  458,  457,
      453,  452,  450,  449,  444,  443,  437,  436,  435,  434,
      433,  432,  431,  430,  429,  427,  426,  425,  424,  423,
      422,  421,  420,  419,  415,  414,  413,  410,  408,  407,
      406,  405,  404,  403,  402,  401,  400,  398,  397,  396,

      395,  394,  393,  392,  391,  388,  386,  385,  384,  382,
      381,  380,  379,  378,  377,  376,  375,  374,  373,  371,
      370,  367,  366,  362,  361,  358,  357,  356,  354,  353,
      352,  348,  347,  346,  345,  344,  343,  324,  323,  322,
      320,  319,  318,  317,  316,  315,  314,  313,  312,  311,
      310,  309,  308,  307,  305,  304,  303,  302,  299,  298,
      297,  296,  295,  294,  293,  292,  290,  289,  288,  287,
      286,  285,  283,  282,  281,  280,  278,  277,  275,  273,
      272,  271,  270,  269,  267,  265,  264,  263,  261,  260,
      259,  256,  255,  252,  251,  250,  249,  233,  232,  231,

      230,  228,  227,  225,  223,  222,  221,  220,  219,  218,
      217,  215,  214,  213,  211,  210,  209,  208,  207,  206,
      204,  203,  202,  201,  199,  198,  197,  196,  195,  193,
      192,  191,  190,  189,  188,  187,  186,  185,  184,  183,
      182,  181,  180,  179,  176,  175,  174,  173,  172,  170,
      152,  151,  150,  149,  148,  146,  145,  144,  143,  142,
      141,  140,  139,  138,  137,  136,  135,  134,  133,  132,
      129,  128,  127,  126,  125,  123,  122,  117,  116,  114,
      112,  110,  108,   91,   84,   79,   78,   76,   74,   72,
       68,   42,   39,   24,   22,   19,   14,   13,    8,    7,

        6,    5,    4,    3, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[213] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "OSParseosrl.l"
/* $Id$ */
/** @file parseosrl.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin, 
 * @version 2.0, 19/07/2009
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005-2009, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, Dalhousie University and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 17 "OSParseosrl.l"

#include <iostream>
#include "OSGeneral.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSrLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosrl.tab.hpp"
#include "OSResult.h"


//#define PARSERDEBUG

#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;
     








#line 103 "OSParseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 1845 "OSParseosrl.cpp"

#define INITIAL 0
#define osrlattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 113 "OSParseosrl.l"



#line 2090 "OSParseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1655 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3305 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 116 "OSParseosrl.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 120 "OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 122 "OSParseosrl.l"
{ YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 123 "OSParseosrl.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 125 "OSParseosrl.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 141 "OSParseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 145 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 146 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 147 "OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 148 "OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 149 "OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFIDXATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 150 "OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 151 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 152 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 153 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTRESULTSATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 154 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVERESULTSATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 155 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERRESULTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 156 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERSOLUTIONRESULTSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 157 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLERESULTSATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 158 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 159 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLVEROUTPUTSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 160 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSUBSTATUSESATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 161 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFTIMESATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 162 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 163 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 164 "OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 166 "OSParseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 167 "OSParseosrl.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 168 "OSParseosrl.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 169 "OSParseosrl.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 170 "OSParseosrl.l"
{YY_PRINT; return(TARGETOBJECTIVEIDXATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 174 "OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 175 "OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 176 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 177 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 178 "OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 179 "OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 180 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 181 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 182 "OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 183 "OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 184 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 185 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 186 "OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 187 "OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 188 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 189 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 190 "OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 191 "OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 192 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 193 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 194 "OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 195 "OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 196 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 197 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 198 "OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 199 "OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 200 "OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 201 "OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
/* top level elements */
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 205 "OSParseosrl.l"
{return(OSRLSTARTEMPTY);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 206 "OSParseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 207 "OSParseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 209 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 210 "OSParseosrl.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 212 "OSParseosrl.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 213 "OSParseosrl.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 215 "OSParseosrl.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 216 "OSParseosrl.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 218 "OSParseosrl.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 219 "OSParseosrl.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 221 "OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 222 "OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
/* The <item> element is treated specially because it may legitimately contain special characters */
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 227 "OSParseosrl.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 228 "OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 229 "OSParseosrl.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 230 "OSParseosrl.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
/* Remaining elements, sorted alpabetically. */
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 234 "OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMESTART);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 235 "OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMEEND);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 236 "OSParseosrl.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 237 "OSParseosrl.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 238 "OSParseosrl.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 239 "OSParseosrl.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 240 "OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUNUMBERSTART);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 241 "OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUNUMBEREND);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 242 "OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUSPEEDSTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 243 "OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUSPEEDEND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 244 "OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEDISKSPACESTART);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 245 "OSParseosrl.l"
{YY_PRINT; return(AVAILABLEDISKSPACEEND);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 246 "OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEMEMORYSTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 247 "OSParseosrl.l"
{YY_PRINT; return(AVAILABLEMEMORYEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 248 "OSParseosrl.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 249 "OSParseosrl.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 250 "OSParseosrl.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 251 "OSParseosrl.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 252 "OSParseosrl.l"
{YY_PRINT;  return(BASISSTATUSSTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 253 "OSParseosrl.l"
{YY_PRINT; return(BASISSTATUSEND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 254 "OSParseosrl.l"
{YY_PRINT;  return(BASSTATUSSTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 255 "OSParseosrl.l"
{YY_PRINT; return(BASSTATUSEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 256 "OSParseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 257 "OSParseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 258 "OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 259 "OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 260 "OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTSTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 261 "OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 262 "OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATESTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 263 "OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATEEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 264 "OSParseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 265 "OSParseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 266 "OSParseosrl.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 267 "OSParseosrl.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 268 "OSParseosrl.l"
{YY_PRINT;  return(ENDTIMESTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 269 "OSParseosrl.l"
{YY_PRINT;  return(ENDTIMEEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 270 "OSParseosrl.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 271 "OSParseosrl.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 272 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 273 "OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 274 "OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 275 "OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 276 "OSParseosrl.l"
{YY_PRINT; return(IDXSTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 277 "OSParseosrl.l"
{YY_PRINT; return(IDXEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 278 "OSParseosrl.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 279 "OSParseosrl.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 280 "OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 281 "OSParseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 282 "OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 283 "OSParseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 284 "OSParseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 285 "OSParseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 286 "OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 287 "OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 288 "OSParseosrl.l"
{YY_PRINT;  return(OPTIMIZATIONSOLUTIONSTATUSSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 289 "OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSOLUTIONSTATUSEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 290 "OSParseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 291 "OSParseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 292 "OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 293 "OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 294 "OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 295 "OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLUTIONRESULTEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 296 "OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSSTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 297 "OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 298 "OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 299 "OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 300 "OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMESTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 301 "OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMEEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 302 "OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 303 "OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 304 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 305 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 306 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONSTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 307 "OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 308 "OSParseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 309 "OSParseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 310 "OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDSTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 311 "OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 312 "OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 313 "OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 314 "OSParseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 315 "OSParseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 316 "OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMESTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 317 "OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMEEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 318 "OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 319 "OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 320 "OSParseosrl.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 321 "OSParseosrl.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 322 "OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONSTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 323 "OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 324 "OSParseosrl.l"
{YY_PRINT;  return(TIMESTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 325 "OSParseosrl.l"
{YY_PRINT;  return(TIMEEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 326 "OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 327 "OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 328 "OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPSTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 329 "OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 330 "OSParseosrl.l"
{YY_PRINT; return(TIMINGINFORMATIONSTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 331 "OSParseosrl.l"
{YY_PRINT;  return(TIMINGINFORMATIONEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 332 "OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFARSTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 333 "OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFAREND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 334 "OSParseosrl.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 335 "OSParseosrl.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 336 "OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBERSTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 337 "OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBEREND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 338 "OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDSTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 339 "OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDEND);} 
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 340 "OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACESTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 341 "OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACEEND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 342 "OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYSTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 343 "OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 344 "OSParseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 345 "OSParseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 346 "OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 347 "OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 348 "OSParseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 349 "OSParseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 350 "OSParseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 351 "OSParseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 352 "OSParseosrl.l"
{YY_PRINT; return(VARIDXSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 353 "OSParseosrl.l"
{YY_PRINT; return(VARIDXEND);}
	YY_BREAK
/* environments and comments */
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 358 "OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext);   yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 359 "OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 361 "OSParseosrl.l"
BEGIN comment;
	YY_BREAK
case 201:
#line 363 "OSParseosrl.l"
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 363 "OSParseosrl.l"
;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 364 "OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 366 "OSParseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 205:
#line 368 "OSParseosrl.l"
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 368 "OSParseosrl.l"
;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 369 "OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 372 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 373 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 374 "OSParseosrl.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSRLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 378 "OSParseosrl.l"
{ 
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 390 "OSParseosrl.l"
ECHO;
	YY_BREAK
#line 3478 "OSParseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1655 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1655 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1654);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 390 "OSParseosrl.l"





