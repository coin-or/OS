#line 2 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.cpp"

#line 4 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 128
#define YY_END_OF_BUFFER 129
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1095] =
    {   0,
        1,    1,  126,  126,  124,  124,  125,  125,    0,    0,
        0,    0,    0,    0,    0,    0,  129,  127,    1,    1,
        2,  115,    2,  127,    6,  127,    5,  127,    4,  115,
      126,  128,  124,  125,  117,  118,  117,  121,  122,  121,
        1,    0,    6,    0,    5,    0,    4,    0,    0,    0,
        0,    0,    0,    0,    0,    1,  115,    6,    5,  115,
      115,  115,  115,  115,  115,  115,  115,    3,    6,    6,
        6,  115,    7,    5,    5,    0,    0,  120,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    4,
      115,  126,  124,  125,    0,  123,    6,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  115,  115,  115,  115,  115,  115,  115,
      115,  115,    0,    6,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    6,  119,    6,    0,    0,    0,    0,
        0,    6,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      116,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   97,    0,

        0,    0,    0,    0,   93,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   89,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  115,  115,  115,  115,  115,  115,  115,  115,  115,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   56,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   72,    0,    0,    0,    0,
        0,    0,    0,   72,    0,    0,    0,   21,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  115,  115,  115,

      115,  115,  115,  115,  115,    0,   98,    0,    0,    0,
        0,    0,   57,    0,    0,    0,   94,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       90,    0,    0,    0,    0,    0,   56,    0,    0,    0,
        0,   48,   47,  101,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   21,    0,   25,   26,    0,    0,    0,   29,   30,
        0,   37,   38,    0,    0,  115,  115,  115,  115,  115,
       98,    0,    0,    0,    0,   57,    0,    0,   94,    0,
        0,    0,   49,    0,    0,    0,    0,    0,    0,    0,

       73,    0,    0,   90,    0,    0,    0,    0,    0,    0,
        0,   67,    0,    0,    0,    0,    0,    0,    0,   83,
        0,  113,    0,   85,    0,    0,    0,    0,    0,    0,
        0,    0,   23,   24,    0,    0,    0,   27,   28,    0,
       35,   36,    0,   41,   42,  115,  115,  115,  115,    0,
        0,    0,    0,    0,   69,    0,    0,    0,   49,    0,
      102,    0,    0,    0,    0,    0,    0,   73,    0,    0,
        0,    0,    0,    0,    0,  112,   67,   68,    0,    0,
        0,    0,    0,  107,    0,    0,    0,   52,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   39,   40,

      115,  115,  115,  115,    0,    0,    0,    0,   69,    0,
        0,    0,  102,    0,    0,  108,    0,    0,    0,   84,
        0,   53,    0,    0,   86,    0,    0,    0,    0,   50,
        0,    0,    0,    0,   74,    0,    0,    0,    0,   54,
        0,    0,   81,   52,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      115,  115,  115,  115,  115,  115,  115,  115,  115,    0,
        0,    0,   51,    0,    0,    0,   76,    0,    0,    0,
      108,    0,   55,    0,    0,    0,   84,   53,    0,   86,
        0,    0,    0,   50,    0,    0,  114,   74,   75,    0,

        0,    0,   54,    0,    0,    0,   91,    0,    0,    0,
        0,   33,   34,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  115,  115,  115,  115,  115,  115,  115,  115,
      115,    0,    0,   51,    0,    0,   76,    0,    0,    0,
       55,    0,    0,    0,   82,    0,    0,    0,   87,    0,
        0,   95,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   31,   32,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  115,  115,  115,  115,  115,  115,  115,  115,
      115,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       82,    0,    0,   92,   99,    0,    0,    0,    0,    0,

        0,    0,   58,    0,    0,    0,    0,    0,    0,    0,
       20,    0,    0,   19,    0,    0,    0,    0,    0,    0,
       18,    0,    0,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,    0,    0,   88,    0,    0,
        0,   96,    0,    0,    0,    0,   60,    0,   92,    0,
        0,   79,    0,    0,    0,   61,  109,   58,   59,    0,
        0,    0,    0,   45,   46,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  115,  115,  115,  115,
      115,  115,  115,  115,    0,  100,   88,    0,    0,   96,
        0,    0,    0,   63,   60,    0,   77,    0,    0,   64,

        0,  110,   61,   62,    0,    0,    0,   43,   44,   20,
        0,   19,    0,    0,    0,    0,    0,    0,    0,    0,
        8,   18,    0,    0,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  100,    0,    0,   66,    0,
       80,    0,   63,    0,  111,   64,   65,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
        0,   78,   66,   80,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   17,    0,    8,    0,    0,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,

       78,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  115,  115,  115,  115,  115,
      115,  115,  115,  115,    0,    0,    0,   70,    0,    0,
        0,    0,    0,    0,   17,    0,    9,    0,   10,    0,
      115,  115,  115,  115,  115,  115,  115,  115,  115,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,
        0,    0,   22,  115,  115,  115,  115,  115,  115,  115,
        0,    0,   71,  105,    0,   12,    0,    0,    0,    0,
        0,    9,   10,    0,  115,  115,  115,  115,  115,    0,
       71,  103,    0,   11,    0,    0,    0,    0,   22,  115,

      115,  115,  115,    0,  106,    0,   12,    0,    0,    0,
        0,  115,  115,  115,  115,  106,    0,  104,    0,    0,
        0,    0,  115,  115,  115,  115,  104,    0,    0,    0,
        0,  115,  115,  115,  115,    0,    0,    0,    0,  115,
      115,  115,  115,    0,    0,    0,    0,  115,  115,  115,
      115,    0,    0,    0,    0,  115,  115,  115,  115,    0,
        0,    0,    0,  115,  115,  115,  115,    0,    0,    0,
       16,    0,   13,  115,  115,  115,  115,    0,    0,   14,
        0,    0,  115,  115,    0,   15,    0,   16,   13,  115,
        0,   14,   15,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    8,    1,    1,    9,    1,
        1,    8,   10,    1,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    8,    1,   15,
       16,   17,   18,    8,    8,    8,   19,   20,   21,   22,
        8,    8,   23,    8,    8,    8,    8,   24,   25,    8,
        8,   26,   27,   28,   29,   30,    8,    8,    8,    8,
        1,    1,    1,    1,    8,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   40,    8,   41,   42,   43,
       44,   45,    8,   46,   47,   48,   49,   50,    8,   51,
       52,   53,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[54] =
    {   0,
        1,    2,    2,    2,    2,    1,    3,    2,    4,    1,
        2,    2,    2,    2,    2,    1,    5,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2
    } ;

static yyconst flex_int16_t yy_base[1106] =
    {   0,
        0,   23, 2823, 2822, 2831, 2830, 2827, 2826,    0,    0,
        0,    0,   39,   40,   41,   42, 2834, 2841,   59,  108,
     2826,   64, 2823,    8,  157, 2814,   53,  187,   81,  113,
        0, 2841,    0,    0, 2841, 2841, 2819, 2841, 2841, 2812,
        0,   66,  131, 2811,  236,  259,   92, 2803, 2795, 2790,
     2790,   38,   75, 2780, 2791,  308,  171,    0,  192,  199,
      243,  251,  274,  357,  101,  134,   69, 2841,  277,  134,
        0,  197, 2841,  312,  324, 2810,  374, 2841, 2776, 2770,
     2783, 2774, 2772, 2780,   56, 2779,  217, 2774, 2781,  330,
      118,    0,    0,    0, 2794, 2841,  361,   38, 2767, 2765,

     2773,  301, 2768, 2784, 2757, 2757, 2752, 2760, 2759, 2754,
     2754, 2759, 2756,  115,  168,  239,  149,  194,  331,  218,
      299,  253, 2782,  283, 2784, 2750, 2744, 2757, 2748, 2746,
     2754,  292, 2753,  341, 2748, 2755, 2742, 2753, 2740, 2735,
     2749, 2733, 2739, 2730, 2731, 2738, 2742, 2728, 2732, 2741,
     2724, 2728,   97,  346, 2841,  395, 2722, 2736, 2720, 2720,
     2723,  399, 2729, 2730,  423, 2727, 2729, 2723, 2724, 2710,
     2708,  356,  361,  427,  384,  403,  246,  405,  407,  392,
     2841, 2713, 2724, 2711, 2706, 2720, 2704, 2710, 2701, 2702,
     2709, 2713, 2699, 2703, 2712, 2695, 2699,   98, 2693, 2698,

     2703, 2689,  442, 2689, 2700, 2695, 2692, 2697, 2687, 2680,
     2680, 2680, 2679,  146, 2677, 2686, 2676,  446, 2676, 2672,
      174, 2684, 2674,  468,  459,  475, 2684, 2683,  483,  490,
     2682,  452,  411,  500,  505,  465,  480,  521,  530,  507,
      555, 2675, 2680, 2666,  560, 2666,  564, 2673, 2670, 2675,
     2665, 2658, 2658, 2658, 2657,  183, 2655,  571, 2655, 2672,
     2655, 2669,  587,  515, 2679, 2667, 2664, 2654,  591, 2649,
     2648, 2654, 2644, 2642, 2655,  609, 2646, 2653, 2656, 2655,
     2665, 2653, 2644, 2841, 2638, 2642, 2676,  582,  613,  538,
     2633, 2630,  621,  598,  628,  633,  643,  590,  612,  650,

      481,  549,  660,  666,  670,  675,  685, 2629, 2646, 2629,
     2643,  691,  700, 2653, 2641,  708,  718, 2638, 2628,  724,
     2623, 2622, 2628, 2618, 2616, 2629,  728, 2620, 2627,  732,
      748, 2630, 2614, 2628, 2627, 2614,  752,  756, 2619, 2607,
     2615,  760, 2841, 2626, 2618, 2618, 2611, 2602, 2606,  776,
     2630, 2609, 2598, 2612, 2600,  780, 2605, 2608, 2594, 2594,
      737,  788, 2634, 2630, 2627, 2610, 2609, 2629, 2625, 2622,
     2626, 2622, 2619,  796,  765,  756,  669,  778,  779,  813,
      817, 2581, 2595, 2594, 2581,  821,  828, 2586,  832, 2574,
     2582,  836,  844,  852, 2586, 2586, 2579, 2570, 2574,  856,

      861, 2578, 2567,  872, 2581, 2581, 2570, 2569, 2576,  878,
     2591,  882, 2572, 2567, 2552, 2560,  896, 2568, 2557, 2841,
      900, 2841, 2572, 2841, 2546, 2553,  904, 2513, 2512, 2494,
     2497,  887, 2841, 2841, 2508, 2511,  909, 2841, 2841,  917,
     2841, 2841, 2538, 2534, 2531,  819,  636,  879,  675, 2508,
     2497, 2496, 2503,  927,  931, 2500, 2495, 2479,  935,  943,
      947, 2486,  951, 2494, 2484,  959,  967,  975, 2504,  983,
     2485, 2485, 2474,  987, 2487, 2841,  991, 2841, 1003, 2471,
     2489, 2478, 1007, 2841, 1023, 2475, 1027, 1031, 2474, 2479,
     2478, 1046, 1051, 1055, 2473, 1051, 2471, 1036, 2841, 2841,

     1080,  757, 1111,  926, 2471, 2459, 1085, 2471, 1062, 1089,
     2451, 2468, 1095, 2443, 1105, 1111, 1116, 2440, 1144, 1121,
     1148, 1152, 2431, 1164, 1168, 2438, 2429, 2423, 1172, 1180,
     2407, 2427, 1188, 2415, 1192, 2385, 2367, 2343, 1206, 1210,
     2355, 2359, 2841, 1214, 2344, 2314, 2333, 1222, 2325, 2329,
     1226, 1197, 2304, 2303,  227, 2310, 2290, 2287, 2266, 2261,
     1230,  764, 1205,  910,  966, 1206,  839,  522,  968, 2240,
     2246, 1254, 1260, 2227, 2250, 1264, 1270, 2237, 2216, 2199,
     1280, 1284, 1288, 2181, 2183, 1292, 1300, 1308, 2164, 1312,
     2120, 2111, 2111, 1316, 2122, 2105, 2841, 1320, 2841, 2087,

     2093, 2073, 1324, 2078, 2096, 2019, 2841, 2030, 2000, 1999,
     1999, 1970, 1955, 1920, 1914, 1879, 1878, 1877, 1829, 1802,
     1793, 1805, 1299, 1300,  934, 1149,  894,  578, 1086, 1055,
      988, 1781, 1756, 1330, 1767, 1748, 1334, 1731, 1731, 1691,
     1342, 1696, 1714, 1348, 1352, 1689, 1356, 1667, 2841, 1652,
     1657, 2841, 1654, 1656, 1659, 1364, 1628, 1624, 1630, 1380,
     1238, 2841, 2841, 1384, 1388, 1403, 1598, 1588, 1571, 1582,
     1407, 1568, 1411, 1459, 1507, 1345, 1387,  667, 1368, 1555,
     1172, 1554, 1448, 1544, 1543, 1452, 1535, 1539, 1542, 1468,
     1474, 1526, 1478, 1484, 2841, 1521, 1529, 1519, 1499, 1500,

     1516, 1524, 1522, 1493, 1495, 1544, 1548, 1564, 1419, 1571,
      341, 1480, 1579,  381, 1474, 1455, 1454, 1420, 1420, 1586,
      655, 1427, 1405, 1594, 1603, 1229, 1610, 1399, 1113, 1394,
     1347, 1398, 1619,  717, 1410, 1625, 1634, 1489, 1390, 1402,
     1643, 1494, 1391, 1389, 1652, 1659, 1668, 1359, 1675, 1351,
     1679, 2841, 1336, 1684, 1357, 1700, 2841, 1704, 2841, 1340,
     1708, 1714, 1359, 1355, 1332, 1336, 1262, 1303, 1258, 1345,
     1266, 1237, 1718, 1247, 1216, 1194, 1485, 1491, 1705, 1569,
     1435, 1724, 1221, 1249, 1739, 1743, 1747, 1191, 1755, 1759,
     1763, 1179, 1772, 1779, 1783, 1157, 2841, 1788, 1169, 1792,

     1153, 2841, 1806, 2841, 1130, 1810, 1797, 2841, 2841, 1129,
     1133, 1688, 1124, 1114, 1111, 1083, 1074, 1056, 1051, 1814,
     1818, 1823, 1033, 1038,  745, 1505, 1600, 1483, 1609, 1371,
     1562, 1791, 1829, 1514, 1806, 1844, 1848, 1854, 1859, 1864,
     1870, 1046, 1880, 1021, 2841, 1884, 2841, 1027, 1022, 1007,
      992,  980,  982,  977,  967, 1888,  959,  994,  947,  958,
     1636, 1793, 1863, 1865, 1866, 1849, 1897, 1877, 1886, 1880,
     1920, 1928, 1936, 1940,  938,  928,  876,  849,  829,  832,
      805,  816,  794,  803, 1945, 1874,  767, 1949,  764,  773,
     1922, 1924, 1722, 1925, 1805, 1927, 1965, 1887, 1931, 1941,

     1980,  739,  731,  722,  704,  695,  691,  669,  650,  608,
      619,  645, 1984, 1989,  590, 1964, 1968, 1970, 1971, 1975,
     1878, 2005, 2024, 1994,  579,  577,  565, 2841,  535, 2028,
      532,  507,  512,  518, 2032, 2044, 2036, 2048, 2054, 2063,
     2027, 2067, 2031, 2044, 2047, 2050, 2086, 2102, 2106,  507,
     2110,  496, 2126, 2136, 2082,  508,  489,  478,  472,  494,
      493, 2141, 2092, 2145, 2161, 1948, 2123, 1967, 2129, 2177,
      442, 2181, 2121,  435, 2185, 2098,  477,  436,  424,  424,
      418, 2166, 2194,  433, 2200, 2175, 2125, 2164, 2180, 2215,
     2231, 2841,  413, 2220,  369,  360,  364,  353, 2225, 2207,

     2206, 2214, 2216, 2249, 2255, 2265, 2241,  330,  345,  334,
      319, 2230, 2245, 2242, 2249, 2283, 2297, 2301,  326,  315,
        0,    6, 2264, 2258, 2261, 2278, 2313,   19,   43,   42,
       50, 2288, 2281, 2142, 2190,   58,   65,   75,   88, 2289,
     2280, 2290, 2291,  105,  135,  131,  139, 2293, 2302, 2304,
     2310,  148,  142,  155,  172, 2313, 2315, 2318, 2319,  182,
      185, 2367, 2371, 2329, 2348, 2386, 2396,  195, 2402, 2406,
     2379, 2421, 2391, 2372, 2426, 2436, 2445, 2461, 2466, 2411,
      240,  247, 2476, 2484, 2493, 2431,  269, 2441, 2451, 2500,
      296, 2457, 2488, 2841, 2549, 2554, 2559, 2564, 2569, 2574,

     2579, 2583, 2588, 2592, 2597
    } ;

static yyconst flex_int16_t yy_def[1106] =
    {   0,
     1095, 1095, 1096, 1096, 1097, 1097, 1098, 1098, 1099, 1099,
     1099, 1099, 1100, 1100, 1101, 1101, 1094, 1094, 1094, 1102,
     1094, 1102, 1094, 1094, 1102, 1094,   25, 1094, 1094, 1102,
     1103, 1094, 1104, 1105, 1094, 1094, 1094, 1094, 1094, 1094,
       19, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1102, 1102,   25,   25, 1102,
     1102, 1102, 1102, 1102,   64,   64,   64, 1094, 1094,   25,
       25,   64, 1094, 1094,   64, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
       64, 1103, 1104, 1105, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094,   64,   64,   64,   64,   64,   64,   64,
       64,   64, 1094,   25, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094,   25, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094,   64,   64,   64,   64,   64,   64,   64,   64,   64,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094,   64,   64,   64,   64,   64,   64,   64,   64,   64,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094,   64,   64,   64,

       64,   64,   64,   64,   64, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094,   64,   64,   64,   64,   64,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094,   64,   64,   64,   64, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

       64,   64,   64,   64, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
       64,   64,   64,   64,   64,   64,   64,   64,   64, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094,   64,   64,   64,   64,   64,   64,   64,   64,
       64, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094,   64,   64,   64,   64,   64,   64,   64,   64,
       64, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094,   64,   64,   64,   64,
       64,   64,   64,   64, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094,   64,   64,   64,   64,   64,
       64,   64,   64,   64, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
       64,   64,   64,   64,   64,   64,   64,   64,   64, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094,   64,   64,   64,   64,   64,   64,   64,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094,   64,   64,   64,   64,   64, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,   64,

       64,   64,   64, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094,   64,   64,   64,   64, 1094, 1094, 1094, 1094, 1094,
     1094, 1094,   64,   64,   64,   64, 1094, 1094, 1094, 1094,
     1094,   64,   64,   64,   64, 1094, 1094, 1094, 1094,   64,
       64,   64,   64, 1094, 1094, 1094, 1094,   64,   64,   64,
       64, 1094, 1094, 1094, 1094,   64,   64,   64,   64, 1094,
     1094, 1094, 1094,   64,   64,   64,   64, 1094, 1094, 1094,
     1094, 1094, 1094,   64,   64,   64,   64, 1094, 1094, 1094,
     1094, 1094,   64,   64, 1094, 1094, 1094, 1094, 1094,   64,
     1094, 1094, 1094,    0, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094
    } ;

static yyconst flex_int16_t yy_nxt[2895] =
    {   0,
       18,   19,   20,   19,   20,   18,   21, 1094,   23,   18,
       24,   25,   26,   27,   28,   18,   29,   18, 1094,   43,
     1094,   45,   30,   18,   19,   20,   19,   20,   18,   21,
       48,   23,   18,   24,   25,   26,   27,   28,   18,   29,
       18,   36,   36,   39,   39,   30, 1030,  123,  123,   37,
       37,  156, 1031, 1036,   74,   75,   74,   75,   40,   40,
       41,   41,   41,   41,   58, 1094,   59, 1094,  108,   42,
       43,   44,   45,   46, 1094,   47, 1094,   43, 1094,   45,
     1094,   48,   90,   90,   90,   90,  109,  143,   48, 1037,
     1038,   49,   50,   90,   90,   90,   90,   51, 1039,  122,

      144,   52,  145,  146, 1044,  110,   53,   54,   55,   41,
       56,   41,   56, 1045, 1094, 1046, 1094,   57,   42,   58,
       44,   59,   46, 1094,   47, 1094,  111, 1094, 1047, 1094,
       60,  119,   69,   69,   69,   69,   91,  215,  257,  154,
       61,   62,  216,  258,   97,   57,   63,   57,   57,   57,
       64,   98,  120, 1052,   57,   65,   66,   67,   69,   70,
       69,   70,  172,   57,   57,   98,   57, 1094,   57, 1094,
       71, 1094, 1094, 1094, 1094, 1053,  121,   72, 1054,   57,
      276, 1094,   57, 1094,  277, 1094, 1055, 1094, 1060, 1061,
      175,   72,   76,   74,   75,   74,   75,   57,   57,   77,

     1094, 1062, 1094,   58,   78,   59,  123,  123,  284, 1094,
      124, 1094,  277, 1094,  173, 1094,   57,  327, 1063,   79,
       80,  328,   91,   81,   57,   82,   83,   57,   84, 1068,
       85, 1069,   86,   87,   88,  176,   89,   74,   74,   74,
       74, 1078,   57, 1088, 1094,   57, 1094,   43,   57,   45,
     1089,  148, 1094, 1094, 1094, 1094,   98, 1094,  616, 1094,
      149, 1094,  178, 1094,  150, 1094,   57, 1094,  151,   57,
       98,   77, 1092,  114,  617, 1094,   57, 1094,   69,   69,
       69,   69,  237,   57, 1094,  115, 1094,   57, 1094,  174,
     1094,   79,   80,  180,   57,   81,  124,   99,  100, 1093,

      101,   57,   85,   57,   86,  102,  103,  116,   89,   41,
       56,   41,   56,   74,   74,   74,   74,   57,   42,   58,
       44,   59,   46,  188,   47,   74,   75,   74,   75,   57,
       60,   90,   90,   90,   90,  160,  189,  179,  190,  191,
       61,   62,  766,  766,  149,  766,   63,   57,  150, 1029,
       64, 1028,  151, 1022,   57,   65,   66,   67, 1094,   57,
     1094,   57,   69,   69,   69,   69,   57, 1094, 1021, 1094,
     1020, 1094,   57, 1094,   97,  193,  177, 1019, 1011,   57,
       57,   98,  768,  768,  194,  768,   57,  117,  195, 1010,
      232,   57,  196,  233, 1009,   98,   69,   69,   69,   69,

       69,   69,   69,   69,   57,  118,  126,  127,  156,   57,
      128, 1008,  129,  130,   57,  131, 1007,  132,  235,  133,
      134,  135,   57,  136,  224,  224,  224,  224,  224,  234,
      224,  234,   57,   57,  236,   57,  999,   57,  225,  238,
      240,   57,  225,  263,  263,  263,  263,  263,  263,  263,
      263,   57,  998,   57,  239,   57,  299,   57,  264,   57,
      287,  287,  264,  287,  265,  288,  997,  288,  281,  224,
      224,  224,  224,  996,  995,   57,  289,  289,  289,  289,
      994,  992,   57,  225,  293,  293,  293,  293,  298,  990,
      290,  295,  295,  295,  295,   57,  983,  982,  294,  301,

       57,  224,  234,  224,  234,  296,  289,  300,  289,  300,
       57,   57,  981,   57,  302,  225,  337,  337,  337,  337,
      290,  980,  293,  303,  293,  303,  378,  979,   57,   57,
       57,  295,  304,  295,  304,   57,  294,   57,  978,  363,
      363,  305,  363,  974,  364,  296,  365,  971,   57,  959,
      958,   57,  630,   57,  957,   57,  306,  306,  306,  306,
       57,  312,  312,  312,  312,  316,  316,  316,  316,   57,
       57,  307,  330,  330,  330,  330,  313,  956,   57,   57,
      317,  953,  314,  362,  362,  362,  362,  331,  263,  263,
      263,  263,  342,  342,  342,  342,  379,   57,  318,  368,

      368,  308,  368,  264,  369,  952,  370,  343,   57,  332,
      350,  350,  350,  350,  289,  289,  289,  289,  678,  951,
       57,  351,  293,  293,  293,  293,   57,  950,  290,  295,
      295,  295,  295,  376,  371,  371,  294,  371,   57,  372,
      940,  373,   57,  296,  374,  374,  374,  374,  935,  934,
      377,  289,  300,  289,  300,  933,  774,  774,  375,  774,
       57,  293,  303,  293,  303,  290,   57,  295,  304,  295,
      304,  374,  380,  374,  380,  294,  306,  306,  306,  306,
       57,  296,  932,  502,   57,  375,  381,  381,  381,  381,
       57,  307,  312,  312,  312,  312,   57,   57,   57,   57,

       57,  386,  386,  386,  386,   57,  504,  313,   57,  316,
      316,  316,  316,  447,   57,  731,  931,   57,   57,  389,
      389,  389,  389,   57,  317,  392,  392,  392,  392,  400,
      400,  400,  400,  330,  330,  330,  330,  930,  287,  287,
      393,  287,  929,  288,  401,  288,  928,  783,  331,  404,
      404,  404,  404,  337,  337,  337,  337,  410,  410,  410,
      410,  342,  342,  342,  342,   57,  443,  443,  411,  443,
      927,  444,  412,  445,  926,  861,  343,  350,  350,  350,
      350,  427,  427,  427,  427,  925,   57,   57,  351,  362,
      362,  362,  362,   57,   57,  562,  412,  374,  374,  374,

      374,  446,  448,  449,   57,   57,  915,  623,   57,   57,
      914,  375,   57,  913,  374,  380,  374,  380,  381,  381,
      381,  381,  386,  386,  386,  386,   57,   57,  375,  454,
      454,  454,  454,  389,  389,  389,  389,  392,  392,  392,
      392,  911,  910,   57,  455,  459,  459,  459,  459,   57,
      909,  908,  393,  460,  460,  460,  460,  400,  400,  400,
      400,   57,  468,  468,  468,  468,  907,   57,  461,   57,
      501,  906,  401,  404,  404,  404,  404,  629,  462,  410,
      410,  410,  410,  477,  477,  477,  477,   57,  363,  363,
      411,  363,  905,  364,  412,  365,  478,  483,  483,  483,

      483,  487,  487,  487,  487,  427,  427,  427,  427,   57,
      368,  368,  484,  368,  503,  369,  488,  370,  371,  371,
      412,  371,  904,  372,   57,  373,  677,   57,  454,  454,
      454,  454,  509,  509,  509,  509,  459,  459,  459,  459,
       57,  625,   57,  455,  460,  460,  460,  460,  513,  513,
      513,  513,  515,  515,  515,  515,   57,  626,   57,  461,
      519,  519,  519,  519,   57,  569,  903,  516,  521,  521,
      521,  521,  902,  675,   57,  520,  468,  468,  468,  468,
      890,  889,   57,  522,  524,  524,  524,  524,  529,  529,
      529,  529,  477,  477,  477,  477,   57,  888,   57,  525,

      627,  887,  631,  530,  533,  533,  533,  533,  483,  483,
      483,  483,  884,  531,   57,  534,   57,  883,   57,  535,
      681,  882,  881,  484,  539,  539,  539,  539,  487,  487,
      487,  487,  544,  544,  544,  544,   57,  443,  443,  540,
      443,  880,  444,  488,  445,  879,  541,  548,  548,  548,
      548,  542,  539,  539,  539,  539,  551,  551,  551,  551,
      878,  877,  535,  509,  509,  509,  509,  540,  876,  554,
      552,  875,  860,  859,  549,  555,  556,  557,  558,  550,
      559,  551,  561,  551,  561,   57,  572,  572,  572,  572,
      576,  576,  576,  576,  857,  552,  513,  513,  513,  513,

      680,  573,  856,   57,  855,  577,  515,  515,  515,  515,
       57,  574,  581,  581,  581,  581,   57,  582,  582,  582,
      582,  516,  587,  587,  587,  587,  854,  679,   57,  563,
      766,  766,  583,  766,   57,  564,  565,  566,  567,  584,
      568,   57,  853,   57,  585,  519,  519,  519,  519,  521,
      521,  521,  521,  588,  588,  588,  588,  852,  779,   57,
      520,   57,  851,  850,  522,  524,  524,  524,  524,  590,
      590,  590,  590,  529,  529,  529,  529,  849,  848,   57,
      525,  594,  594,  594,  594,  845,  676,  844,  530,  533,
      533,  533,  533,  598,  598,  598,  598,   57,  611,  611,

      534,  611,   57,  612,  535,  613,  599,  539,  539,  539,
      539,  603,  603,  603,  603,  544,  544,  544,  544,  735,
       57,  842,  540,  548,  548,  548,  548,  551,  551,  551,
      551,  551,  561,  551,  561,   57,   57,  837,  535,  611,
      611,  552,  611,  824,  612,  552,  613,  823,  624,  628,
      822,   57,  834,   57,   57,  572,  572,  572,  572,   57,
       57,  634,  634,  634,  634,  576,  576,  576,  576,   57,
      573,  637,  637,  637,  637,  819,  777,   57,   57,   57,
      577,  581,  581,  581,  581,  582,  582,  582,  582,  641,
      641,  641,  641,  644,  644,  644,  644,   57,  835,  818,

      583,  587,  587,  587,  587,  813,  812,  811,  645,  588,
      588,  588,  588,  590,  590,  590,  590,  594,  594,  594,
      594,  598,  598,  598,  598,  603,  603,  603,  603,   57,
       57,  634,  634,  634,  634,  637,  637,  637,  637,  810,
      809,  673,  674,  641,  641,  641,  641,   57,   57,  644,
      644,  644,  644,  691,  691,  691,  691,  693,  693,  693,
      693,  808,  807,  814,  645,  701,  701,  701,  701,  815,
      805,  816,  694,  802,  817,   57,  702,   57,  801,  729,
      703,  707,  707,  707,  707,  708,  708,  708,  708,  710,
      710,  710,  710,   57,  781,   57,  703,  797,   57,  709,

      796,  866,  732,  711,  713,  713,  713,  713,  720,  720,
      720,  720,  708,  724,  708,  724,   57,   57,  714,   57,
      763,  763,  721,  763,   57,  764,  709,  765,   57,   57,
      730,  778,  792,  791,  712,   57,  789,  715,  788,  780,
       57,   57,   57,  776,  782,  722,   57,   57,  784,  737,
      737,  737,  737,  741,  741,  741,  741,  775,   57,   57,
      710,  725,  710,  725,  738,   57,  773,  772,  742,  746,
      746,  746,  746,  832,  711,  691,  691,  691,  691,  693,
      693,  693,  693,   57,  747,  749,  749,  749,  749,   57,
      787,  787,  787,  787,  694,  790,  790,  790,  790,  771,

      770,  754,  754,  754,  754,  726,  769,   57,  713,  727,
      713,  727,  755,   57,  864,   57,  756,  701,  701,  701,
      701,   57,  714,  758,  758,  758,  758,  767,  702,  761,
      825,   57,  703,   57,  760,   57,  759,   57,  826,   57,
      757,  728,  753,  862,   57,  762,  762,  762,  762,  707,
      707,  707,  707,   57,  869,   57,  720,  733,  720,  733,
      756,  752,   57,  751,  703,  708,  708,  708,  708,  750,
      721,  748,  710,  710,  710,  710,  745,  744,  743,  709,
      713,  713,  713,  713,  740,   57,  711,  720,  720,  720,
      720,  739,   57,  734,  714,  708,  724,  708,  724,   57,

      736,  721,  831,   57,  710,  725,  710,  725,  867,  709,
       57,  713,  727,  713,  727,  723,  719,   57,  711,  718,
      720,  733,  720,  733,   57,  714,  785,  785,  785,  785,
       57,  717,  716,   57,  721,  737,  737,  737,  737,   57,
       57,  786,   57,  863,  741,  741,  741,  741,   57,   57,
      738,   57,  865,  793,  793,  793,  793,   57,   57,  742,
      746,  746,  746,  746,  706,  705,   57,   57,  794,  795,
      795,  795,  795,  704,  891,  747,  749,  749,  749,  749,
      798,  798,  798,  798,   57,  754,  754,  754,  754,  768,
      768,  799,  768,  700,  699,  800,  755,  698,  697,  696,

      756,  803,  803,  803,  803,  758,  758,  758,  758,  806,
      806,  806,  806,  695,  804,  762,  762,  762,  762,  820,
      820,  820,  820,  827,  800,  820,  833,  820,  833,  828,
      756,  829,  692,  821,  830,   57,  690,  689,  688,  821,
      785,  785,  785,  785,  836,  836,  836,  836,  787,  787,
      787,  787,   57,   57,   57,  786,  838,  838,  838,  838,
      790,  790,  790,  790,  840,  840,  840,  840,  918,  687,
       57,  839,   57,  793,  793,  793,  793,  686,  685,  841,
      843,  843,  843,  843,  795,  795,  795,  795,  794,  798,
      798,  798,  798,  846,  846,  846,  846,  684,  763,  763,

      799,  763,  683,  764,  800,  765,  847,  803,  803,  803,
      803,  806,  806,  806,  806,  820,  820,  820,  820,  858,
      858,   57,  858,   57,  774,  774,  800,  774,  682,  821,
      820,  833,  820,  833,  868,   57,   57,  672,  671,   57,
      870,   57,  892,  670,  821,  836,  836,  836,  836,  871,
      871,  871,  871,  920,   57,  838,  838,  838,  838,   57,
      873,  873,  873,  873,  872,  840,  840,  840,  840,  669,
      839,  874,  874,  874,  874,  912,  912,   57,  912,   57,
      841,  843,  843,  843,  843,  846,  846,  846,  846,  885,
      885,  885,  885,   57,  896,   57,   57,   57,  885,  897,

      885,  897,  900,  886,  894,  893,  895,   57,  946,  668,
       57,   57,  886,   57,   57,  667,   57,   57,  666,  898,
      899,  871,  871,  871,  871,   57,   57,   57,   57,  901,
      901,  901,  901,  922,   57,   57,  872,  873,  873,  873,
      873,  874,  874,  874,  874,   57,  885,  885,  885,  885,
      858,  858,   57,  858,   57,   57,  665,   57,  917,  919,
      886,   57,  664,  663,  916,  921,  885,  897,  885,  897,
       57,   57,   57,   57,  924,   57,  662,  923,  986,   57,
      886,  901,  901,  901,  901,  936,  936,  936,  936,   57,
      938,  938,  938,  938,   57,   57,   57,   57,   57,  937,

       57,   57,  661,  944,  939,   57,  936,  947,  936,  947,
      988,  941,   57,   57,  942,   57,   57,  943,   57,   57,
      937,  660,  945,   57,   57,  938,  948,  938,  948,  954,
      954,  954,  954,  912,  912,   57,  912,  960,  960,  939,
      960,  659,   57,  955,  949,  936,  936,  936,  936,  938,
      938,  938,  938,   57,   57,  961,  961,   57,  961,  937,
      658,   57,  657,  939,  962,  962,  962,  962,  954,  965,
      954,  965,   57,  964,   57,   57,  966,   57,  963,   57,
       57,  969,  955,  977,  977,  968,  977,  936,  947,  936,
      947,  967,   57,  984,  984,   57,  984,   57,   57,  993,

      993,  937,  993,  938,  948,  938,  948,  962,  970,  962,
      970,  972,  972,  972,  972,   57,   57,  939,  656,  655,
      654,  963,  991,  991,  991,  991,  973,  975,  975,  975,
      975,  653,   57,  652,   57,  651,   57,  954,  954,  954,
      954,  976,  962,  962,  962,  962,  975,  985,  975,  985,
       57,  955,  650,   57,   57,   57,  963,  649,  648,   57,
      976,  987,  954,  965,  954,  965,  647,  960,  960,  989,
      960,   57,   57,   57, 1001,   57,  955,   57,  962,  970,
      962,  970,  972,  972,  972,  972,  975,  975,  975,  975,
     1042,   57,  963,   57,   57,  961,  961,  973,  961,  646,

      976,  975,  985,  975,  985,   57, 1002,   57,  643,   57,
       57,  642,   57, 1000, 1003,  976, 1004, 1004, 1004, 1004,
       57,  977,  977,   57,  977,   57,  984,  984,   57,  984,
       57, 1005,  991,  991,  991,  991,   57,   57, 1043, 1014,
     1013, 1015,  993,  993,   57,  993,   57,  640,   57, 1012,
     1004, 1004, 1004, 1004,   57,   57, 1016, 1016, 1016, 1016,
       57, 1006,   57,  639,   57, 1005, 1017, 1017, 1017, 1017,
     1024,  638,   57,  636,  635,   57, 1025, 1023,   57,   57,
      633, 1018,  632, 1026, 1016, 1016, 1016, 1016,   57, 1032,
       57,   57, 1033,   57,   57,  622,  621,   57, 1017, 1017,

     1017, 1017, 1027, 1027, 1027, 1027,   57, 1034,   57,   57,
       57,   57,   57, 1018, 1027, 1027, 1027, 1027,   57,   57,
       57,   57, 1040,   57, 1035,  620,   57, 1041, 1049,   57,
     1050, 1051,   57,  619,   57, 1048,   57,   57,   57,   57,
       57, 1056, 1057,   57,  618,   57,  615,  614,   57,   57,
       57, 1058,   57, 1064,  610,  609,  608, 1059,   57,   57,
      607,   57, 1065,   57, 1066, 1067,   57,   57, 1070, 1070,
     1070, 1070, 1072, 1072, 1072, 1072, 1074,   57,   57,  606,
     1081, 1081, 1071, 1081,  605,  604, 1073, 1070, 1076, 1070,
     1076,  602, 1082, 1082, 1075, 1082,   57, 1072, 1077, 1072,

     1077, 1071,   57, 1079, 1079, 1079, 1079, 1070, 1070, 1070,
     1070, 1073, 1087, 1087,  601, 1087,   57, 1080, 1083,  600,
       57, 1071, 1072, 1072, 1072, 1072,   57, 1079, 1084, 1079,
     1084,  597, 1091, 1091,   57, 1091, 1073, 1070, 1076, 1070,
     1076, 1080, 1081, 1081,   57, 1081, 1072, 1077, 1072, 1077,
      596, 1071, 1082, 1082,  595, 1082,   57,  593, 1087, 1087,
     1073, 1087, 1085, 1085, 1085, 1085,   57, 1079, 1079, 1079,
     1079,  592,  591,  589,   57,   57, 1086, 1085, 1090, 1085,
     1090, 1080,  586,  580,   57, 1079, 1084, 1079, 1084, 1091,
     1091, 1086, 1091,   57, 1085, 1085, 1085, 1085,  579, 1080,

      578, 1085, 1090, 1085, 1090,  575,   57,  571, 1086,  570,
      560,  553,  547,  546,   57, 1086,  545,  543,  538,  537,
      536,  532,  528,  527,   57,  526,  523,  518,  517,  514,
       57,  512,   57,  511,  510,  508,  507,  506,  505,  500,
      499,  498,  497,  496,  495,  494,  493,  492,   57,   22,
       22,   22,   22,   22,   31,   31,   31,   31,   31,   33,
       33,   33,   33,   33,   34,   34,   34,   34,   34,   32,
       32,   32,   32,   32,   35,   35,   35,   35,   35,   38,
       38,   38,   38,   38,   57,  491,  490,   57,   92,   92,
       92,   92,   93,   93,  489,   93,   93,   94,   94,   94,

      486,   94,  485,  482,  481,  480,  479,  476,  475,  474,
      473,  472,  471,  470,  469,  467,  466,  465,  464,  463,
      458,  457,  456,  453,  452,  451,  450,  442,  441,  440,
      439,  438,  437,  436,  435,  434,  433,  432,  431,  430,
      429,  428,  426,  425,  424,  423,  422,  421,  420,  419,
      418,  417,  416,  415,  414,  413,  409,  408,  407,  406,
      405,  403,  402,  399,  398,  397,  396,  395,  394,  391,
      390,  388,  387,  385,  384,  383,  382,  367,  366,  361,
      360,  359,  358,  357,  356,  355,  354,  353,  352,  349,
      348,  347,  346,  345,  344,  341,  340,  339,  338,  336,

      335,  334,  333,  329,  326,  325,  324,  323,  322,  321,
      320,  319,  315,  311,  310,  309,  297,  292,  291,  286,
      285,  283,  282,  280,  279,  278,  275,  274,  273,  272,
      271,  270,  269,  268,  267,  266,  262,  261,  260,  259,
      256,  255,  254,  253,  252,  251,  250,  249,  248,  247,
      246,  245,  244,  243,  242,  241,  231,  230,  229,  228,
      227,  226,  223,  222,  221,  220,  219,  218,  217,  214,
      213,  212,  211,  210,  209,  208,  207,  206,  205,  204,
      203,  202,  201,  200,  199,  198,  197,  192,  187,  186,
      185,  184,  183,  182,  181,  156,  171,  170,  169,  168,

      167,  166,  165,  164,  163,  162,  161,  159,  158,  157,
      155,  153,  152,  147,  142,  141,  140,  139,  138,  137,
      125,  113,  112,  107,  106,  105,  104,   73,   96,   95,
       73,   68,   68, 1094,   32,   32,   32,   32,   32,   32,
       17, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094

    } ;

static yyconst flex_int16_t yy_chk[2895] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    0,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    0,   24,
        0,   24,    1,    2,    2,    2,    2,    2,    2,    2,
       24,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,   13,   14,   15,   16,    2, 1021,   98,   98,   13,
       14,   98, 1022, 1028,   27,   27,   27,   27,   15,   16,
       19,   19,   19,   19,   27,   22,   27,   22,   52,   19,
       19,   19,   19,   19,   22,   19,   22,   42,   22,   42,
       22,   19,   29,   29,   29,   29,   52,   85,   42, 1029,
     1030,   19,   19,   47,   47,   47,   47,   19, 1031,   67,

       85,   19,   85,   85, 1036,   53,   19,   19,   19,   20,
       20,   20,   20, 1037,   30, 1038,   30,   67,   20,   20,
       20,   20,   20,   30,   20,   30,   53,   30, 1039,   30,
       20,   65,   43,   43,   43,   43,   30,  153,  198,   91,
       20,   20,  153,  198,   43,  114,   20,   70,   91,   65,
       20,   43,   65, 1044,   70,   20,   20,   20,   25,   25,
       25,   25,  114,  114,   66,   43,   91,   25,   70,   25,
       25,   25,   57,   25,   57, 1045,   66,   25, 1046,  117,
      214,   57,   66,   57,  214,   57, 1047,   57, 1052, 1053,
      117,   25,   28,   59,   59,   59,   59,  117,  115,   28,

       60, 1054,   60,   59,   28,   59,   72,   72,  221,   60,
       72,   60,  221,   60,  115,   60,  115,  256, 1055,   28,
       28,  256,   60,   28,  118,   28,   28,   72,   28, 1060,
       28, 1061,   28,   28,   28,  118,   28,   45,   45,   45,
       45, 1068,  118, 1081,   61,   72,   61,   45,  120,   45,
     1082,   87,   62,   61,   62,   61,   45,   61,  555,   61,
       87,   62,  120,   62,   87,   62,  120,   62,   87,  116,
       45,   46, 1087,   61,  555,   63,  177,   63,   69,   69,
       69,   69,  177,  122,   63,   62,   63,  116,   63,  116,
       63,   46,   46,  122,  177,   46,  124,   46,   46, 1091,

       46,  122,   46,  124,   46,   46,   46,   63,   46,   56,
       56,   56,   56,   74,   74,   74,   74,  124,   56,   56,
       56,   56,   56,  132,   56,   75,   75,   75,   75,  121,
       56,   90,   90,   90,   90,  102,  132,  121,  132,  132,
       56,   56,  711,  711,  102,  711,   56,  121,  102, 1020,
       56, 1019,  102, 1011,   75,   56,   56,   56,   64,  154,
       64,  119,   97,   97,   97,   97,  154,   64, 1010,   64,
     1009,   64,   75,   64,   97,  134,  119, 1008,  998,  119,
      154,   97,  714,  714,  134,  714,  172,   64,  134,  997,
      172,  173,  134,  173,  996,   97,  156,  156,  156,  156,

      162,  162,  162,  162,  172,   64,   77,   77,  156,  173,
       77,  995,   77,   77,  175,   77,  993,   77,  175,   77,
       77,   77,  180,   77,  165,  165,  165,  165,  174,  174,
      174,  174,  175,  176,  176,  178,  984,  179,  165,  178,
      180,  233,  174,  203,  203,  203,  203,  218,  218,  218,
      218,  176,  981,  178,  179,  179,  233,  174,  203,  233,
      225,  225,  218,  225,  203,  225,  980,  225,  218,  224,
      224,  224,  224,  979,  978,  174,  226,  226,  226,  226,
      977,  974,  232,  224,  229,  229,  229,  229,  232,  971,
      226,  230,  230,  230,  230,  236,  961,  960,  229,  236,

      232,  234,  234,  234,  234,  230,  235,  235,  235,  235,
      237,  301,  959,  236,  237,  234,  264,  264,  264,  264,
      235,  958,  238,  238,  238,  238,  301,  957,  237,  301,
      234,  239,  239,  239,  239,  235,  238,  240,  956,  290,
      290,  240,  290,  952,  290,  239,  290,  950,  234,  934,
      933,  238,  568,  235,  932,  240,  241,  241,  241,  241,
      239,  245,  245,  245,  245,  247,  247,  247,  247,  238,
      568,  241,  258,  258,  258,  258,  245,  931,  239,  302,
      247,  929,  245,  288,  288,  288,  288,  258,  263,  263,
      263,  263,  269,  269,  269,  269,  302,  302,  247,  294,

      294,  241,  294,  263,  294,  927,  294,  269,  628,  258,
      276,  276,  276,  276,  289,  289,  289,  289,  628,  926,
      298,  276,  293,  293,  293,  293,  628,  925,  289,  295,
      295,  295,  295,  298,  296,  296,  293,  296,  298,  296,
      915,  296,  299,  295,  297,  297,  297,  297,  912,  911,
      299,  300,  300,  300,  300,  910,  721,  721,  297,  721,
      299,  303,  303,  303,  303,  300,  447,  304,  304,  304,
      304,  305,  305,  305,  305,  303,  306,  306,  306,  306,
      300,  304,  909,  447,  447,  305,  307,  307,  307,  307,
      303,  306,  312,  312,  312,  312,  304,  678,  300,  377,

      305,  313,  313,  313,  313,  449,  449,  312,  303,  316,
      316,  316,  316,  377,  304,  678,  908,  377,  305,  317,
      317,  317,  317,  449,  316,  320,  320,  320,  320,  327,
      327,  327,  327,  330,  330,  330,  330,  907,  361,  361,
      320,  361,  906,  361,  327,  361,  905,  734,  330,  331,
      331,  331,  331,  337,  337,  337,  337,  338,  338,  338,
      338,  342,  342,  342,  342,  734,  375,  375,  338,  375,
      904,  375,  338,  375,  903,  825,  342,  350,  350,  350,
      350,  356,  356,  356,  356,  902,  376,  502,  350,  362,
      362,  362,  362,  825,  562,  502,  356,  374,  374,  374,

      374,  376,  378,  379,  376,  502,  890,  562,  378,  379,
      889,  374,  562,  887,  380,  380,  380,  380,  381,  381,
      381,  381,  386,  386,  386,  386,  378,  379,  380,  387,
      387,  387,  387,  389,  389,  389,  389,  392,  392,  392,
      392,  884,  883,  380,  387,  393,  393,  393,  393,  446,
      882,  881,  392,  394,  394,  394,  394,  400,  400,  400,
      400,  380,  401,  401,  401,  401,  880,  446,  394,  567,
      446,  879,  400,  404,  404,  404,  404,  567,  394,  410,
      410,  410,  410,  412,  412,  412,  412,  567,  432,  432,
      410,  432,  878,  432,  410,  432,  412,  417,  417,  417,

      417,  421,  421,  421,  421,  427,  427,  427,  427,  448,
      437,  437,  417,  437,  448,  437,  421,  437,  440,  440,
      427,  440,  877,  440,  627,  440,  627,  448,  454,  454,
      454,  454,  455,  455,  455,  455,  459,  459,  459,  459,
      564,  564,  627,  454,  460,  460,  460,  460,  461,  461,
      461,  461,  463,  463,  463,  463,  504,  564,  564,  460,
      466,  466,  466,  466,  625,  504,  876,  463,  467,  467,
      467,  467,  875,  625,  504,  466,  468,  468,  468,  468,
      860,  859,  625,  467,  470,  470,  470,  470,  474,  474,
      474,  474,  477,  477,  477,  477,  565,  858,  569,  470,

      565,  857,  569,  474,  479,  479,  479,  479,  483,  483,
      483,  483,  855,  474,  565,  479,  569,  854,  631,  479,
      631,  853,  852,  483,  485,  485,  485,  485,  487,  487,
      487,  487,  488,  488,  488,  488,  631,  498,  498,  485,
      498,  851,  498,  487,  498,  850,  485,  492,  492,  492,
      492,  485,  493,  493,  493,  493,  494,  494,  494,  494,
      849,  848,  492,  509,  509,  509,  509,  493,  844,  496,
      494,  842,  824,  823,  493,  496,  496,  496,  496,  493,
      496,  501,  501,  501,  501,  630,  507,  507,  507,  507,
      510,  510,  510,  510,  819,  501,  513,  513,  513,  513,

      630,  507,  818,  630,  817,  510,  515,  515,  515,  515,
      501,  507,  516,  516,  516,  516,  629,  517,  517,  517,
      517,  515,  520,  520,  520,  520,  816,  629,  501,  503,
      810,  810,  517,  810,  629,  503,  503,  503,  503,  517,
      503,  503,  815,  729,  517,  519,  519,  519,  519,  521,
      521,  521,  521,  522,  522,  522,  522,  814,  729,  503,
      519,  729,  813,  811,  521,  524,  524,  524,  524,  525,
      525,  525,  525,  529,  529,  529,  529,  805,  801,  626,
      524,  530,  530,  530,  530,  799,  626,  796,  529,  533,
      533,  533,  533,  535,  535,  535,  535,  626,  552,  552,

      533,  552,  681,  552,  533,  552,  535,  539,  539,  539,
      539,  540,  540,  540,  540,  544,  544,  544,  544,  681,
      681,  792,  539,  548,  548,  548,  548,  551,  551,  551,
      551,  561,  561,  561,  561,  563,  566,  788,  548,  661,
      661,  551,  661,  776,  661,  561,  661,  775,  563,  566,
      774,  783,  783,  563,  566,  572,  572,  572,  572,  726,
      561,  573,  573,  573,  573,  576,  576,  576,  576,  783,
      572,  577,  577,  577,  577,  772,  726,  726,  561,  784,
      576,  581,  581,  581,  581,  582,  582,  582,  582,  583,
      583,  583,  583,  586,  586,  586,  586,  784,  784,  771,

      582,  587,  587,  587,  587,  769,  768,  767,  586,  588,
      588,  588,  588,  590,  590,  590,  590,  594,  594,  594,
      594,  598,  598,  598,  598,  603,  603,  603,  603,  623,
      624,  634,  634,  634,  634,  637,  637,  637,  637,  766,
      765,  623,  624,  641,  641,  641,  641,  623,  624,  644,
      644,  644,  644,  645,  645,  645,  645,  647,  647,  647,
      647,  764,  763,  770,  644,  656,  656,  656,  656,  770,
      760,  770,  647,  755,  770,  676,  656,  731,  753,  676,
      656,  660,  660,  660,  660,  664,  664,  664,  664,  665,
      665,  665,  665,  676,  731,  731,  660,  750,  679,  664,

      748,  830,  679,  665,  666,  666,  666,  666,  671,  671,
      671,  671,  673,  673,  673,  673,  679,  677,  666,  830,
      709,  709,  671,  709,  730,  709,  673,  709,  732,  728,
      677,  728,  744,  743,  665,  677,  740,  666,  739,  730,
      735,  673,  730,  723,  732,  671,  732,  728,  735,  683,
      683,  683,  683,  686,  686,  686,  686,  722,  735,  673,
      674,  674,  674,  674,  683,  781,  719,  718,  686,  690,
      690,  690,  690,  781,  674,  691,  691,  691,  691,  693,
      693,  693,  693,  781,  690,  694,  694,  694,  694,  674,
      738,  738,  738,  738,  693,  742,  742,  742,  742,  717,

      716,  700,  700,  700,  700,  674,  715,  674,  675,  675,
      675,  675,  700,  828,  828,  777,  700,  701,  701,  701,
      701,  778,  675,  703,  703,  703,  703,  712,  701,  705,
      777,  828,  701,  777,  704,  826,  703,  675,  778,  778,
      702,  675,  699,  826,  834,  706,  706,  706,  706,  707,
      707,  707,  707,  826,  834,  675,  680,  680,  680,  680,
      706,  698,  834,  697,  707,  708,  708,  708,  708,  696,
      680,  692,  710,  710,  710,  710,  689,  688,  687,  708,
      713,  713,  713,  713,  685,  680,  710,  720,  720,  720,
      720,  684,  831,  680,  713,  724,  724,  724,  724,  780,

      682,  720,  780,  680,  725,  725,  725,  725,  831,  724,
      831,  727,  727,  727,  727,  672,  670,  780,  725,  669,
      733,  733,  733,  733,  724,  727,  736,  736,  736,  736,
      827,  668,  667,  725,  733,  737,  737,  737,  737,  829,
      727,  736,  724,  827,  741,  741,  741,  741,  827,  733,
      737,  725,  829,  745,  745,  745,  745,  829,  727,  741,
      746,  746,  746,  746,  659,  658,  861,  733,  745,  747,
      747,  747,  747,  657,  861,  746,  749,  749,  749,  749,
      751,  751,  751,  751,  861,  754,  754,  754,  754,  812,
      812,  751,  812,  655,  654,  751,  754,  653,  651,  650,

      754,  756,  756,  756,  756,  758,  758,  758,  758,  761,
      761,  761,  761,  648,  756,  762,  762,  762,  762,  773,
      773,  773,  773,  779,  761,  782,  782,  782,  782,  779,
      762,  779,  646,  773,  779,  779,  643,  642,  640,  782,
      785,  785,  785,  785,  786,  786,  786,  786,  787,  787,
      787,  787,  893,  779,  782,  785,  789,  789,  789,  789,
      790,  790,  790,  790,  791,  791,  791,  791,  893,  639,
      893,  789,  782,  793,  793,  793,  793,  638,  636,  791,
      794,  794,  794,  794,  795,  795,  795,  795,  793,  798,
      798,  798,  798,  800,  800,  800,  800,  635,  807,  807,

      798,  807,  633,  807,  798,  807,  800,  803,  803,  803,
      803,  806,  806,  806,  806,  820,  820,  820,  820,  821,
      821,  832,  821,  862,  822,  822,  806,  822,  632,  820,
      833,  833,  833,  833,  832,  895,  835,  622,  621,  832,
      835,  862,  862,  620,  833,  836,  836,  836,  836,  837,
      837,  837,  837,  895,  835,  838,  838,  838,  838,  833,
      839,  839,  839,  839,  837,  840,  840,  840,  840,  619,
      838,  841,  841,  841,  841,  886,  886,  833,  886,  866,
      840,  843,  843,  843,  843,  846,  846,  846,  846,  856,
      856,  856,  856,  863,  866,  864,  865,  866,  867,  867,

      867,  867,  870,  856,  864,  863,  865,  868,  921,  618,
      870,  863,  867,  864,  865,  617,  869,  898,  616,  868,
      869,  871,  871,  871,  871,  868,  921,  867,  870,  872,
      872,  872,  872,  898,  869,  898,  871,  873,  873,  873,
      873,  874,  874,  874,  874,  867,  885,  885,  885,  885,
      888,  888,  891,  888,  892,  894,  615,  896,  892,  894,
      885,  899,  614,  613,  891,  896,  897,  897,  897,  897,
      891,  900,  892,  894,  900,  896,  612,  899,  966,  899,
      897,  901,  901,  901,  901,  913,  913,  913,  913,  900,
      914,  914,  914,  914,  916,  897,  966,  968,  917,  913,

      918,  919,  611,  919,  914,  920,  922,  922,  922,  922,
      968,  916,  916,  897,  917,  968,  917,  918,  918,  919,
      922,  610,  920,  920,  924,  923,  923,  923,  923,  930,
      930,  930,  930,  935,  935,  922,  935,  937,  937,  923,
      937,  609,  924,  930,  924,  936,  936,  936,  936,  938,
      938,  938,  938,  922,  923,  939,  939,  941,  939,  936,
      608,  943,  606,  938,  940,  940,  940,  940,  942,  942,
      942,  942,  923,  941,  944,  941,  943,  945,  940,  943,
      946,  946,  942,  955,  955,  945,  955,  947,  947,  947,
      947,  944,  944,  963,  963,  945,  963,  942,  946,  976,

      976,  947,  976,  948,  948,  948,  948,  949,  949,  949,
      949,  951,  951,  951,  951,  942,  947,  948,  605,  604,
      602,  949,  973,  973,  973,  973,  951,  953,  953,  953,
      953,  601,  948,  600,  947,  596,  949,  954,  954,  954,
      954,  953,  962,  962,  962,  962,  964,  964,  964,  964,
      948,  954,  595,  967,  949,  987,  962,  593,  592,  969,
      964,  967,  965,  965,  965,  965,  591,  982,  982,  969,
      982,  967, 1034,  987,  987,  964,  965,  969,  970,  970,
      970,  970,  972,  972,  972,  972,  975,  975,  975,  975,
     1034,  965,  970,  964,  988,  983,  983,  972,  983,  589,

      975,  985,  985,  985,  985,  986,  988,  970,  585,  965,
      989,  584,  988,  986,  989,  985,  990,  990,  990,  990,
     1035,  994,  994,  986,  994,  970,  999,  999,  989,  999,
      985,  990,  991,  991,  991,  991, 1001, 1000, 1035, 1002,
     1001, 1003, 1007, 1007, 1002, 1007, 1003,  580,  985, 1000,
     1004, 1004, 1004, 1004, 1001, 1000, 1005, 1005, 1005, 1005,
     1012,  990, 1002,  579, 1003, 1004, 1006, 1006, 1006, 1006,
     1013,  578, 1014,  575,  574, 1013, 1014, 1012, 1012, 1015,
      571, 1006,  570, 1015, 1016, 1016, 1016, 1016, 1024, 1023,
     1014, 1025, 1024, 1013, 1023,  560,  559, 1015, 1017, 1017,

     1017, 1017, 1018, 1018, 1018, 1018, 1024, 1025, 1026, 1025,
     1041, 1033, 1023, 1017, 1027, 1027, 1027, 1027, 1032, 1040,
     1042, 1043, 1032, 1048, 1026,  558, 1026, 1033, 1041, 1033,
     1042, 1043, 1049,  557, 1050, 1040, 1032, 1040, 1042, 1043,
     1051, 1048, 1049, 1056,  556, 1057,  554,  553, 1058, 1059,
     1049, 1050, 1050, 1056,  550,  549,  547, 1051, 1051, 1064,
      546, 1056, 1057, 1057, 1058, 1059, 1058, 1059, 1062, 1062,
     1062, 1062, 1063, 1063, 1063, 1063, 1064, 1064, 1065,  545,
     1071, 1071, 1062, 1071,  542,  541, 1063, 1066, 1066, 1066,
     1066,  538, 1073, 1073, 1065, 1073, 1065, 1067, 1067, 1067,

     1067, 1066, 1074, 1069, 1069, 1069, 1069, 1070, 1070, 1070,
     1070, 1067, 1080, 1080,  537, 1080, 1066, 1069, 1074,  536,
     1074, 1070, 1072, 1072, 1072, 1072, 1067, 1075, 1075, 1075,
     1075,  534, 1086, 1086, 1066, 1086, 1072, 1076, 1076, 1076,
     1076, 1075, 1088, 1088, 1067, 1088, 1077, 1077, 1077, 1077,
      532, 1076, 1089, 1089,  531, 1089, 1075,  528, 1092, 1092,
     1077, 1092, 1078, 1078, 1078, 1078, 1076, 1079, 1079, 1079,
     1079,  527,  526,  523, 1075, 1077, 1078, 1083, 1083, 1083,
     1083, 1079,  518,  514, 1076, 1084, 1084, 1084, 1084, 1093,
     1093, 1083, 1093, 1077, 1085, 1085, 1085, 1085,  512, 1084,

      511, 1090, 1090, 1090, 1090,  508, 1083,  506, 1085,  505,
      497,  495,  491,  490, 1084, 1090,  489,  486,  482,  481,
      480,  475,  473,  472, 1083,  471,  469,  465,  464,  462,
     1090,  458, 1084,  457,  456,  453,  452,  451,  450,  445,
      444,  443,  436,  435,  431,  430,  429,  428, 1090, 1095,
     1095, 1095, 1095, 1095, 1096, 1096, 1096, 1096, 1096, 1097,
     1097, 1097, 1097, 1097, 1098, 1098, 1098, 1098, 1098, 1099,
     1099, 1099, 1099, 1099, 1100, 1100, 1100, 1100, 1100, 1101,
     1101, 1101, 1101, 1101, 1102,  426,  425, 1102, 1103, 1103,
     1103, 1103, 1104, 1104,  423, 1104, 1104, 1105, 1105, 1105,

      419, 1105,  418,  416,  415,  414,  413,  411,  409,  408,
      407,  406,  405,  403,  402,  399,  398,  397,  396,  395,
      391,  390,  388,  385,  384,  383,  382,  373,  372,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  360,  359,
      358,  357,  355,  354,  353,  352,  351,  349,  348,  347,
      346,  345,  344,  341,  340,  339,  336,  335,  334,  333,
      332,  329,  328,  326,  325,  324,  323,  322,  321,  319,
      318,  315,  314,  311,  310,  309,  308,  292,  291,  287,
      286,  285,  283,  282,  281,  280,  279,  278,  277,  275,
      274,  273,  272,  271,  270,  268,  267,  266,  265,  262,

      261,  260,  259,  257,  255,  254,  253,  252,  251,  250,
      249,  248,  246,  244,  243,  242,  231,  228,  227,  223,
      222,  220,  219,  217,  216,  215,  213,  212,  211,  210,
      209,  208,  207,  206,  205,  204,  202,  201,  200,  199,
      197,  196,  195,  194,  193,  192,  191,  190,  189,  188,
      187,  186,  185,  184,  183,  182,  171,  170,  169,  168,
      167,  166,  164,  163,  161,  160,  159,  158,  157,  152,
      151,  150,  149,  148,  147,  146,  145,  144,  143,  142,
      141,  140,  139,  138,  137,  136,  135,  133,  131,  130,
      129,  128,  127,  126,  125,  123,  113,  112,  111,  110,

      109,  108,  107,  106,  105,  104,  103,  101,  100,   99,
       95,   89,   88,   86,   84,   83,   82,   81,   80,   79,
       76,   55,   54,   51,   50,   49,   48,   44,   40,   37,
       26,   23,   21,   17,    8,    7,    6,    5,    4,    3,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[129] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 
    0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
/* $Id$ */
/** @file parseosrl.l
 * 
 * @author  Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin, 
 * @version 2.0, 19/07/2009
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005-2009, Robert Fourer, Jun Ma, Horand Gassmann, Kipp Martin,
 * Northwestern University, Dalhousie University and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 17 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"

#include <iostream>
#include "OSDataStructures.h"
#include "OSMathUtil.h"
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 
#include <sstream>  
#include "OSrLParserData.h"
#include "OSErrorClass.h"
#include "OSParseosrl.tab.hpp"
#include "OSResult.h"


//#define PARSERDEBUG
#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

using std::cout;
using std::endl;
using std::ostringstream;
     







#line 101 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 1557 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.cpp"

#define INITIAL 0
#define osrlattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define comment 6
#define xmldeclaration 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osrllex_init (yyscan_t* scanner);

int osrllex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 111 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"



#line 1814 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1095 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2841 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 114 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 118 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 119 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 120 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 121 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 123 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 139 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 141 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFTIMESATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 142 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 143 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 144 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 145 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 146 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLERESULTSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 147 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVERESULTSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 148 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTRESULTSATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 149 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT; return(NUMBEROFOTHERSOLUTIONRESULTSATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 150 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(NUMBEROFRECORDSATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 151 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 152 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 153 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 154 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 155 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TARGETOBJECTIVEIDXATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 157 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 158 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 159 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 160 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 161 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 162 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 163 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 164 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 165 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 166 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 167 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 168 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 169 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 170 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 171 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 172 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 173 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 174 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 175 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 176 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 177 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 178 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 179 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 180 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 183 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{return(OSRLSTARTEMPTY);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 184 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 185 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 186 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 187 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 188 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 189 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 190 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 191 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 192 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 193 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBEND);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 195 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 196 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(SERVICEURISTART);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 197 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 198 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 199 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(SERVICENAMESTART);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 200 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 201 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 202 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(INSTANCENAMESTART);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 203 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 204 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 205 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(JOBIDSTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 206 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 208 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TIMINGINFORMATIONSTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 209 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMINGINFORMATIONEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 211 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 212 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMEEND);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 214 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 215 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; unput('<'); return(MESSAGESTART);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 216 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 218 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 219 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 221 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 222 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 224 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 225 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 227 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 228 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 230 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 231 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 233 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 234 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 236 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 237 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 238 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 239 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 241 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 242 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 243 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 244 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 246 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 247 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 248 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 249 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 251 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 252 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 254 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSSTART);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 255 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSEND);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 257 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSTART);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 258 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLUTIONRESULTEND);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 260 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(RECORDSTART);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 261 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(RECORDEND);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 263 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTARTANDEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 264 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTARTANDEND);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 265 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTARTANDEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 266 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTARTANDEND);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 267 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTARTANDEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 268 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTARTANDEND);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 272 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext);   yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 274 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
BEGIN comment;
	YY_BREAK
case 117:
#line 276 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 276 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 277 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 279 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 121:
#line 281 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 281 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 282 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 285 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /* yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 286 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 287 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSRLATTRIBUTETEXT);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 290 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
{ 
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 302 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"
ECHO;
	YY_BREAK
#line 2691 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osrlrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1095 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1095 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1094);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osrllex_init_extra has the same functionality as osrllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osrlalloc in
 * the yyextra field.
 */

int osrllex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osrlset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osrlset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 302 "/home/kmartin/coin/bsp/OS/src/OSParsers/OSParseosrl.l"





