#line 2 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.cpp"

#line 4 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int osrllex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 81
#define YY_END_OF_BUFFER 82
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[719] =
    {   0,
        1,    1,    0,    0,   79,   79,    0,    0,    0,    0,
       82,   80,    1,    1,    2,   69,   80,   69,   80,    4,
       80,    3,   69,   78,   81,   79,   71,   72,   71,   75,
       76,   75,    1,    0,    0,    3,    0,    0,    0,    0,
        0,    1,   69,   69,   69,   69,   69,   69,    0,    4,
        0,    5,    6,   69,    4,   69,    0,    0,   74,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   69,
       78,   79,    0,   77,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   69,   69,   69,   69,   69,
       69,    5,    0,    0,    0,    5,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    5,   73,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   69,   69,   69,   69,   69,
       69,    5,    5,   70,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   48,
        0,    0,    0,    0,    0,   44,    0,    0,    0,    0,
        0,    0,    0,    0,   40,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   69,   69,   69,
       69,   69,   69,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   59,    0,    0,    0,    0,    0,    0,   69,
       69,   69,   69,   69,    0,   50,    0,    0,    0,    0,
        0,    0,    0,   46,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   42,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    7,   52,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   59,    0,
       62,    0,    0,    0,   60,   69,   69,   69,   50,    0,

        0,    0,    0,    0,    0,   46,    0,    0,    0,    8,
        0,    0,    0,    0,    0,    0,   42,    0,    0,    0,
        0,    0,    0,    0,   20,    0,    0,    0,    0,    0,
        0,   34,   36,    0,    0,    0,    0,    0,    0,    0,
       62,    0,    0,   60,   69,   69,   69,    0,    0,    0,
        0,    0,   22,    0,    0,    0,    8,    0,   53,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   66,
       20,   21,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   69,   69,   69,
        0,    0,    0,    0,   22,    0,    0,    0,   53,    0,

        0,    0,    0,    0,   35,    0,   37,    0,    0,    0,
        0,    0,    0,    0,   23,    0,    0,    0,    0,    0,
        0,   32,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   69,   69,   69,   69,   69,   69,
        0,    0,    0,    0,    0,   25,    0,    0,    0,    0,
        0,    0,    0,   35,   37,    0,    0,    0,    0,    0,
       67,   23,   24,    0,    0,    0,    0,    0,    0,   41,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       69,   69,   69,   69,   69,   69,    0,    0,    0,    0,
       25,    0,    0,    0,    0,    0,    0,    0,   33,    0,

        0,   38,    0,    0,   45,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       69,   69,   69,   69,   69,   69,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   33,    0,   43,   49,
        0,    0,    0,    0,    0,   28,    0,    0,    0,    0,
       11,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   69,   69,   69,   69,   69,   69,    0,    0,
       39,    0,    0,    0,   47,    0,    0,   29,    0,    0,
        0,   13,   43,    0,    0,   30,   68,   28,    0,    0,
        0,   14,   63,   11,   12,    0,    0,    0,   61,    0,

        0,    0,    0,    0,    0,   69,   69,   69,   69,   69,
        0,   51,   39,    0,    0,   47,    0,   29,    0,    0,
       16,   13,   26,    0,    0,   17,    0,    9,   64,   14,
       15,    0,   61,    0,    0,    0,    0,    0,   58,   69,
       69,   69,   69,   51,    0,    0,   19,    0,   31,    0,
       10,   16,   65,   17,   18,    9,    0,    0,    0,    0,
       58,   69,   69,   69,   69,    0,   27,   19,   31,   10,
        0,    0,    0,    0,   69,   69,   69,   69,   27,    0,
        0,    0,    0,   69,   69,   69,   69,    0,    0,    0,
        0,    0,    0,   69,   69,   69,   69,    0,    0,    0,

        0,   54,    0,   55,   69,   69,    0,    0,    0,   57,
       54,   55,   69,    0,   56,   57,   56,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    7,    1,    1,    8,    1,
        1,    7,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    7,    1,   14,
       15,   16,   17,    7,    7,    7,   18,   19,   20,   21,
        7,   22,   23,    7,    7,    7,    7,   24,   25,    7,
        7,   26,   27,    7,   28,   29,    7,    7,    1,    1,
        1,    1,    1,    1,    7,    1,   30,   31,   32,   33,

       34,   35,   36,   37,   38,   39,    7,   40,   41,   42,
       43,   44,    7,   45,   46,   47,   48,   49,    7,   50,
       51,   52,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    2,    2,    2,    1,    3,    2,    3,    1,    1,
        2,    2,    2,    2,    1,    4,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2
    } ;

static yyconst flex_int16_t yy_base[727] =
    {   0,
        0,   23,   12,   13, 1750, 1749,   38,   39,   27,   40,
     1764, 1767,   56,  102, 1767,   49,   39,   62, 1747,  148,
      178, 1767,   67,    0, 1767,    0, 1767, 1767, 1752, 1767,
     1767, 1745,    0, 1744,  216, 1767, 1725, 1725,   23, 1726,
     1705,  264,   95,   97,  108,  109,  135,  143, 1742,  113,
     1730,   34, 1767,  154,    0,  188, 1743,  280, 1767, 1709,
     1703, 1716, 1707, 1705, 1713,   46, 1712,   39, 1715,  159,
        0,    0, 1728, 1767, 1701, 1699, 1707, 1706,   53, 1693,
     1688, 1696, 1695, 1696, 1690,  192,  219,  222,  230,  259,
      270,  117,   75, 1712, 1719,  262, 1721, 1687, 1681, 1694,

     1685, 1683, 1691,  140, 1690,   89, 1693, 1680, 1691, 1678,
     1673, 1687, 1671, 1677, 1668, 1669, 1676, 1666, 1666, 1670,
     1679,  113,  274, 1767, 1662, 1676, 1660, 1659, 1659, 1671,
       52, 1668, 1670, 1666, 1665,  290,  328,  275,  325,  326,
      337, 1685, 1767, 1767, 1655, 1666, 1653, 1648, 1662, 1646,
     1652, 1643, 1640, 1644, 1601, 1599, 1602, 1595,  133, 1572,
     1576, 1572, 1554, 1576, 1552, 1560, 1555, 1545, 1549, 1530,
     1522, 1521, 1514, 1509, 1517, 1506, 1529, 1496, 1489, 1486,
     1489,  243,  359,  349, 1496, 1497,  366,  362,  374,  389,
      374,  386,  407,  410, 1483, 1484, 1454, 1476, 1447,  413,

     1446, 1443, 1440, 1425, 1417, 1416, 1412, 1404,  428, 1404,
     1419, 1402, 1414, 1421, 1404, 1401, 1389,  331, 1374, 1370,
     1371, 1360, 1348, 1360, 1362, 1359, 1339, 1326, 1310, 1311,
     1305,  431,  438,  446,  449, 1287, 1283,  456,  461,  460,
      475,  468,  190,  490,  493,  497, 1278, 1294, 1276, 1282,
     1291, 1273,  508,  512, 1269, 1247,  515, 1233, 1227, 1228,
     1214, 1212, 1218,  518,  523, 1221, 1201, 1215, 1201, 1185,
      526, 1179, 1161, 1168,  533, 1767, 1157, 1163, 1153, 1144,
     1140, 1153, 1129,  537, 1134, 1121, 1134, 1120,  541,  544,
      552, 1128, 1108,  555,  562,  558,  565,  566,  581, 1100,

     1106, 1095, 1082,  584, 1083,  589, 1071, 1072,  592,  595,
      603, 1062, 1069, 1062, 1049, 1040,  607, 1054, 1050, 1029,
     1026, 1032,  610, 1046,  613, 1027, 1019, 1003,   93, 1014,
     1001, 1767, 1767, 1000, 1004,  621,  995,  196,  988,  970,
      626,  981,  958,  629,  632,  633,  638,  972,  956,  955,
      929,  639,  654,  923,  918,  901,  657,  660,  663,  212,
      918,  896,  667,  670,  886,  885,  873,  891,  869, 1767,
      678, 1767,  686,  853,  869,  863,  851,  110,  834,  841,
      833,  689,  830,  157,  819,  544,  807,  683,  720,  683,
      800,  789,  808,  800,  704,  707,  777,  791,  710,  786,

      781,  172,  762,  723,  716,  726,  748,  767,  754,  747,
      731,  745,  751,  750,  754,  731,  701,  699,  714,  713,
      715, 1767,  694,  713,  757,  688,  703,  705,  681,  673,
      684,  661,  671,  677,  751,  759,  764,  763,  769,  794,
      642,  644,  630,  651,  784,  788,  619,  604,  592,  608,
      606,  595,  806,  809,  816,  574,  571,  557,  571,  559,
     1767,  821, 1767,  530,  537,  521,  516,  492,  509, 1767,
      493,  478,  466,  480,  446,  444,  446,  443,  436,  442,
      816,  819,  820,  831,  832,  835,  426,  422,  424,  416,
      860,  399,  405,  408,  403,  387,  404,  870,  876,  879,

      379, 1767,  377,  361, 1767,  357,  885,  364,  361,  888,
      343,  903,  349,  906,  909,  334,  345,  326,  334,  316,
      913,  918,  836,  920,  924,  925,  312,  939,  308,  313,
      944,  306,  947,  313,  307,  963,  967,  970,  974, 1767,
      280,  293,  278,  978,  301,  981,  270,  985,  996,  289,
      989,  266, 1002, 1007, 1011, 1017, 1022,  252,  260,  244,
      259, 1031, 1035, 1029,  882, 1040, 1051, 1056, 1075, 1080,
     1071,  236,  243, 1086, 1090,  232, 1095, 1101,  215, 1104,
     1110, 1113, 1119,  205, 1125, 1767, 1767, 1128, 1131, 1136,
      228, 1140, 1767, 1147, 1767, 1153, 1156, 1159, 1171,  195,

      189,  191,  194, 1174, 1177, 1180, 1185, 1186, 1191, 1214,
     1207, 1210, 1217,  174, 1231, 1234, 1237, 1240, 1246, 1252,
     1255, 1261, 1767, 1267,  197, 1270, 1273, 1278, 1767, 1283,
     1767, 1288, 1291,  179,  169,  148,  149, 1294, 1303, 1297,
     1306, 1312, 1317, 1313, 1332, 1335, 1338, 1343, 1350, 1358,
     1361, 1364, 1767, 1367, 1767, 1373,  138,  126,  110,   93,
     1376, 1370, 1371, 1379, 1377, 1396, 1399, 1402, 1411, 1414,
       83,   79,   56,   55, 1411, 1412, 1415, 1416, 1435,   48,
       34, 1439, 1453, 1447, 1452, 1473, 1488,   20, 1467, 1493,
     1503, 1510, 1513, 1508, 1524, 1529, 1544, 1547, 1561, 1564,

     1571, 1476, 1578, 1585, 1588, 1593, 1608, 1611, 1618, 1625,
     1628, 1631, 1634, 1637, 1649, 1652, 1655, 1767, 1659, 1663,
     1667, 1671, 1675, 1678, 1682, 1686
    } ;

static yyconst flex_int16_t yy_def[727] =
    {   0,
      719,  719,  720,  720,  721,  721,  722,  722,  723,  723,
      718,  718,  718,  724,  718,  724,  718,  724,  718,  724,
      718,  718,  724,  725,  718,  726,  718,  718,  718,  718,
      718,  718,   13,  718,  718,  718,  718,  718,  718,  718,
      718,  724,  724,   20,   20,   20,   20,   20,  718,  718,
      718,   20,  718,   20,   20,   20,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,   20,
      725,  726,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,   20,   20,   20,   20,   20,
       20,  718,  718,  718,  718,   20,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,   20,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,   20,  724,   20,   20,   20,
       20,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,   20,  724,  724,
       20,   20,  724,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  724,
      724,  724,  724,  724,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  724,  724,  724,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  724,  724,  724,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  724,  724,   20,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,   20,   20,   20,   20,   20,   20,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
       20,   20,   20,   20,   20,   20,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      724,  724,   20,   20,   20,   20,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  724,  724,  724,  724,  724,  724,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  724,  724,  724,  724,  724,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  724,
      724,  724,  724,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  724,  724,  724,   20,  718,  718,  718,  718,  718,
      718,  718,  718,  718,   20,   20,   20,   20,  718,  718,
      718,  718,  718,   20,   20,  724,  724,  718,  718,  718,
      718,  718,  718,  724,  724,  724,  724,  718,  718,  718,

      718,  718,  718,  718,  724,  724,  718,  718,  718,  718,
      718,  718,  724,  718,  718,  718,  718,    0,  718,  718,
      718,  718,  718,  718,  718,  718
    } ;

static yyconst flex_int16_t yy_nxt[1820] =
    {   0,
       12,   13,   14,   14,   12,   15,  718,   15,   12,   17,
       18,   19,   20,   21,   12,   22,   12,   25,   25,   25,
       25,  718,   23,   12,   13,   14,   14,   12,   15,   31,
       15,   12,   17,   18,   19,   20,   21,   12,   22,   12,
       28,   28,   31,   32,   43,   23,   52,   29,   29,   49,
      718,   50,   82,  182,  182,  182,   32,   33,   33,   33,
      718,   51,  718,  718,  718,  698,  183,   34,  718,   35,
       83,   36,  119,  718,   52,  718,  114,  718,  718,  689,
      718,  120,  718,   95,   95,  121,  129,  142,   37,  115,
       70,  116,  117,   38,  688,  120,  718,   39,   40,  121,

      683,  682,   41,   33,   42,   42,  718,   43,  718,   43,
      718,  376,  681,   34,  377,   35,   43,   36,   43,   43,
       43,   43,  156,   49,  680,   50,  674,   43,   43,   92,
       86,  157,   93,  420,   44,  158,   93,  421,   88,   45,
       87,   43,   43,   46,   47,   43,   93,   43,   48,  718,
       93,  673,  174,   43,   43,   43,   89,  175,   54,  718,
       55,  718,   43,  718,   43,   90,   52,   56,   43,   43,
      151,   43,  208,   43,  672,  671,   43,  209,   43,  123,
      427,   56,   57,  152,  428,  153,  154,   43,  660,   58,
      659,  718,   43,   91,   59,  451,   95,   95,   43,  452,

       96,  718,   43,  718,   43,  718,  658,   43,  657,   60,
       61,   43,  653,   62,  383,   63,   64,  377,   65,  645,
       66,   43,   67,   68,  637,   43,   69,   58,  636,   43,
      400,   43,   43,  401,   43,  635,  298,  136,   43,  634,
       43,   43,   43,  629,  182,  182,  182,   60,   61,   43,
      623,   62,   43,   75,   76,   43,   77,  183,   66,  619,
       78,   79,  138,   43,   69,   33,   42,   42,  137,   43,
      139,   43,   43,  617,   96,   34,  615,   35,   43,   36,
       43,   43,   43,  614,   43,   43,   43,   43,  603,   43,
      602,  601,   43,   43,   43,   43,   44,  140,  600,  596,

       43,   45,   43,   43,  593,   46,   47,   43,  190,   43,
       48,   98,   99,  141,  589,  100,  587,  101,  102,  586,
      103,  188,  104,   43,  105,  106,  585,  584,  107,  182,
      189,  189,  275,  275,  275,   43,   43,   43,   43,  718,
      580,  718,  183,  718,   43,   43,  579,   43,  576,   43,
      234,  234,  234,  573,  572,  191,   43,  569,   43,  192,
      232,  232,  232,  235,  233,  562,  233,  238,  238,  238,
      193,  561,   43,  560,   43,  182,  189,  189,  559,  558,
      239,   43,  554,  552,   43,  718,   43,  718,  183,  718,
      234,  241,  241,   43,  548,   43,   43,  547,   43,  543,

      718,  542,  718,  235,  718,   43,  240,  242,  238,  244,
      244,  245,  245,  245,  253,  253,  253,  243,  718,   43,
      718,  239,  718,  541,  540,  246,  536,  535,  254,  264,
      264,  264,  232,  232,  232,  534,  233,  533,  233,  289,
      289,  289,  532,  265,  531,  530,  255,  234,  234,  234,
      290,  290,  290,  529,  291,  247,  291,  238,  238,  238,
      235,  718,  294,  294,  294,  266,  295,  528,  295,  718,
      239,  718,  527,  718,  520,  718,  234,  241,  241,  718,
      519,  718,  518,  718,  517,  516,  718,  515,  718,  235,
      718,  238,  244,  244,  245,  245,  245,  296,  299,  299,

      299,  718,  514,  718,  239,  718,  513,  512,  246,  253,
      253,  253,  297,  306,  306,  306,  309,  309,  309,  264,
      264,  264,  511,  254,  317,  317,  317,  323,  323,  323,
      310,  510,  509,  265,  275,  275,  275,  324,  336,  336,
      336,  325,  289,  289,  289,  290,  290,  290,  508,  291,
      507,  291,  325,  341,  341,  341,  294,  294,  294,  718,
      295,  430,  295,  344,  344,  344,  718,  718,  431,  718,
      432,  718,  433,  718,  506,  505,  718,  718,  718,  718,
      718,  718,  299,  299,  299,  352,  352,  352,  504,  346,
      306,  306,  306,  309,  309,  309,  357,  357,  357,  353,

      503,  345,  502,  347,  358,  358,  358,  310,  317,  317,
      317,  323,  323,  323,  371,  371,  371,  501,  359,  500,
      497,  324,  336,  336,  336,  325,  372,  341,  341,  341,
      344,  344,  344,  718,  718,  496,  325,  495,  494,  718,
      352,  352,  352,  718,  718,  718,  718,  718,  718,  718,
      493,  718,  492,  718,  353,  395,  395,  395,  357,  357,
      357,  358,  358,  358,  399,  399,  399,  389,  404,  404,
      404,  406,  406,  406,  490,  359,  489,  488,  388,  371,
      371,  371,  405,  487,  718,  407,  390,  413,  413,  413,
      425,  425,  425,   43,  718,   43,  718,  414,  718,  480,

      479,  415,   43,  478,  415,  395,  395,  395,  445,  445,
      445,  399,  399,  399,  477,  476,  440,  454,  454,  454,
      435,  718,  446,  475,  404,  404,  404,  406,  406,  406,
      474,  718,  473,  718,  472,  718,  471,  436,  405,  470,
      469,  407,  468,  467,  437,  466,  438,  465,  439,  455,
      455,  455,  413,  413,  413,  462,  462,  462,  425,  425,
      425,   43,  414,   43,  464,  461,  415,  463,  460,   43,
       43,   43,  415,   43,   43,   43,   43,  459,   43,   43,
      458,   43,   43,   43,   43,  445,  445,  445,   43,  491,
      491,  491,   43,  481,  483,  457,   43,   43,  485,  446,

      456,  482,   43,  453,   43,  484,   43,  498,  498,  498,
      454,  454,  454,   43,  450,  449,  486,  455,  455,  455,
      448,  499,  462,  462,  462,  447,   43,   43,   43,   43,
       43,   43,   43,  444,  443,   43,  442,  441,   43,   43,
      434,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,  429,  521,  523,  426,
      522,  491,  491,  491,   43,   43,  424,  526,   43,  565,
      524,  498,  498,  498,  423,  422,  525,  537,  537,  537,
      538,  538,  538,  718,  419,  499,  544,  544,  544,  549,
      549,  549,  418,  718,  539,  718,  545,  718,  417,  550,

      546,  416,  412,  551,  553,  553,  553,  555,  555,  555,
      556,  556,  556,  607,  556,  563,  563,  411,  546,  718,
      410,  551,  409,  557,  718,  408,  718,  557,  718,  718,
       43,  718,   43,  718,   43,   43,   43,   43,  403,   43,
      570,  570,  570,   43,   43,  574,  574,  574,  577,  577,
      577,  402,  398,   43,  571,  397,  396,   43,   43,  575,
      394,  567,  578,  564,  581,  581,  581,  566,  537,  537,
      537,  538,  538,  538,  568,  583,  583,  583,  582,  544,
      544,  544,  588,  588,  588,  539,  590,  590,  590,  545,
      594,  594,  594,  546,  393,  392,  591,  549,  549,  549,

      592,  391,  595,  553,  553,  553,  387,  550,  597,  597,
      597,  551,  555,  555,  555,  386,  385,  546,  556,  556,
      556,  384,  592,  598,  598,  598,  551,  599,  382,  599,
      718,  557,  604,  604,  604,  381,  556,  563,  563,  380,
      718,  718,  718,  379,  718,  605,  718,  378,  718,  557,
      718,  718,  718,  718,  375,  718,  374,  604,  610,  610,
      373,  370,  718,  369,  718,  368,  718,  718,  367,  718,
      605,  718,  613,  613,  613,  606,  611,  611,  611,  366,
      609,  570,  570,  570,  365,  364,  608,  574,  574,  574,
      612,  616,  616,  616,  363,  571,  577,  577,  577,  362,

      361,  575,  618,  618,  618,  620,  620,  620,  360,  356,
      578,  581,  581,  581,  622,  622,  622,  355,  354,  621,
      583,  583,  583,  351,  350,  582,  624,  624,  624,  588,
      588,  588,  627,  627,  627,  349,  625,  590,  590,  590,
      626,  630,  630,  630,  348,  343,  628,  591,  594,  594,
      594,  592,  342,  631,  632,  632,  632,  597,  597,  597,
      598,  598,  598,  340,  599,  339,  599,  338,  626,  337,
      335,  592,  633,  633,  633,  604,  604,  604,  638,  638,
      638,  718,  639,  334,  639,  333,  718,  718,  605,  332,
      331,  718,  718,  718,  330,  718,  718,  718,  718,  718,

      718,  718,  718,  329,  718,  328,  718,  327,  611,  611,
      611,  644,  644,  644,  326,  604,  610,  610,  613,  613,
      613,  643,  612,  642,  640,  718,  322,  718,  605,  718,
      321,  641,  646,  646,  646,  616,  616,  616,  648,  648,
      648,  618,  618,  618,  320,  319,  647,  650,  650,  650,
      318,  316,  649,  620,  620,  620,  652,  652,  652,  315,
      314,  651,  622,  622,  622,  313,  312,  621,  624,  624,
      624,  654,  654,  654,  627,  627,  627,  311,  625,  656,
      656,  656,  626,  655,  630,  630,  630,  308,  628,  632,
      632,  632,  633,  633,  633,  638,  638,  638,  718,  639,

      307,  639,  305,  626,  661,  661,  661,  718,  718,  304,
      718,  303,  718,  718,  644,  644,  644,  718,  718,  718,
      302,  718,  301,  718,  300,  718,  662,  718,  718,  293,
      718,  292,  718,  666,  666,  666,  646,  646,  646,  668,
      668,  668,  288,  663,  648,  648,  648,  667,  287,  286,
      647,  669,  669,  669,  664,  285,  665,  284,  649,  650,
      650,  650,  670,  670,  670,  652,  652,  652,  654,  654,
      654,  718,  718,  651,  656,  656,  656,  661,  661,  661,
      718,  718,  718,  718,  718,  718,  718,   43,  283,   43,
      718,  282,  718,  281,  718,  280,   43,  666,  666,  666,

      679,  679,  679,  668,  668,  668,  279,  675,  278,  277,
      678,  667,  669,  669,  669,  670,  670,  670,  276,  676,
      677,   43,   43,   43,   43,   43,   43,   43,   43,  274,
       43,   43,  273,  272,   43,   43,  679,  679,  679,  271,
      690,  690,  690,  270,   43,  685,  269,  268,   43,   43,
      267,  263,  684,  691,  692,  692,  692,   43,  262,   43,
      686,  687,   43,  261,   43,  260,   43,  693,  699,  699,
      699,   43,  259,  258,  690,  696,  696,  711,  711,  711,
       43,  700,  257,  256,  718,   43,  718,  691,  718,  692,
      697,  697,  252,  694,  690,  690,  690,  695,  251,  718,

      250,  718,  693,  718,  701,  701,  701,  691,  702,  718,
      702,  692,  692,  692,  703,  703,  703,  249,  704,  718,
      704,  718,  248,  718,  693,  699,  706,  706,  237,  236,
      690,  696,  696,  231,  230,  718,  229,  718,  700,  718,
      718,  228,  718,  691,  718,  692,  697,  697,  707,  707,
      707,  227,  226,  705,  225,  718,  224,  718,  693,  718,
      223,  708,  699,  699,  699,  709,  709,  709,  222,  710,
      221,  710,  701,  701,  701,  700,  702,  220,  702,  703,
      703,  703,  219,  704,  218,  704,  712,  712,  712,  707,
      713,  713,  217,  216,  699,  706,  706,  215,  214,  718,

      213,  718,  708,  718,  718,  212,  718,  700,  718,  707,
      707,  707,  714,  714,  714,  211,  715,  210,  715,  709,
      709,  709,  708,  710,  207,  710,  716,  716,  716,  711,
      711,  711,  712,  712,  712,  707,  713,  713,  714,  714,
      714,  206,  715,  205,  715,  718,  204,  718,  708,  718,
      717,  717,  717,  716,  716,  716,  717,  717,  717,   16,
       16,   16,   16,   24,   24,   24,   24,   26,   26,   26,
       26,   27,   27,   27,   27,   30,   30,   30,   30,   43,
      203,   43,   71,   71,  202,   71,   72,   72,   72,  201,
      200,  199,  198,  197,  196,  195,  194,  142,  187,  186,

      185,  184,  181,  180,  179,  178,  177,  176,  173,  172,
      171,  170,  169,  168,  167,  166,  165,  164,  163,  162,
      161,  160,  159,  155,  150,  149,  148,  147,  146,  145,
      144,  142,  143,  135,  134,  133,  132,  131,  130,  128,
      127,  126,  125,  124,  122,  118,  113,  112,  111,  110,
      109,  108,   97,   94,   92,   85,   84,   81,   80,   53,
       74,   73,   53,  718,   25,   25,   11,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718
    } ;

static yyconst flex_int16_t yy_chk[1820] =
    {   0,
        1,    1,    1,    1,    1,    1,    0,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    3,
        4,    0,    1,    2,    2,    2,    2,    2,    2,    9,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        7,    8,   10,    9,   52,    2,   52,    7,    8,   17,
       16,   17,   39,  131,  131,  131,   10,   13,   13,   13,
       16,   17,   16,   18,   16,  688,  131,   13,   23,   13,
       39,   13,   68,   18,   18,   18,   66,   18,   23,  681,
       23,   68,   23,   93,   93,   68,   79,   93,   13,   66,
       23,   66,   66,   13,  680,   79,   43,   13,   13,   79,

      674,  673,   13,   14,   14,   14,   43,   44,   43,   44,
       43,  329,  672,   14,  329,   14,   44,   14,   45,   46,
       45,   46,  106,   50,  671,   50,  660,   45,   46,   92,
       44,  106,   50,  378,   14,  106,   92,  378,   46,   14,
       45,   45,   46,   14,   14,   47,   50,   47,   14,   20,
       92,  659,  122,   48,   47,   48,   46,  122,   20,   20,
       20,   20,   48,   20,   54,   47,   54,   20,   47,   70,
      104,   70,  159,   54,  658,  657,   48,  159,   70,   70,
      384,   20,   21,  104,  384,  104,  104,   54,  637,   21,
      636,  243,   70,   48,   21,  402,   56,   56,   56,  402,

       56,  243,   86,  243,   86,  243,  635,   56,  634,   21,
       21,   86,  625,   21,  338,   21,   21,  338,   21,  614,
       21,   56,   21,   21,  603,   86,   21,   35,  602,   87,
      360,   87,   88,  360,   88,  601,  243,   86,   87,  600,
       89,   88,   89,  591,  182,  182,  182,   35,   35,   89,
      584,   35,   87,   35,   35,   88,   35,  182,   35,  579,
       35,   35,   88,   89,   35,   42,   42,   42,   87,   90,
       89,   90,   96,  576,   96,   42,  573,   42,   90,   42,
       91,   96,   91,  572,  123,  138,  123,  138,  561,   91,
      560,  559,   90,  123,  138,   96,   42,   90,  558,  552,

      136,   42,  136,   91,  550,   42,   42,  123,  138,  136,
       42,   58,   58,   91,  547,   58,  545,   58,   58,  543,
       58,  136,   58,  136,   58,   58,  542,  541,   58,  137,
      137,  137,  218,  218,  218,  139,  140,  139,  140,  137,
      535,  137,  137,  137,  139,  140,  534,  141,  532,  141,
      184,  184,  184,  530,  529,  139,  141,  527,  139,  140,
      183,  183,  183,  184,  183,  520,  183,  187,  187,  187,
      141,  519,  188,  518,  188,  189,  189,  189,  517,  516,
      187,  188,  513,  511,  191,  189,  191,  189,  189,  189,
      190,  190,  190,  191,  509,  188,  192,  508,  192,  506,

      190,  504,  190,  190,  190,  192,  188,  191,  193,  193,
      193,  194,  194,  194,  200,  200,  200,  192,  193,  192,
      193,  193,  193,  503,  501,  194,  497,  496,  200,  209,
      209,  209,  232,  232,  232,  495,  232,  494,  232,  233,
      233,  233,  493,  209,  492,  490,  200,  234,  234,  234,
      235,  235,  235,  489,  235,  194,  235,  238,  238,  238,
      234,  240,  239,  239,  239,  209,  239,  488,  239,  242,
      238,  240,  487,  240,  480,  240,  241,  241,  241,  242,
      479,  242,  478,  242,  477,  476,  241,  475,  241,  241,
      241,  244,  244,  244,  245,  245,  245,  240,  246,  246,

      246,  244,  474,  244,  244,  244,  473,  472,  245,  253,
      253,  253,  242,  254,  254,  254,  257,  257,  257,  264,
      264,  264,  471,  253,  265,  265,  265,  271,  271,  271,
      257,  469,  468,  264,  275,  275,  275,  271,  284,  284,
      284,  271,  289,  289,  289,  290,  290,  290,  467,  290,
      466,  290,  284,  291,  291,  291,  294,  294,  294,  296,
      294,  386,  294,  295,  295,  295,  297,  298,  386,  296,
      386,  296,  386,  296,  465,  464,  297,  298,  297,  298,
      297,  298,  299,  299,  299,  304,  304,  304,  460,  297,
      306,  306,  306,  309,  309,  309,  310,  310,  310,  304,

      459,  296,  458,  298,  311,  311,  311,  309,  317,  317,
      317,  323,  323,  323,  325,  325,  325,  457,  311,  456,
      452,  323,  336,  336,  336,  323,  325,  341,  341,  341,
      344,  344,  344,  345,  346,  451,  336,  450,  449,  347,
      352,  352,  352,  345,  346,  345,  346,  345,  346,  347,
      448,  347,  447,  347,  352,  353,  353,  353,  357,  357,
      357,  358,  358,  358,  359,  359,  359,  346,  363,  363,
      363,  364,  364,  364,  444,  358,  443,  442,  345,  371,
      371,  371,  363,  441,  388,  364,  347,  373,  373,  373,
      382,  382,  382,  390,  388,  390,  388,  373,  388,  434,

      433,  373,  390,  432,  382,  395,  395,  395,  396,  396,
      396,  399,  399,  399,  431,  430,  390,  405,  405,  405,
      388,  389,  396,  429,  404,  404,  404,  406,  406,  406,
      428,  389,  427,  389,  426,  389,  424,  389,  404,  423,
      421,  406,  420,  419,  389,  418,  389,  417,  389,  407,
      407,  407,  413,  413,  413,  415,  415,  415,  425,  425,
      425,  435,  413,  435,  416,  414,  413,  415,  412,  436,
      435,  436,  425,  438,  437,  438,  437,  411,  436,  439,
      410,  439,  438,  437,  435,  445,  445,  445,  439,  446,
      446,  446,  436,  435,  437,  409,  438,  437,  439,  445,

      408,  436,  439,  403,  440,  438,  440,  453,  453,  453,
      454,  454,  454,  440,  401,  400,  440,  455,  455,  455,
      398,  453,  462,  462,  462,  397,  481,  440,  481,  482,
      483,  482,  483,  394,  393,  481,  392,  391,  482,  483,
      387,  484,  485,  484,  485,  486,  523,  486,  523,  481,
      484,  485,  482,  483,  486,  523,  385,  481,  483,  383,
      482,  491,  491,  491,  484,  485,  381,  486,  486,  523,
      484,  498,  498,  498,  380,  379,  485,  499,  499,  499,
      500,  500,  500,  565,  377,  498,  507,  507,  507,  510,
      510,  510,  376,  565,  500,  565,  507,  565,  375,  510,

      507,  374,  369,  510,  512,  512,  512,  514,  514,  514,
      515,  515,  515,  565,  521,  521,  521,  368,  512,  522,
      367,  514,  366,  515,  521,  365,  521,  521,  521,  522,
      524,  522,  524,  522,  525,  526,  525,  526,  362,  524,
      528,  528,  528,  525,  526,  531,  531,  531,  533,  533,
      533,  361,  356,  524,  528,  355,  354,  525,  526,  531,
      351,  525,  533,  522,  536,  536,  536,  524,  537,  537,
      537,  538,  538,  538,  526,  539,  539,  539,  536,  544,
      544,  544,  546,  546,  546,  538,  548,  548,  548,  544,
      551,  551,  551,  544,  350,  349,  548,  549,  549,  549,

      548,  348,  551,  553,  553,  553,  343,  549,  554,  554,
      554,  549,  555,  555,  555,  342,  340,  553,  556,  556,
      556,  339,  554,  557,  557,  557,  555,  557,  337,  557,
      564,  556,  562,  562,  562,  335,  563,  563,  563,  334,
      564,  566,  564,  331,  564,  562,  563,  330,  563,  563,
      563,  566,  567,  566,  328,  566,  327,  568,  568,  568,
      326,  324,  567,  322,  567,  321,  567,  568,  320,  568,
      568,  568,  571,  571,  571,  564,  569,  569,  569,  319,
      567,  570,  570,  570,  318,  316,  566,  574,  574,  574,
      569,  575,  575,  575,  315,  570,  577,  577,  577,  314,

      313,  574,  578,  578,  578,  580,  580,  580,  312,  308,
      577,  581,  581,  581,  582,  582,  582,  307,  305,  580,
      583,  583,  583,  303,  302,  581,  585,  585,  585,  588,
      588,  588,  589,  589,  589,  301,  585,  590,  590,  590,
      585,  592,  592,  592,  300,  293,  589,  590,  594,  594,
      594,  590,  292,  592,  596,  596,  596,  597,  597,  597,
      598,  598,  598,  288,  598,  287,  598,  286,  596,  285,
      283,  597,  599,  599,  599,  604,  604,  604,  605,  605,
      605,  606,  605,  282,  605,  281,  607,  608,  604,  280,
      279,  606,  609,  606,  278,  606,  607,  608,  607,  608,

      607,  608,  609,  277,  609,  274,  609,  273,  611,  611,
      611,  612,  612,  612,  272,  610,  610,  610,  613,  613,
      613,  609,  611,  608,  606,  610,  270,  610,  610,  610,
      269,  607,  615,  615,  615,  616,  616,  616,  617,  617,
      617,  618,  618,  618,  268,  267,  615,  619,  619,  619,
      266,  263,  617,  620,  620,  620,  621,  621,  621,  262,
      261,  619,  622,  622,  622,  260,  259,  620,  624,  624,
      624,  626,  626,  626,  627,  627,  627,  258,  624,  628,
      628,  628,  624,  626,  630,  630,  630,  256,  627,  632,
      632,  632,  633,  633,  633,  638,  638,  638,  640,  638,

      255,  638,  252,  632,  639,  639,  639,  641,  640,  251,
      640,  250,  640,  642,  644,  644,  644,  641,  643,  641,
      249,  641,  248,  642,  247,  642,  640,  642,  643,  237,
      643,  236,  643,  645,  645,  645,  646,  646,  646,  647,
      647,  647,  231,  641,  648,  648,  648,  645,  230,  229,
      646,  649,  649,  649,  642,  228,  643,  227,  648,  650,
      650,  650,  651,  651,  651,  652,  652,  652,  654,  654,
      654,  662,  663,  650,  656,  656,  656,  661,  661,  661,
      664,  662,  663,  662,  663,  662,  663,  665,  226,  665,
      664,  225,  664,  224,  664,  223,  665,  666,  666,  666,

      667,  667,  667,  668,  668,  668,  222,  662,  221,  220,
      665,  666,  669,  669,  669,  670,  670,  670,  219,  663,
      664,  675,  676,  675,  676,  677,  678,  677,  678,  217,
      675,  676,  216,  215,  677,  678,  679,  679,  679,  214,
      682,  682,  682,  213,  675,  676,  212,  211,  677,  678,
      210,  208,  675,  682,  683,  683,  683,  684,  207,  684,
      677,  678,  685,  206,  685,  205,  684,  683,  689,  689,
      689,  685,  204,  203,  686,  686,  686,  702,  702,  702,
      684,  689,  202,  201,  686,  685,  686,  686,  686,  687,
      687,  687,  199,  684,  690,  690,  690,  685,  198,  687,

      197,  687,  687,  687,  691,  691,  691,  690,  691,  694,
      691,  692,  692,  692,  693,  693,  693,  196,  693,  694,
      693,  694,  195,  694,  692,  695,  695,  695,  186,  185,
      696,  696,  696,  181,  180,  695,  179,  695,  695,  695,
      696,  178,  696,  696,  696,  697,  697,  697,  698,  698,
      698,  177,  176,  694,  175,  697,  174,  697,  697,  697,
      173,  698,  699,  699,  699,  700,  700,  700,  172,  700,
      171,  700,  701,  701,  701,  699,  701,  170,  701,  703,
      703,  703,  169,  703,  168,  703,  704,  704,  704,  705,
      705,  705,  167,  166,  706,  706,  706,  165,  164,  705,

      163,  705,  705,  705,  706,  162,  706,  706,  706,  707,
      707,  707,  708,  708,  708,  161,  708,  160,  708,  709,
      709,  709,  707,  709,  158,  709,  710,  710,  710,  711,
      711,  711,  712,  712,  712,  713,  713,  713,  714,  714,
      714,  157,  714,  156,  714,  713,  155,  713,  713,  713,
      715,  715,  715,  716,  716,  716,  717,  717,  717,  719,
      719,  719,  719,  720,  720,  720,  720,  721,  721,  721,
      721,  722,  722,  722,  722,  723,  723,  723,  723,  724,
      154,  724,  725,  725,  153,  725,  726,  726,  726,  152,
      151,  150,  149,  148,  147,  146,  145,  142,  135,  134,

      133,  132,  130,  129,  128,  127,  126,  125,  121,  120,
      119,  118,  117,  116,  115,  114,  113,  112,  111,  110,
      109,  108,  107,  105,  103,  102,  101,  100,   99,   98,
       97,   95,   94,   85,   84,   83,   82,   81,   80,   78,
       77,   76,   75,   73,   69,   67,   65,   64,   63,   62,
       61,   60,   57,   51,   49,   41,   40,   38,   37,   34,
       32,   29,   19,   11,    6,    5,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[82] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 
    1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
/** @file parseosrl.l
 * 
 * @author  Robert Fourer,  Jun Ma, Kipp Martin, 
 * @version 1.0, 10/05/2005
 * @since   OS1.0
 *
 * \remarks
 * Copyright (C) 2005, Robert Fourer, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Common Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"

#include <iostream>
#include "OSConfig.h"

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif




#include <sstream>  
#include "ErrorClass.h"
#include "OSrLParserData.h"
#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif

#ifdef WIN_
#define YY_NO_UNISTD_H
#include <io.h>
#include <process.h>
#endif

#include "parseosrl.tab.hpp"


     




#line 78 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 1166 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.cpp"

#define INITIAL 0
#define attributetext 1
#define osrlattributetext 2
#define comment 3
#define xmldeclaration 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 88 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"



#line 1409 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 719 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1767 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 91 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{printf("HERE IS WHITESPACE\n");}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 94 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(QUOTE);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 95 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 96 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; yylval->ival = atoi( yytext); return(INTEGER);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 97 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; yylval->dval = atof( yytext); return(DOUBLE);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 98 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 101 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 102 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 103 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(RESULTHEADERSTART);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 104 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(RESULTHEADEREND);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 105 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 106 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(SERVICEURISTART);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 107 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 108 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 109 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(SERVICENAMESTART);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 110 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 111 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 112 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(INSTANCENAMESTART);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 113 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 114 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 115 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(JOBIDSTART);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 116 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 117 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 118 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; unput('<'); return(MESSAGESTART);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 119 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 121 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 122 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 124 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(RESULTDATASTART);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 125 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(RESULTDATAEND);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 127 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 128 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 130 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 131 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 133 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 134 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 136 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 137 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 139 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 140 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 142 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 143 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 144 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 145 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 147 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 148 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 149 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 150 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 152 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 153 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 154 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 155 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 158 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 159 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 161 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 162 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 163 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 164 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 165 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(OBJECTIVEIDXATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 166 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 167 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN attributetext; return(TYPEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 168 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN attributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 169 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT; BEGIN attributetext; return(NAMEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 171 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICEURISTARTANDEND);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 172 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(SERVICENAMESTARTANDEND);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 173 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTARTANDEND);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 174 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(JOBIDSTARTANDEND);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 175 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(MESSAGESTARTANDEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 176 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  return(RESULTDATASTARTANDEND);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 181 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{ YY_PRINT;  yylval->charval = strdup(yytext);   return(ELEMENTTEXT); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 183 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
BEGIN comment;
	YY_BREAK
case 71:
#line 185 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 185 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 186 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
BEGIN 0;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 188 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 75:
#line 190 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 190 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 192 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
BEGIN 0;
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 198 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;    yylval->charval = strdup(yytext);
							BEGIN 0;  return(ATTRIBUTETEXT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 201 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->charval = strdup(yytext); return(OSRLATTRIBUTETEXT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 204 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
{ 
	std::string error;
	std::ostringstream outStr;
	outStr << "ecountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 219 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"
ECHO;
	YY_BREAK
#line 1989 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(attributetext):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 719 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 719 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 718);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 219 "/Users/kmartin/Documents/files/code/cpp/OScpp/COIN-OS/OS/src/OSParsers/parseosrl.l"





